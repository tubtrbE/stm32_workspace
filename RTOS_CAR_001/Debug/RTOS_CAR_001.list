
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008db4  08008db4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dbc  08008dbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc0  08008dc0  00018dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004340  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200043b4  200043b4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e8c7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045d8  00000000  00000000  0003e96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  00042f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00044818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028795  00000000  00000000  00045f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f343  00000000  00000000  0006e6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed39f  00000000  00000000  0008d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ad8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c74  00000000  00000000  0017ade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c30 	.word	0x08008c30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008c30 	.word	0x08008c30

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, &ch, 1, 1000);
 800050c:	1d39      	adds	r1, r7, #4
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <__io_putchar+0x20>)
 8000516:	f004 fc18 	bl	8004d4a <HAL_UART_Transmit>
    return ch;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000608 	.word	0x20000608

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000a8 	.word	0x200000a8
 8000558:	2000015c 	.word	0x2000015c

0800055c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b09c      	sub	sp, #112	; 0x70
 8000560:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000562:	2300      	movs	r3, #0
 8000564:	66bb      	str	r3, [r7, #104]	; 0x68
 8000566:	2300      	movs	r3, #0
 8000568:	66fb      	str	r3, [r7, #108]	; 0x6c
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 800056a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f005 fc94 	bl	8005e9e <osSemaphoreCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a2c      	ldr	r2, [pc, #176]	; (800062c <MX_FREERTOS_Init+0xd0>)
 800057a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 8, uint8_t);
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_FREERTOS_Init+0xd4>)
 800057e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8000588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fcb7 	bl	8005f02 <osMessageCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a27      	ldr	r2, [pc, #156]	; (8000634 <MX_FREERTOS_Init+0xd8>)
 8000598:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_FREERTOS_Init+0xdc>)
 800059c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 fc12 	bl	8005dde <osThreadCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a1f      	ldr	r2, [pc, #124]	; (800063c <MX_FREERTOS_Init+0xe0>)
 80005be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(tasktest1, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_FREERTOS_Init+0xe4>)
 80005c2:	f107 0420 	add.w	r4, r7, #32
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(tasktest1), NULL);
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fbff 	bl	8005dde <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a18      	ldr	r2, [pc, #96]	; (8000644 <MX_FREERTOS_Init+0xe8>)
 80005e4:	6013      	str	r3, [r2, #0]
  if(!Task1Handle)
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_FREERTOS_Init+0xe8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d102      	bne.n	80005f4 <MX_FREERTOS_Init+0x98>
	  printf("ERR : Console Task Creation Failure !\r\n");
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <MX_FREERTOS_Init+0xec>)
 80005f0:	f007 ffb0 	bl	8008554 <puts>

  osThreadDef(tasktest2, UartMovingCar, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_FREERTOS_Init+0xf0>)
 80005f6:	1d3c      	adds	r4, r7, #4
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(tasktest2), NULL);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fbe7 	bl	8005dde <osThreadCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <MX_FREERTOS_Init+0xf4>)
 8000614:	6013      	str	r3, [r2, #0]

  if(!Task2Handle)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_FREERTOS_Init+0xf4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <MX_FREERTOS_Init+0xc8>
     printf("ERR : CLI Task Creation Failure !\r\n");
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_FREERTOS_Init+0xf8>)
 8000620:	f007 ff98 	bl	8008554 <puts>

  /* USER CODE END RTOS_THREADS */

}
 8000624:	bf00      	nop
 8000626:	3770      	adds	r7, #112	; 0x70
 8000628:	46bd      	mov	sp, r7
 800062a:	bdb0      	pop	{r4, r5, r7, pc}
 800062c:	200000a4 	.word	0x200000a4
 8000630:	08008cb8 	.word	0x08008cb8
 8000634:	200000a0 	.word	0x200000a0
 8000638:	08008cc8 	.word	0x08008cc8
 800063c:	2000009c 	.word	0x2000009c
 8000640:	08008ce4 	.word	0x08008ce4
 8000644:	20000090 	.word	0x20000090
 8000648:	08008c6c 	.word	0x08008c6c
 800064c:	08008d00 	.word	0x08008d00
 8000650:	20000094 	.word	0x20000094
 8000654:	08008c94 	.word	0x08008c94

08000658 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
	    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 8000664:	2301      	movs	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
	    signed char cByteRxed = '\0'; // this value is what you receive
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
		for (;;) {

			/* Block until the next char is available. */
			ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <StartDefaultTask+0x5c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 f880 	bl	800677c <xQueueReceiveFromISR>
 800067c:	6178      	str	r0, [r7, #20]
			if (ret == pdPASS) {
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d112      	bne.n	80006aa <StartDefaultTask+0x52>
				/* Handle character in QUEUE */
				ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <StartDefaultTask+0x60>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f107 0210 	add.w	r2, r7, #16
 800068c:	f107 010f 	add.w	r1, r7, #15
 8000690:	4618      	mov	r0, r3
 8000692:	f006 f873 	bl	800677c <xQueueReceiveFromISR>
 8000696:	6178      	str	r0, [r7, #20]
						&xHigherPriorityWasTaken);
				if (ret) {
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <StartDefaultTask+0x52>
					// do something . . .
					Move(cByteRxed - '0');
 800069e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a2:	3b30      	subs	r3, #48	; 0x30
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fa97 	bl	8000bd8 <Move>
				}
			}
			osDelay(50);
 80006aa:	2032      	movs	r0, #50	; 0x32
 80006ac:	f005 fbe3 	bl	8005e76 <osDelay>
			ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 80006b0:	e7dc      	b.n	800066c <StartDefaultTask+0x14>
 80006b2:	bf00      	nop
 80006b4:	200000a4 	.word	0x200000a4
 80006b8:	200000a0 	.word	0x200000a0

080006bc <CheckingUartReceive>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void CheckingUartReceive (void const * argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {

//    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
    	osDelay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f005 fbd6 	bl	8005e76 <osDelay>
 80006ca:	e7fb      	b.n	80006c4 <CheckingUartReceive+0x8>

080006cc <UartMovingCar>:
    }
}

void UartMovingCar (void const * argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN StartDefaultTask */
	    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
	    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 80006d8:	2301      	movs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
	    signed char cByteRxed = '\0'; // this value is what you receive
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
		for (;;) {

			/* Block until the next char is available. */
			ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <UartMovingCar+0x5c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f107 0210 	add.w	r2, r7, #16
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f846 	bl	800677c <xQueueReceiveFromISR>
 80006f0:	6178      	str	r0, [r7, #20]
			if (ret == pdPASS) {
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d112      	bne.n	800071e <UartMovingCar+0x52>
				/* Handle character in QUEUE */
				ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <UartMovingCar+0x60>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f107 0210 	add.w	r2, r7, #16
 8000700:	f107 010f 	add.w	r1, r7, #15
 8000704:	4618      	mov	r0, r3
 8000706:	f006 f839 	bl	800677c <xQueueReceiveFromISR>
 800070a:	6178      	str	r0, [r7, #20]
						&xHigherPriorityWasTaken);
				if (ret) {
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <UartMovingCar+0x52>
					// do something . . .
					Move(cByteRxed - '0');
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	3b30      	subs	r3, #48	; 0x30
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fa5d 	bl	8000bd8 <Move>
				}
			}
			osDelay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f005 fba9 	bl	8005e76 <osDelay>
			ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000724:	e7dc      	b.n	80006e0 <UartMovingCar+0x14>
 8000726:	bf00      	nop
 8000728:	200000a4 	.word	0x200000a4
 800072c:	200000a0 	.word	0x200000a0

08000730 <HAL_UART_RxCpltCallback>:
		}
		/* USER CODE END StartDefaultTask */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_UART_RxCpltCallback+0x70>)
 800073a:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <HAL_UART_RxCpltCallback+0x74>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d124      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_UART_RxCpltCallback+0x78>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	f107 020c 	add.w	r2, r7, #12
 8000756:	2300      	movs	r3, #0
 8000758:	4914      	ldr	r1, [pc, #80]	; (80007ac <HAL_UART_RxCpltCallback+0x7c>)
 800075a:	f005 fee7 	bl	800652c <xQueueGenericSendFromISR>
 800075e:	6138      	str	r0, [r7, #16]
		if(ret) {
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d008      	beq.n	8000778 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_UART_RxCpltCallback+0x80>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f107 020c 	add.w	r2, r7, #12
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f005 ff76 	bl	8006662 <xQueueGiveFromISR>
 8000776:	e00a      	b.n	800078e <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 8000778:	6978      	ldr	r0, [r7, #20]
 800077a:	f7ff fd39 	bl	80001f0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000786:	6979      	ldr	r1, [r7, #20]
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <HAL_UART_RxCpltCallback+0x84>)
 800078a:	f004 fade 	bl	8004d4a <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 800078e:	2201      	movs	r2, #1
 8000790:	4906      	ldr	r1, [pc, #24]	; (80007ac <HAL_UART_RxCpltCallback+0x7c>)
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <HAL_UART_RxCpltCallback+0x84>)
 8000794:	f004 fb6b 	bl	8004e6e <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08008d1c 	.word	0x08008d1c
 80007a4:	40011400 	.word	0x40011400
 80007a8:	200000a0 	.word	0x200000a0
 80007ac:	20000098 	.word	0x20000098
 80007b0:	200000a4 	.word	0x200000a4
 80007b4:	20000608 	.word	0x20000608

080007b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	4b50      	ldr	r3, [pc, #320]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4f      	ldr	r2, [pc, #316]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a48      	ldr	r2, [pc, #288]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_GPIO_Init+0x15c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_GPIO_Init+0x15c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a41      	ldr	r2, [pc, #260]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_GPIO_Init+0x15c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b31      	ldr	r3, [pc, #196]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0x15c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x15c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0x15c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000898:	481f      	ldr	r0, [pc, #124]	; (8000918 <MX_GPIO_Init+0x160>)
 800089a:	f001 fdcf 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a4:	481d      	ldr	r0, [pc, #116]	; (800091c <MX_GPIO_Init+0x164>)
 80008a6:	f001 fdc9 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <MX_GPIO_Init+0x168>)
 80008b0:	f001 fdc4 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80008b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_GPIO_Init+0x160>)
 80008ce:	f001 fc09 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80008d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0x164>)
 80008ec:	f001 fbfa 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_GPIO_Init+0x168>)
 8000908:	f001 fbec 	bl	80020e4 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40021400 	.word	0x40021400
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_I2C1_Init+0x74>)
 8000962:	f001 fd85 	bl	8002470 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f92e 	bl	8000bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000974:	f001 fec0 	bl	80026f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800097e:	f000 f925 	bl	8000bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_I2C1_Init+0x74>)
 8000986:	f001 fef3 	bl	8002770 <HAL_I2CEx_ConfigDigitalFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 f91c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000035c 	.word	0x2000035c
 800099c:	40005400 	.word	0x40005400
 80009a0:	000186a0 	.word	0x000186a0

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <HAL_I2C_MspInit+0x8c>)
 8000a00:	f001 fb70 	bl	80020e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f001 f99e 	bl	8001d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f81e 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f7ff feba 	bl	80007b8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a44:	f000 faa6 	bl	8000f94 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000a48:	f000 ffcc 	bl	80019e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a4c:	f000 fff4 	bl	8001a38 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8000a50:	f000 ff9e 	bl	8001990 <MX_UART7_Init>
  MX_I2C1_Init();
 8000a54:	f7ff ff66 	bl	8000924 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a58:	f000 fd02 	bl	8001460 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000a5c:	f001 f816 	bl	8001a8c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000a60:	f000 fc8a 	bl	8001378 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a64:	f000 fd92 	bl	800158c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a68:	f000 fe00 	bl	800166c <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a6c:	f000 f878 	bl	8000b60 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a70:	f7ff fd74 	bl	800055c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a74:	f005 f9ac 	bl	8005dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x44>
	...

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	; 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 fc57 	bl	800833e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <SystemClock_Config+0xdc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a2b      	ldr	r2, [pc, #172]	; (8000b58 <SystemClock_Config+0xdc>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <SystemClock_Config+0xdc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemClock_Config+0xe0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <SystemClock_Config+0xe0>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemClock_Config+0xe0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000af4:	23b4      	movs	r3, #180	; 0xb4
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fec3 	bl	8002890 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b10:	f000 f85c 	bl	8000bcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b14:	f001 fe6c 	bl	80027f0 <HAL_PWREx_EnableOverDrive>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1e:	f000 f855 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2105      	movs	r1, #5
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 f91d 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b4c:	f000 f83e 	bl	8000bcc <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2105      	movs	r1, #5
 8000b68:	2047      	movs	r0, #71	; 0x47
 8000b6a:	f001 f9ff 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b6e:	2047      	movs	r0, #71	; 0x47
 8000b70:	f001 fa18 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	201b      	movs	r0, #27
 8000b7a:	f001 f9f7 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b7e:	201b      	movs	r0, #27
 8000b80:	f001 fa10 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2105      	movs	r1, #5
 8000b88:	201d      	movs	r0, #29
 8000b8a:	f001 f9ef 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b8e:	201d      	movs	r0, #29
 8000b90:	f001 fa08 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2105      	movs	r1, #5
 8000b98:	201e      	movs	r0, #30
 8000b9a:	f001 f9e7 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b9e:	201e      	movs	r0, #30
 8000ba0:	f001 fa00 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f001 f8ff 	bl	8001dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40000c00 	.word	0x40000c00

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <Move>:
 *  Created on: Jun 30, 2022
 *      Author: cjhno
 */
#include "motor.h"

void Move(int controlcmd){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	f200 8097 	bhi.w	8000d16 <Move+0x13e>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <Move+0x18>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000cf1 	.word	0x08000cf1
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c7f 	.word	0x08000c7f
 8000bfc:	08000c33 	.word	0x08000c33
 8000c00:	08000c59 	.word	0x08000c59
 8000c04:	08000ca5 	.word	0x08000ca5
 8000c08:	08000ccb 	.word	0x08000ccb
		case FORWARD:
			Forward();
 8000c0c:	f000 f88c 	bl	8000d28 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2101      	movs	r1, #1
 8000c14:	4843      	ldr	r0, [pc, #268]	; (8000d24 <Move+0x14c>)
 8000c16:	f001 fc11 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	4841      	ldr	r0, [pc, #260]	; (8000d24 <Move+0x14c>)
 8000c20:	f001 fc0c 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	483e      	ldr	r0, [pc, #248]	; (8000d24 <Move+0x14c>)
 8000c2c:	f001 fc06 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000c30:	e074      	b.n	8000d1c <Move+0x144>
		case BACKWARD:
			Backward();
 8000c32:	f000 f8a9 	bl	8000d88 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <Move+0x14c>)
 8000c3c:	f001 fbfe 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <Move+0x14c>)
 8000c46:	f001 fbf9 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4834      	ldr	r0, [pc, #208]	; (8000d24 <Move+0x14c>)
 8000c52:	f001 fbf3 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000c56:	e061      	b.n	8000d1c <Move+0x144>
		case LEFT:
			Left();
 8000c58:	f000 f8f6 	bl	8000e48 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4830      	ldr	r0, [pc, #192]	; (8000d24 <Move+0x14c>)
 8000c62:	f001 fbeb 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	482e      	ldr	r0, [pc, #184]	; (8000d24 <Move+0x14c>)
 8000c6c:	f001 fbe6 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	482b      	ldr	r0, [pc, #172]	; (8000d24 <Move+0x14c>)
 8000c78:	f001 fbe0 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000c7c:	e04e      	b.n	8000d1c <Move+0x144>
		case RIGHT:
			Right();
 8000c7e:	f000 f8b3 	bl	8000de8 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	4827      	ldr	r0, [pc, #156]	; (8000d24 <Move+0x14c>)
 8000c88:	f001 fbd8 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <Move+0x14c>)
 8000c92:	f001 fbd3 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <Move+0x14c>)
 8000c9e:	f001 fbcd 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000ca2:	e03b      	b.n	8000d1c <Move+0x144>
		case CW:
			Cw();
 8000ca4:	f000 f900 	bl	8000ea8 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	481d      	ldr	r0, [pc, #116]	; (8000d24 <Move+0x14c>)
 8000cae:	f001 fbc5 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <Move+0x14c>)
 8000cb8:	f001 fbc0 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <Move+0x14c>)
 8000cc4:	f001 fbba 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000cc8:	e028      	b.n	8000d1c <Move+0x144>
		case CCW:
			Ccw();
 8000cca:	f000 f91d 	bl	8000f08 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <Move+0x14c>)
 8000cd4:	f001 fbb2 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <Move+0x14c>)
 8000cde:	f001 fbad 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce8:	480e      	ldr	r0, [pc, #56]	; (8000d24 <Move+0x14c>)
 8000cea:	f001 fba7 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000cee:	e015      	b.n	8000d1c <Move+0x144>
		case STOP:
			Stop();
 8000cf0:	f000 f93a 	bl	8000f68 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <Move+0x14c>)
 8000cfa:	f001 fb9f 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <Move+0x14c>)
 8000d04:	f001 fb9a 	bl	800243c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <Move+0x14c>)
 8000d10:	f001 fb94 	bl	800243c <HAL_GPIO_WritePin>
			break;
 8000d14:	e002      	b.n	8000d1c <Move+0x144>
		default:
			Stop();
 8000d16:	f000 f927 	bl	8000f68 <Stop>
			break;
 8000d1a:	bf00      	nop
		}
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40020400 	.word	0x40020400

08000d28 <Forward>:

void Forward()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <Forward+0x54>)
 8000d32:	f001 fb83 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4810      	ldr	r0, [pc, #64]	; (8000d80 <Forward+0x58>)
 8000d3e:	f001 fb7d 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <Forward+0x58>)
 8000d48:	f001 fb78 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <Forward+0x58>)
 8000d54:	f001 fb72 	bl	800243c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <Forward+0x5c>)
 8000d5c:	f002 fdf6 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d60:	2104      	movs	r1, #4
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <Forward+0x5c>)
 8000d64:	f002 fdf2 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <Forward+0x5c>)
 8000d6c:	f002 fdee 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000d70:	210c      	movs	r1, #12
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <Forward+0x5c>)
 8000d74:	f002 fdea 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40021400 	.word	0x40021400
 8000d84:	20000464 	.word	0x20000464

08000d88 <Backward>:

void Backward()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <Backward+0x54>)
 8000d92:	f001 fb53 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <Backward+0x58>)
 8000d9e:	f001 fb4d 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <Backward+0x58>)
 8000da8:	f001 fb48 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <Backward+0x58>)
 8000db4:	f001 fb42 	bl	800243c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000db8:	2100      	movs	r1, #0
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <Backward+0x5c>)
 8000dbc:	f002 fdc6 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <Backward+0x5c>)
 8000dc4:	f002 fdc2 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <Backward+0x5c>)
 8000dcc:	f002 fdbe 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000dd0:	210c      	movs	r1, #12
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <Backward+0x5c>)
 8000dd4:	f002 fdba 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021800 	.word	0x40021800
 8000de0:	40021400 	.word	0x40021400
 8000de4:	20000464 	.word	0x20000464

08000de8 <Right>:

void Right()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <Right+0x54>)
 8000df2:	f001 fb23 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <Right+0x58>)
 8000dfe:	f001 fb1d 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <Right+0x58>)
 8000e08:	f001 fb18 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <Right+0x58>)
 8000e14:	f001 fb12 	bl	800243c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480a      	ldr	r0, [pc, #40]	; (8000e44 <Right+0x5c>)
 8000e1c:	f002 fd96 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e20:	2104      	movs	r1, #4
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <Right+0x5c>)
 8000e24:	f002 fd92 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <Right+0x5c>)
 8000e2c:	f002 fd8e 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e30:	210c      	movs	r1, #12
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <Right+0x5c>)
 8000e34:	f002 fd8a 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40021400 	.word	0x40021400
 8000e44:	20000464 	.word	0x20000464

08000e48 <Left>:

void Left()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <Left+0x54>)
 8000e52:	f001 faf3 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <Left+0x58>)
 8000e5e:	f001 faed 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <Left+0x58>)
 8000e68:	f001 fae8 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <Left+0x58>)
 8000e74:	f001 fae2 	bl	800243c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <Left+0x5c>)
 8000e7c:	f002 fd66 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e80:	2104      	movs	r1, #4
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <Left+0x5c>)
 8000e84:	f002 fd62 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <Left+0x5c>)
 8000e8c:	f002 fd5e 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e90:	210c      	movs	r1, #12
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <Left+0x5c>)
 8000e94:	f002 fd5a 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	20000464 	.word	0x20000464

08000ea8 <Cw>:

void Cw()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <Cw+0x54>)
 8000eb2:	f001 fac3 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <Cw+0x58>)
 8000ebe:	f001 fabd 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <Cw+0x58>)
 8000ec8:	f001 fab8 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <Cw+0x58>)
 8000ed4:	f001 fab2 	bl	800243c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <Cw+0x5c>)
 8000edc:	f002 fd36 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <Cw+0x5c>)
 8000ee4:	f002 fd32 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <Cw+0x5c>)
 8000eec:	f002 fd2e 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ef0:	210c      	movs	r1, #12
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <Cw+0x5c>)
 8000ef4:	f002 fd2a 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40021400 	.word	0x40021400
 8000f04:	20000464 	.word	0x20000464

08000f08 <Ccw>:

void Ccw()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <Ccw+0x54>)
 8000f12:	f001 fa93 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	4810      	ldr	r0, [pc, #64]	; (8000f60 <Ccw+0x58>)
 8000f1e:	f001 fa8d 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <Ccw+0x58>)
 8000f28:	f001 fa88 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <Ccw+0x58>)
 8000f34:	f001 fa82 	bl	800243c <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480a      	ldr	r0, [pc, #40]	; (8000f64 <Ccw+0x5c>)
 8000f3c:	f002 fd06 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f40:	2104      	movs	r1, #4
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <Ccw+0x5c>)
 8000f44:	f002 fd02 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <Ccw+0x5c>)
 8000f4c:	f002 fcfe 	bl	800394c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f50:	210c      	movs	r1, #12
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <Ccw+0x5c>)
 8000f54:	f002 fcfa 	bl	800394c <HAL_TIM_PWM_Start>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	40021400 	.word	0x40021400
 8000f64:	20000464 	.word	0x20000464

08000f68 <Stop>:

void Stop()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <Stop+0x28>)
 8000f70:	f002 fdb4 	bl	8003adc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <Stop+0x28>)
 8000f78:	f002 fdb0 	bl	8003adc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <Stop+0x28>)
 8000f80:	f002 fdac 	bl	8003adc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000f84:	210c      	movs	r1, #12
 8000f86:	4802      	ldr	r0, [pc, #8]	; (8000f90 <Stop+0x28>)
 8000f88:	f002 fda8 	bl	8003adc <HAL_TIM_PWM_Stop>


}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000464 	.word	0x20000464

08000f94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MX_RTC_Init+0x48>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fa6:	227f      	movs	r2, #127	; 0x7f
 8000fa8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fac:	22ff      	movs	r2, #255	; 0xff
 8000fae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_RTC_Init+0x44>)
 8000fc4:	f002 faae 	bl	8003524 <HAL_RTC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fce:	f7ff fdfd 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200003b0 	.word	0x200003b0
 8000fdc:	40002800 	.word	0x40002800

08000fe0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2230      	movs	r2, #48	; 0x30
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f007 f9a4 	bl	800833e <memset>
  if(rtcHandle->Instance==RTC)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_RTC_MspInit+0x4c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d111      	bne.n	8001024 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001000:	2320      	movs	r3, #32
 8001002:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f8c8 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800101a:	f7ff fdd7 	bl	8000bcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_RTC_MspInit+0x50>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40002800 	.word	0x40002800
 8001030:	42470e3c 	.word	0x42470e3c

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x54>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x54>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x54>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x54>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x54>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x54>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 ff77 	bl	8001f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f000 ff63 	bl	8001f6c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010a6:	2032      	movs	r0, #50	; 0x32
 80010a8:	f000 ff7c 	bl	8001fa4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_InitTick+0xa4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_InitTick+0xa4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_InitTick+0xa4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c8:	f107 0210 	add.w	r2, r7, #16
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 f834 	bl	8003140 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010d8:	f002 f80a 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80010dc:	4603      	mov	r3, r0
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_InitTick+0xa8>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9b      	lsrs	r3, r3, #18
 80010ec:	3b01      	subs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_InitTick+0xac>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_InitTick+0xb0>)
 80010f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_InitTick+0xac>)
 80010f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010fc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_InitTick+0xac>)
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_InitTick+0xac>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_InitTick+0xac>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_InitTick+0xac>)
 8001112:	f002 fb01 	bl	8003718 <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d104      	bne.n	8001126 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <HAL_InitTick+0xac>)
 800111e:	f002 fb4b 	bl	80037b8 <HAL_TIM_Base_Start_IT>
 8001122:	4603      	mov	r3, r0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	431bde83 	.word	0x431bde83
 8001138:	200003d0 	.word	0x200003d0
 800113c:	40000c00 	.word	0x40000c00

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM1_CC_IRQHandler+0x10>)
 8001172:	f002 fd7c 	bl	8003c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000041c 	.word	0x2000041c

08001180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM3_IRQHandler+0x10>)
 8001186:	f002 fd72 	bl	8003c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200004ac 	.word	0x200004ac

08001194 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM4_IRQHandler+0x10>)
 800119a:	f002 fd68 	bl	8003c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200004f4 	.word	0x200004f4

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f003 fe8f 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000580 	.word	0x20000580

080011bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART3_IRQHandler+0x10>)
 80011c2:	f003 fe85 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200005c4 	.word	0x200005c4

080011d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM5_IRQHandler+0x10>)
 80011d6:	f002 fd4a 	bl	8003c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003d0 	.word	0x200003d0

080011e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART6_IRQHandler+0x10>)
 80011ea:	f003 fe71 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000608 	.word	0x20000608

080011f8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <UART7_IRQHandler+0x10>)
 80011fe:	f003 fe67 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000053c 	.word	0x2000053c

0800120c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
	}

return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f94f 	bl	8000504 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
	}
	return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f006 fee0 	bl	80080dc <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20030000 	.word	0x20030000
 8001348:	00000400 	.word	0x00000400
 800134c:	20000418 	.word	0x20000418
 8001350:	200043b8 	.word	0x200043b8

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013a4:	4a2d      	ldr	r2, [pc, #180]	; (800145c <MX_TIM1_Init+0xe4>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013aa:	2259      	movs	r2, #89	; 0x59
 80013ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ce:	4822      	ldr	r0, [pc, #136]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013d0:	f002 f9a2 	bl	8003718 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80013da:	f7ff fbf7 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	4619      	mov	r1, r3
 80013ea:	481b      	ldr	r0, [pc, #108]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013ec:	f002 fea6 	bl	800413c <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013f6:	f7ff fbe9 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <MX_TIM1_Init+0xe0>)
 80013fc:	f002 fbde 	bl	8003bbc <HAL_TIM_IC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001406:	f7ff fbe1 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_TIM1_Init+0xe0>)
 800141a:	f003 fbb9 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001424:	f7ff fbd2 	bl	8000bcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800142c:	2301      	movs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_TIM1_Init+0xe0>)
 8001440:	f002 fd1d 	bl	8003e7e <HAL_TIM_IC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800144a:	f7ff fbbf 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000041c 	.word	0x2000041c
 800145c:	40010000 	.word	0x40010000

08001460 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MX_TIM2_Init+0x128>)
 8001492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001498:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <MX_TIM2_Init+0x128>)
 800149a:	2259      	movs	r2, #89	; 0x59
 800149c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <MX_TIM2_Init+0x128>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <MX_TIM2_Init+0x128>)
 80014a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <MX_TIM2_Init+0x128>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b35      	ldr	r3, [pc, #212]	; (8001588 <MX_TIM2_Init+0x128>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b8:	4833      	ldr	r0, [pc, #204]	; (8001588 <MX_TIM2_Init+0x128>)
 80014ba:	f002 f92d 	bl	8003718 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014c4:	f7ff fb82 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	4619      	mov	r1, r3
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <MX_TIM2_Init+0x128>)
 80014d6:	f002 fe31 	bl	800413c <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014e0:	f7ff fb74 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <MX_TIM2_Init+0x128>)
 80014e6:	f002 f9d7 	bl	8003898 <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014f0:	f7ff fb6c 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4619      	mov	r1, r3
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_TIM2_Init+0x128>)
 8001504:	f003 fb44 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800150e:	f7ff fb5d 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001512:	2370      	movs	r3, #112	; 0x70
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <MX_TIM2_Init+0x128>)
 800152a:	f002 fd45 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001534:	f7ff fb4a 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2204      	movs	r2, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_TIM2_Init+0x128>)
 8001540:	f002 fd3a 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800154a:	f7ff fb3f 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2208      	movs	r2, #8
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM2_Init+0x128>)
 8001556:	f002 fd2f 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001560:	f7ff fb34 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	220c      	movs	r2, #12
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM2_Init+0x128>)
 800156c:	f002 fd24 	bl	8003fb8 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001576:	f7ff fb29 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM2_Init+0x128>)
 800157c:	f000 f9b0 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000464 	.word	0x20000464

0800158c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015b8:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <MX_TIM3_Init+0xdc>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015be:	2259      	movs	r2, #89	; 0x59
 80015c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015de:	f002 f89b 	bl	8003718 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80015e8:	f7ff faf0 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	4619      	mov	r1, r3
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_TIM3_Init+0xd8>)
 80015fa:	f002 fd9f 	bl	800413c <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001604:	f7ff fae2 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM3_Init+0xd8>)
 800160a:	f002 fad7 	bl	8003bbc <HAL_TIM_IC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001614:	f7ff fada 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_TIM3_Init+0xd8>)
 8001628:	f003 fab2 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001632:	f7ff facb 	bl	8000bcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800163a:	2301      	movs	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM3_Init+0xd8>)
 800164e:	f002 fc16 	bl	8003e7e <HAL_TIM_IC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001658:	f7ff fab8 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200004ac 	.word	0x200004ac
 8001668:	40000400 	.word	0x40000400

0800166c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <MX_TIM4_Init+0xd8>)
 8001698:	4a2b      	ldr	r2, [pc, #172]	; (8001748 <MX_TIM4_Init+0xdc>)
 800169a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_TIM4_Init+0xd8>)
 800169e:	2259      	movs	r2, #89	; 0x59
 80016a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016bc:	4821      	ldr	r0, [pc, #132]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016be:	f002 f82b 	bl	8003718 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80016c8:	f7ff fa80 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4619      	mov	r1, r3
 80016d8:	481a      	ldr	r0, [pc, #104]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016da:	f002 fd2f 	bl	800413c <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f7ff fa72 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <MX_TIM4_Init+0xd8>)
 80016ea:	f002 fa67 	bl	8003bbc <HAL_TIM_IC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f7ff fa6a 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <MX_TIM4_Init+0xd8>)
 8001708:	f003 fa42 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001712:	f7ff fa5b 	bl	8000bcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM4_Init+0xd8>)
 800172e:	f002 fba6 	bl	8003e7e <HAL_TIM_IC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001738:	f7ff fa48 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200004f4 	.word	0x200004f4
 8001748:	40000800 	.word	0x40000800

0800174c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <HAL_TIM_Base_MspInit+0x178>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d12d      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4842      	ldr	r0, [pc, #264]	; (80018cc <HAL_TIM_Base_MspInit+0x180>)
 80017c4:	f000 fc8e 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017c8:	e077      	b.n	80018ba <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d10e      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
}
 80017f0:	e063      	b.n	80018ba <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <HAL_TIM_Base_MspInit+0x184>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d12c      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a30      	ldr	r2, [pc, #192]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001834:	2340      	movs	r3, #64	; 0x40
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001844:	2302      	movs	r3, #2
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4821      	ldr	r0, [pc, #132]	; (80018d4 <HAL_TIM_Base_MspInit+0x188>)
 8001850:	f000 fc48 	bl	80020e4 <HAL_GPIO_Init>
}
 8001854:	e031      	b.n	80018ba <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_TIM_Base_MspInit+0x18c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d12c      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_TIM_Base_MspInit+0x17c>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018aa:	2302      	movs	r3, #2
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_TIM_Base_MspInit+0x190>)
 80018b6:	f000 fc15 	bl	80020e4 <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3738      	adds	r7, #56	; 0x38
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40000400 	.word	0x40000400
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40000800 	.word	0x40000800
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d13c      	bne.n	800197c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_TIM_MspPostInit+0xa4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800194a:	2301      	movs	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <HAL_TIM_MspPostInit+0xa8>)
 8001956:	f000 fbc5 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800195a:	f640 4308 	movw	r3, #3080	; 0xc08
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_TIM_MspPostInit+0xac>)
 8001978:	f000 fbb4 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400

08001990 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_UART7_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_UART7_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_UART7_Init+0x4c>)
 800199c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019a0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_UART7_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_UART7_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_UART7_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_UART7_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_UART7_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_UART7_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_UART7_Init+0x4c>)
 80019c8:	f003 f972 	bl	8004cb0 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80019d2:	f7ff f8fb 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000053c 	.word	0x2000053c
 80019e0:	40007800 	.word	0x40007800

080019e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <MX_USART2_UART_Init+0x50>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	f003 f948 	bl	8004cb0 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a26:	f7ff f8d1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000580 	.word	0x20000580
 8001a34:	40004400 	.word	0x40004400

08001a38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART3_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a70:	f003 f91e 	bl	8004cb0 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff f8a7 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200005c4 	.word	0x200005c4
 8001a88:	40004800 	.word	0x40004800

08001a8c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_USART6_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001a98:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a9c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART6_UART_Init+0x4c>)
 8001ac4:	f003 f8f4 	bl	8004cb0 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f7ff f87d 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000608 	.word	0x20000608
 8001adc:	40011400 	.word	0x40011400

08001ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_UART_MspInit+0x220>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d135      	bne.n	8001b6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a7e      	ldr	r2, [pc, #504]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	486c      	ldr	r0, [pc, #432]	; (8001d08 <HAL_UART_MspInit+0x228>)
 8001b58:	f000 fac4 	bl	80020e4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2052      	movs	r0, #82	; 0x52
 8001b62:	f000 fa03 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001b66:	2052      	movs	r0, #82	; 0x52
 8001b68:	f000 fa1c 	bl	8001fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b6c:	e0c4      	b.n	8001cf8 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a66      	ldr	r2, [pc, #408]	; (8001d0c <HAL_UART_MspInit+0x22c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d152      	bne.n	8001c1e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	4a60      	ldr	r2, [pc, #384]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b86:	6413      	str	r3, [r2, #64]	; 0x40
 8001b88:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4a59      	ldr	r2, [pc, #356]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	484a      	ldr	r0, [pc, #296]	; (8001d10 <HAL_UART_MspInit+0x230>)
 8001be8:	f000 fa7c 	bl	80020e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bec:	2320      	movs	r3, #32
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	4843      	ldr	r0, [pc, #268]	; (8001d14 <HAL_UART_MspInit+0x234>)
 8001c08:	f000 fa6c 	bl	80020e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2105      	movs	r1, #5
 8001c10:	2026      	movs	r0, #38	; 0x26
 8001c12:	f000 f9ab 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c16:	2026      	movs	r0, #38	; 0x26
 8001c18:	f000 f9c4 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 8001c1c:	e06c      	b.n	8001cf8 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3d      	ldr	r2, [pc, #244]	; (8001d18 <HAL_UART_MspInit+0x238>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d135      	bne.n	8001c94 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a34      	ldr	r2, [pc, #208]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a2d      	ldr	r2, [pc, #180]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c72:	2307      	movs	r3, #7
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4825      	ldr	r0, [pc, #148]	; (8001d14 <HAL_UART_MspInit+0x234>)
 8001c7e:	f000 fa31 	bl	80020e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	2027      	movs	r0, #39	; 0x27
 8001c88:	f000 f970 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c8c:	2027      	movs	r0, #39	; 0x27
 8001c8e:	f000 f989 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
}
 8001c92:	e031      	b.n	8001cf8 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <HAL_UART_MspInit+0x23c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12c      	bne.n	8001cf8 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_UART_MspInit+0x224>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001cd6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <HAL_UART_MspInit+0x240>)
 8001cf4:	f000 f9f6 	bl	80020e4 <HAL_GPIO_Init>
}
 8001cf8:	bf00      	nop
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40007800 	.word	0x40007800
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40004400 	.word	0x40004400
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40004800 	.word	0x40004800
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40021800 	.word	0x40021800

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff fb01 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f006 fabf 	bl	80082d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7fe fe6d 	bl	8000a34 <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d68:	08008dc4 	.word	0x08008dc4
  ldr r2, =_sbss
 8001d6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d70:	200043b4 	.word	0x200043b4

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>
	...

08001d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_Init+0x40>)
 8001d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_Init+0x40>)
 8001d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x40>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f8d8 	bl	8001f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f7ff f970 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff f942 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	2000064c 	.word	0x2000064c

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000064c 	.word	0x2000064c

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff4c 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7e:	f7ff ff61 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7ff ffb1 	bl	8001ef0 <NVIC_EncodePriority>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff80 	bl	8001e9c <__NVIC_SetPriority>
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff54 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fce:	f7ff ff09 	bl	8001de4 <HAL_GetTick>
 8001fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e052      	b.n	8002098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0216 	bic.w	r2, r2, #22
 8002000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_DMA_Abort+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002042:	e013      	b.n	800206c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002044:	f7ff fece 	bl	8001de4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d90c      	bls.n	800206c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e015      	b.n	8002098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e4      	bne.n	8002044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	223f      	movs	r2, #63	; 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d004      	beq.n	80020be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00c      	b.n	80020d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2205      	movs	r2, #5
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e177      	b.n	80023f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8166 	bne.w	80023ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80c0 	beq.w	80023ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_GPIO_Init+0x324>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a61      	ldr	r2, [pc, #388]	; (800240c <HAL_GPIO_Init+0x328>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_GPIO_Init+0x32c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d037      	beq.n	8002322 <HAL_GPIO_Init+0x23e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_GPIO_Init+0x330>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_GPIO_Init+0x23a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x334>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x236>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x338>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x232>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x33c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a53      	ldr	r2, [pc, #332]	; (8002424 <HAL_GPIO_Init+0x340>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x22a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x344>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x226>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x348>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x34c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x350>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x21a>
 80022fa:	2309      	movs	r3, #9
 80022fc:	e012      	b.n	8002324 <HAL_GPIO_Init+0x240>
 80022fe:	230a      	movs	r3, #10
 8002300:	e010      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002302:	2308      	movs	r3, #8
 8002304:	e00e      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002306:	2307      	movs	r3, #7
 8002308:	e00c      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230a:	2306      	movs	r3, #6
 800230c:	e00a      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230e:	2305      	movs	r3, #5
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002312:	2304      	movs	r3, #4
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x328>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_GPIO_Init+0x354>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_GPIO_Init+0x354>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_GPIO_Init+0x354>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f ae84 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40021400 	.word	0x40021400
 8002428:	40021800 	.word	0x40021800
 800242c:	40021c00 	.word	0x40021c00
 8002430:	40022000 	.word	0x40022000
 8002434:	40022400 	.word	0x40022400
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e12b      	b.n	80026da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fa84 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d4:	f000 fe0c 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80024d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a81      	ldr	r2, [pc, #516]	; (80026e4 <HAL_I2C_Init+0x274>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d807      	bhi.n	80024f4 <HAL_I2C_Init+0x84>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a80      	ldr	r2, [pc, #512]	; (80026e8 <HAL_I2C_Init+0x278>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e006      	b.n	8002502 <HAL_I2C_Init+0x92>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a7d      	ldr	r2, [pc, #500]	; (80026ec <HAL_I2C_Init+0x27c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bf94      	ite	ls
 80024fc:	2301      	movls	r3, #1
 80024fe:	2300      	movhi	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0e7      	b.n	80026da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a78      	ldr	r2, [pc, #480]	; (80026f0 <HAL_I2C_Init+0x280>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <HAL_I2C_Init+0x274>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d802      	bhi.n	8002544 <HAL_I2C_Init+0xd4>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	e009      	b.n	8002558 <HAL_I2C_Init+0xe8>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_I2C_Init+0x284>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	3301      	adds	r3, #1
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430b      	orrs	r3, r1
 800255e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800256a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	495c      	ldr	r1, [pc, #368]	; (80026e4 <HAL_I2C_Init+0x274>)
 8002574:	428b      	cmp	r3, r1
 8002576:	d819      	bhi.n	80025ac <HAL_I2C_Init+0x13c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e59      	subs	r1, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fbb1 f3f3 	udiv	r3, r1, r3
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	f640 73fc 	movw	r3, #4092	; 0xffc
 800258c:	400b      	ands	r3, r1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_I2C_Init+0x138>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e59      	subs	r1, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	e051      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e04f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <HAL_I2C_Init+0x168>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e012      	b.n	80025fe <HAL_I2C_Init+0x18e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x196>
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_I2C_Init+0x1dc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10e      	bne.n	800262c <HAL_I2C_Init+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e58      	subs	r0, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	440b      	add	r3, r1
 800261c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262a:	e00f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	6809      	ldr	r1, [r1, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800267a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6911      	ldr	r1, [r2, #16]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	000186a0 	.word	0x000186a0
 80026e8:	001e847f 	.word	0x001e847f
 80026ec:	003d08ff 	.word	0x003d08ff
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	d129      	bne.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2224      	movs	r2, #36	; 0x24
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0210 	bic.w	r2, r2, #16
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b20      	cmp	r3, #32
 8002788:	d12a      	bne.n	80027e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2224      	movs	r2, #36	; 0x24
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80027aa:	89fb      	ldrh	r3, [r7, #14]
 80027ac:	f023 030f 	bic.w	r3, r3, #15
 80027b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	89fb      	ldrh	r3, [r7, #14]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	89fa      	ldrh	r2, [r7, #14]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_PWREx_EnableOverDrive+0x90>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_PWREx_EnableOverDrive+0x90>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_PWREx_EnableOverDrive+0x90>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_PWREx_EnableOverDrive+0x94>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7ff fae2 	bl	8001de4 <HAL_GetTick>
 8002820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002822:	e009      	b.n	8002838 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002824:	f7ff fade 	bl	8001de4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002832:	d901      	bls.n	8002838 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e01f      	b.n	8002878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_PWREx_EnableOverDrive+0x98>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d1ee      	bne.n	8002824 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800284c:	f7ff faca 	bl	8001de4 <HAL_GetTick>
 8002850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002852:	e009      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002854:	f7ff fac6 	bl	8001de4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	d901      	bls.n	8002868 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e007      	b.n	8002878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_PWREx_EnableOverDrive+0x98>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002874:	d1ee      	bne.n	8002854 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	420e0040 	.word	0x420e0040
 8002888:	40007000 	.word	0x40007000
 800288c:	420e0044 	.word	0x420e0044

08002890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e267      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d075      	beq.n	800299a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d112      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05b      	beq.n	8002998 <HAL_RCC_OscConfig+0x108>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d157      	bne.n	8002998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e242      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x74>
 80028f6:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a75      	ldr	r2, [pc, #468]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6c      	ldr	r2, [pc, #432]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a68      	ldr	r2, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fa4c 	bl	8001de4 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fa48 	bl	8001de4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e207      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xc0>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fa38 	bl	8001de4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fa34 	bl	8001de4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1f3      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0xe8>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1c7      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4937      	ldr	r1, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e03a      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7ff f9ed 	bl	8001de4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7ff f9e9 	bl	8001de4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1a8      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4925      	ldr	r1, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff f9cc 	bl	8001de4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a50:	f7ff f9c8 	bl	8001de4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e187      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7ff f9ac 	bl	8001de4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f7ff f9a8 	bl	8001de4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e167      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x200>
 8002aae:	e01b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff f995 	bl	8001de4 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	e00e      	b.n	8002adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abe:	f7ff f991 	bl	8001de4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d907      	bls.n	8002adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e150      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	42470000 	.word	0x42470000
 8002ad8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ea      	bne.n	8002abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8097 	beq.w	8002c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a73      	ldr	r2, [pc, #460]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f951 	bl	8001de4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7ff f94d 	bl	8001de4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e10c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2ea>
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a63      	ldr	r2, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x30c>
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff f912 	bl	8001de4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7ff f90e 	bl	8001de4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0cb      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ee      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff f8fc 	bl	8001de4 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7ff f8f8 	bl	8001de4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0b5      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a1 	beq.w	8002d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d05c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d141      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff f8cc 	bl	8001de4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff f8c8 	bl	8001de4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e087      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff f8a1 	bl	8001de4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7ff f89d 	bl	8001de4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e05c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x416>
 8002cc4:	e054      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff f88a 	bl	8001de4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff f886 	bl	8001de4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e045      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x444>
 8002cf2:	e03d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e038      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d028      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d121      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d11a      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d111      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0cc      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90c      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b8      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	494d      	ldr	r1, [pc, #308]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d044      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d119      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e067      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4934      	ldr	r1, [pc, #208]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7fe ffb8 	bl	8001de4 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fe ffb4 	bl	8001de4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d20c      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4916      	ldr	r1, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f06:	f000 f821 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	5ccb      	ldrb	r3, [r1, r3]
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe f8b0 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	08008d38 	.word	0x08008d38
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b090      	sub	sp, #64	; 0x40
 8002f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d00d      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x40>
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	f200 80a1 	bhi.w	80030b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7e:	e09b      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f84:	e09b      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f86:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f8a:	e098      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f96:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d028      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	2200      	movs	r2, #0
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	627a      	str	r2, [r7, #36]	; 0x24
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb8:	fb03 f201 	mul.w	r2, r3, r1
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fcc:	460a      	mov	r2, r1
 8002fce:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	61fa      	str	r2, [r7, #28]
 8002fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fe6:	f7fd f90b 	bl	8000200 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4613      	mov	r3, r2
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff2:	e053      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	617a      	str	r2, [r7, #20]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003006:	f04f 0b00 	mov.w	fp, #0
 800300a:	4652      	mov	r2, sl
 800300c:	465b      	mov	r3, fp
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301c:	0150      	lsls	r0, r2, #5
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	ebb2 080a 	subs.w	r8, r2, sl
 8003026:	eb63 090b 	sbc.w	r9, r3, fp
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003036:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800303a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800303e:	ebb2 0408 	subs.w	r4, r2, r8
 8003042:	eb63 0509 	sbc.w	r5, r3, r9
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	00eb      	lsls	r3, r5, #3
 8003050:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003054:	00e2      	lsls	r2, r4, #3
 8003056:	4614      	mov	r4, r2
 8003058:	461d      	mov	r5, r3
 800305a:	eb14 030a 	adds.w	r3, r4, sl
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	eb45 030b 	adc.w	r3, r5, fp
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003072:	4629      	mov	r1, r5
 8003074:	028b      	lsls	r3, r1, #10
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800307c:	4621      	mov	r1, r4
 800307e:	028a      	lsls	r2, r1, #10
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	2200      	movs	r2, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	60fa      	str	r2, [r7, #12]
 800308c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003090:	f7fd f8b6 	bl	8000200 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4613      	mov	r3, r2
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_GetSysClockFreq+0x180>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3740      	adds	r7, #64	; 0x40
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	017d7840 	.word	0x017d7840

080030d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_RCC_GetHCLKFreq+0x14>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f4:	f7ff fff0 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0a9b      	lsrs	r3, r3, #10
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4903      	ldr	r1, [pc, #12]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	08008d48 	.word	0x08008d48

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800311c:	f7ff ffdc 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0b5b      	lsrs	r3, r3, #13
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	08008d48 	.word	0x08008d48

08003140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	220f      	movs	r2, #15
 800314e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCC_GetClockConfig+0x60>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d075      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031de:	f7fe fe01 	bl	8001de4 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031e6:	f7fe fdfd 	bl	8001de4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e189      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031f8:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	019a      	lsls	r2, r3, #6
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	071b      	lsls	r3, r3, #28
 800321c:	4981      	ldr	r1, [pc, #516]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003230:	4b7c      	ldr	r3, [pc, #496]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	0f1b      	lsrs	r3, r3, #28
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	019a      	lsls	r2, r3, #6
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	431a      	orrs	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	071b      	lsls	r3, r3, #28
 8003250:	4974      	ldr	r1, [pc, #464]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003258:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800325a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800325e:	f023 021f 	bic.w	r2, r3, #31
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	3b01      	subs	r3, #1
 8003268:	496e      	ldr	r1, [pc, #440]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	019a      	lsls	r2, r3, #6
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	071b      	lsls	r3, r3, #28
 8003290:	4964      	ldr	r1, [pc, #400]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800329e:	f7fe fda1 	bl	8001de4 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032a6:	f7fe fd9d 	bl	8001de4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e129      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032b8:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d079      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032e2:	f7fe fd7f 	bl	8001de4 <HAL_GetTick>
 80032e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032ea:	f7fe fd7b 	bl	8001de4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e107      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003308:	d0ef      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	0f1b      	lsrs	r3, r3, #28
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	019a      	lsls	r2, r3, #6
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	061b      	lsls	r3, r3, #24
 8003330:	431a      	orrs	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	071b      	lsls	r3, r3, #28
 8003336:	493b      	ldr	r1, [pc, #236]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003344:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	3b01      	subs	r3, #1
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4934      	ldr	r1, [pc, #208]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003364:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	019a      	lsls	r2, r3, #6
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	071b      	lsls	r3, r3, #28
 8003384:	4927      	ldr	r1, [pc, #156]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800338e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	4922      	ldr	r1, [pc, #136]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033a2:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe fd1c 	bl	8001de4 <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033b0:	f7fe fd18 	bl	8001de4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0a4      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ce:	d1ef      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 808b 	beq.w	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003406:	f7fe fced 	bl	8001de4 <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800340c:	e010      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7fe fce9 	bl	8001de4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d909      	bls.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e075      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003420:	42470068 	.word	0x42470068
 8003424:	40023800 	.word	0x40023800
 8003428:	42470070 	.word	0x42470070
 800342c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003430:	4b38      	ldr	r3, [pc, #224]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0e8      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003444:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x308>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d028      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d114      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe fcaf 	bl	8001de4 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fcab 	bl	8001de4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e035      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b8:	d10d      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	4912      	ldr	r1, [pc, #72]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]
 80034d4:	e005      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034e0:	6093      	str	r3, [r2, #8]
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	490a      	ldr	r1, [pc, #40]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003508:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40007000 	.word	0x40007000
 8003518:	40023800 	.word	0x40023800
 800351c:	42470e40 	.word	0x42470e40
 8003520:	424711e0 	.word	0x424711e0

08003524 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e066      	b.n	8003608 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f5b      	ldrb	r3, [r3, #29]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fd48 	bl	8000fe0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	22ca      	movs	r2, #202	; 0xca
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2253      	movs	r2, #83	; 0x53
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f87a 	bl	8003660 <RTC_EnterInitMode>
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12c      	bne.n	80035d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68d2      	ldr	r2, [r2, #12]
 80035b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6919      	ldr	r1, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f881 	bl	80036ce <RTC_ExitInitMode>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d113      	bne.n	80035fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7fe fbda 	bl	8001de4 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003632:	e009      	b.n	8003648 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003634:	f7fe fbd6 	bl	8001de4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003642:	d901      	bls.n	8003648 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e007      	b.n	8003658 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d122      	bne.n	80036c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800368c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800368e:	f7fe fba9 	bl	8001de4 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003694:	e00c      	b.n	80036b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003696:	f7fe fba5 	bl	8001de4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a4:	d904      	bls.n	80036b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2204      	movs	r2, #4
 80036aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <RTC_EnterInitMode+0x64>
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d1e8      	bne.n	8003696 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff89 	bl	8003610 <HAL_RTC_WaitForSynchro>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2204      	movs	r2, #4
 8003708:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e041      	b.n	80037ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe f804 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fde0 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04e      	b.n	800386e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_TIM_Base_Start_IT+0xc4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d01d      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_TIM_Base_Start_IT+0xc8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_TIM_Base_Start_IT+0xcc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_TIM_Base_Start_IT+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_TIM_Base_Start_IT+0xd4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_TIM_Base_Start_IT+0xd8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_TIM_Base_Start_IT+0xdc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e041      	b.n	800392e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f839 	bl	8003936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fd20 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_TIM_PWM_Start+0x24>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e022      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b04      	cmp	r3, #4
 8003974:	d109      	bne.n	800398a <HAL_TIM_PWM_Start+0x3e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e015      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start+0x58>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e008      	b.n	80039b6 <HAL_TIM_PWM_Start+0x6a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07c      	b.n	8003ab8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0x82>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039cc:	e013      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0x92>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039dc:	e00b      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	e003      	b.n	80039f6 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2201      	movs	r2, #1
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f8a0 	bl	8004b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_TIM_PWM_Start+0x174>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_TIM_PWM_Start+0xcc>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <HAL_TIM_PWM_Start+0x178>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_TIM_PWM_Start+0xd0>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_PWM_Start+0xd2>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <HAL_TIM_PWM_Start+0x174>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d01d      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_TIM_PWM_Start+0x17c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_TIM_PWM_Start+0x180>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_TIM_PWM_Start+0x184>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIM_PWM_Start+0x178>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_PWM_Start+0x188>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x136>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <HAL_TIM_PWM_Start+0x18c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d010      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f828 	bl	8004b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <HAL_TIM_PWM_Stop+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Stop+0x2c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <HAL_TIM_PWM_Stop+0xdc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Stop+0x30>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_TIM_PWM_Stop+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f240 4344 	movw	r3, #1092	; 0x444
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0x66>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x96>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	f240 4344 	movw	r3, #1092	; 0x444
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_PWM_Stop+0x96>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Stop+0xa6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0xb6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	e00b      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0xc6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_PWM_Stop+0xce>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010400 	.word	0x40010400

08003bbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e041      	b.n	8003c52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f839 	bl	8003c5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f000 fb8e 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d122      	bne.n	8003cca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d11b      	bne.n	8003cca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0202 	mvn.w	r2, #2
 8003c9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb14 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003cb6:	e005      	b.n	8003cc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fb06 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fb17 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d122      	bne.n	8003d1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d11b      	bne.n	8003d1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f06f 0204 	mvn.w	r2, #4
 8003cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 faea 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003d0a:	e005      	b.n	8003d18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fadc 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 faed 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d122      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d11b      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f06f 0208 	mvn.w	r2, #8
 8003d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2204      	movs	r2, #4
 8003d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fac0 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003d5e:	e005      	b.n	8003d6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fab2 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fac3 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d122      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0210 	mvn.w	r2, #16
 8003d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa96 	bl	80042de <HAL_TIM_IC_CaptureCallback>
 8003db2:	e005      	b.n	8003dc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa88 	bl	80042ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa99 	bl	80042f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10e      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0201 	mvn.w	r2, #1
 8003dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fc fedb 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b80      	cmp	r3, #128	; 0x80
 8003dfe:	d10e      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 ff3f 	bl	8004c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d10e      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa5e 	bl	8004306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d10e      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0220 	mvn.w	r2, #32
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 ff09 	bl	8004c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e088      	b.n	8003fae <HAL_TIM_IC_ConfigChannel+0x130>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f000 fc7f 	bl	80047bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 020c 	bic.w	r2, r2, #12
 8003ecc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6999      	ldr	r1, [r3, #24]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
 8003ee0:	e060      	b.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11c      	bne.n	8003f22 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f000 fd03 	bl	8004902 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f0a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	e040      	b.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f000 fd50 	bl	80049dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020c 	bic.w	r2, r2, #12
 8003f4a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69d9      	ldr	r1, [r3, #28]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	e021      	b.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d11c      	bne.n	8003fa0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f000 fd6d 	bl	8004a54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f88:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	021a      	lsls	r2, r3, #8
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	61da      	str	r2, [r3, #28]
 8003f9e:	e001      	b.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0ae      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	f200 809f 	bhi.w	8004124 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004125 	.word	0x08004125
 8003ff4:	08004125 	.word	0x08004125
 8003ff8:	08004125 	.word	0x08004125
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004125 	.word	0x08004125
 8004004:	08004125 	.word	0x08004125
 8004008:	08004125 	.word	0x08004125
 800400c:	080040a3 	.word	0x080040a3
 8004010:	08004125 	.word	0x08004125
 8004014:	08004125 	.word	0x08004125
 8004018:	08004125 	.word	0x08004125
 800401c:	080040e3 	.word	0x080040e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa18 	bl	800445c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e064      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa68 	bl	800453c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]
      break;
 80040a0:	e043      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fabd 	bl	8004628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
      break;
 80040e0:	e023      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fb11 	bl	8004710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
      break;
 8004122:	e002      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0b4      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x186>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004190:	d03e      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0xd4>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004196:	f200 8087 	bhi.w	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	f000 8086 	beq.w	80042ae <HAL_TIM_ConfigClockSource+0x172>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d87f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b70      	cmp	r3, #112	; 0x70
 80041aa:	d01a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xa6>
 80041ac:	2b70      	cmp	r3, #112	; 0x70
 80041ae:	d87b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b60      	cmp	r3, #96	; 0x60
 80041b2:	d050      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x11a>
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d877      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b50      	cmp	r3, #80	; 0x50
 80041ba:	d03c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xfa>
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d873      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d058      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x13a>
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d86f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d064      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d867      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05c      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d05a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	e062      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f000 fc87 	bl	8004b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
      break;
 800420e:	e04f      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f000 fc70 	bl	8004b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f000 fb2e 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	; 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fc3d 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 8004254:	e02c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fb8a 	bl	800497c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fc2d 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 8004274:	e01c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fb0e 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fc1d 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 fc14 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a40      	ldr	r2, [pc, #256]	; (8004430 <TIM_Base_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3d      	ldr	r2, [pc, #244]	; (8004434 <TIM_Base_SetConfig+0x118>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3a      	ldr	r2, [pc, #232]	; (8004440 <TIM_Base_SetConfig+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d108      	bne.n	800436e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <TIM_Base_SetConfig+0x114>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02b      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d027      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <TIM_Base_SetConfig+0x118>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d023      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <TIM_Base_SetConfig+0x11c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01f      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <TIM_Base_SetConfig+0x120>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01b      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <TIM_Base_SetConfig+0x124>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d017      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <TIM_Base_SetConfig+0x128>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <TIM_Base_SetConfig+0x12c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00f      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <TIM_Base_SetConfig+0x130>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00b      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a25      	ldr	r2, [pc, #148]	; (8004450 <TIM_Base_SetConfig+0x134>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d007      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a24      	ldr	r2, [pc, #144]	; (8004454 <TIM_Base_SetConfig+0x138>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <TIM_Base_SetConfig+0x13c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d108      	bne.n	80043e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <TIM_Base_SetConfig+0x114>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0xf8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <TIM_Base_SetConfig+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d103      	bne.n	800441c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	615a      	str	r2, [r3, #20]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40010400 	.word	0x40010400
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800
 8004450:	40001800 	.word	0x40001800
 8004454:	40001c00 	.word	0x40001c00
 8004458:	40002000 	.word	0x40002000

0800445c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a20      	ldr	r2, [pc, #128]	; (8004534 <TIM_OC1_SetConfig+0xd8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_OC1_SetConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <TIM_OC1_SetConfig+0xdc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10c      	bne.n	80044da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0308 	bic.w	r3, r3, #8
 80044c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <TIM_OC1_SetConfig+0xd8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_OC1_SetConfig+0x8e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <TIM_OC1_SetConfig+0xdc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d111      	bne.n	800450e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40010000 	.word	0x40010000
 8004538:	40010400 	.word	0x40010400

0800453c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0210 	bic.w	r2, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0320 	bic.w	r3, r3, #32
 8004586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <TIM_OC2_SetConfig+0xe4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_OC2_SetConfig+0x68>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a21      	ldr	r2, [pc, #132]	; (8004624 <TIM_OC2_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10d      	bne.n	80045c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <TIM_OC2_SetConfig+0xe4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC2_SetConfig+0x94>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a16      	ldr	r2, [pc, #88]	; (8004624 <TIM_OC2_SetConfig+0xe8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d113      	bne.n	80045f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40010400 	.word	0x40010400

08004628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <TIM_OC3_SetConfig+0xe0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x66>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <TIM_OC3_SetConfig+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a16      	ldr	r2, [pc, #88]	; (8004708 <TIM_OC3_SetConfig+0xe0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_OC3_SetConfig+0x92>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <TIM_OC3_SetConfig+0xe4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40010000 	.word	0x40010000
 800470c:	40010400 	.word	0x40010400

08004710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	031b      	lsls	r3, r3, #12
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <TIM_OC4_SetConfig+0xa4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC4_SetConfig+0x68>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <TIM_OC4_SetConfig+0xa8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d109      	bne.n	800478c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800477e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a28      	ldr	r2, [pc, #160]	; (8004888 <TIM_TI1_SetConfig+0xcc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01b      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d017      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <TIM_TI1_SetConfig+0xd0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <TIM_TI1_SetConfig+0xd4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a23      	ldr	r2, [pc, #140]	; (8004894 <TIM_TI1_SetConfig+0xd8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <TIM_TI1_SetConfig+0xdc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_TI1_SetConfig+0xe0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_TI1_SetConfig+0x66>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <TIM_TI1_SetConfig+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <TIM_TI1_SetConfig+0x6a>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <TIM_TI1_SetConfig+0x6c>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e003      	b.n	8004846 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	b2db      	uxtb	r3, r3
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 030a 	and.w	r3, r3, #10
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800

080048a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 030a 	bic.w	r3, r3, #10
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f023 0210 	bic.w	r2, r3, #16
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	031b      	lsls	r3, r3, #12
 8004946:	b29b      	uxth	r3, r3
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004954:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0303 	bic.w	r3, r3, #3
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	031b      	lsls	r3, r3, #12
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f043 0307 	orr.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e05a      	b.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf4:	d01d      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10c      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e03f      	b.n	8004d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc ff02 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fddf 	bl	80058b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d17c      	bne.n	8004e64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_UART_Transmit+0x2c>
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e075      	b.n	8004e66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_UART_Transmit+0x3e>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e06e      	b.n	8004e66 <HAL_UART_Transmit+0x11c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2221      	movs	r2, #33	; 0x21
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d9e:	f7fd f821 	bl	8001de4 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	88fa      	ldrh	r2, [r7, #6]
 8004dae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db8:	d108      	bne.n	8004dcc <HAL_UART_Transmit+0x82>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e003      	b.n	8004dd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ddc:	e02a      	b.n	8004e34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fb1f 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e036      	b.n	8004e66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3302      	adds	r3, #2
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e007      	b.n	8004e26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1cf      	bne.n	8004dde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2140      	movs	r1, #64	; 0x40
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 faef 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d11d      	bne.n	8004ec4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Receive_IT+0x26>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e016      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Receive_IT+0x38>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e00f      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb24 	bl	8005508 <UART_Start_Receive_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	e000      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0ba      	sub	sp, #232	; 0xe8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_UART_IRQHandler+0x66>
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fc07 	bl	8005742 <UART_Receive_IT>
      return;
 8004f34:	e256      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80de 	beq.w	80050fc <HAL_UART_IRQHandler+0x22c>
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80d1 	beq.w	80050fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0xae>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_UART_IRQHandler+0xd2>
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_UART_IRQHandler+0xf6>
 8004fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f043 0204 	orr.w	r2, r3, #4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x126>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0208 	orr.w	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 81ed 	beq.w	80053da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_UART_IRQHandler+0x14e>
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fb92 	bl	8005742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <HAL_UART_IRQHandler+0x17a>
 8005042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04f      	beq.n	80050ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa9a 	bl	8005584 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d141      	bne.n	80050e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800508a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800508e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1d9      	bne.n	800505e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	4a7d      	ldr	r2, [pc, #500]	; (80052ac <HAL_UART_IRQHandler+0x3dc>)
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc ffee 	bl	80020a0 <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00e      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f990 	bl	8005400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00a      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f98c 	bl	8005400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e006      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f988 	bl	8005400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050f6:	e170      	b.n	80053da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	bf00      	nop
    return;
 80050fa:	e16e      	b.n	80053da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 814a 	bne.w	800539a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8143 	beq.w	800539a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 813c 	beq.w	800539a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	f040 80b4 	bne.w	80052b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8140 	beq.w	80053de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005166:	429a      	cmp	r2, r3
 8005168:	f080 8139 	bcs.w	80053de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005172:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517e:	f000 8088 	beq.w	8005292 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1d9      	bne.n	8005182 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e1      	bne.n	80051ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800521a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800522e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005274:	65ba      	str	r2, [r7, #88]	; 0x58
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800527a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e3      	bne.n	8005250 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	4618      	mov	r0, r3
 800528e:	f7fc fe97 	bl	8001fc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800529a:	b29b      	uxth	r3, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8b6 	bl	8005414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052a8:	e099      	b.n	80053de <HAL_UART_IRQHandler+0x50e>
 80052aa:	bf00      	nop
 80052ac:	0800564b 	.word	0x0800564b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 808b 	beq.w	80053e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8086 	beq.w	80053e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052fa:	647a      	str	r2, [r7, #68]	; 0x44
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e3      	bne.n	80052d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	623b      	str	r3, [r7, #32]
   return(result);
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005332:	633a      	str	r2, [r7, #48]	; 0x30
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	60fb      	str	r3, [r7, #12]
   return(result);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0310 	bic.w	r3, r3, #16
 800536a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005378:	61fa      	str	r2, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	69b9      	ldr	r1, [r7, #24]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	617b      	str	r3, [r7, #20]
   return(result);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e3      	bne.n	8005354 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800538c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f83e 	bl	8005414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005398:	e023      	b.n	80053e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_UART_IRQHandler+0x4ea>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f95d 	bl	8005672 <UART_Transmit_IT>
    return;
 80053b8:	e014      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x514>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f99d 	bl	8005712 <UART_EndTransmit_IT>
    return;
 80053d8:	e004      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
    return;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
      return;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
      return;
 80053e2:	bf00      	nop
  }
}
 80053e4:	37e8      	adds	r7, #232	; 0xe8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b090      	sub	sp, #64	; 0x40
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	e050      	b.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d04c      	beq.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <UART_WaitOnFlagUntilTimeout+0x30>
 800544c:	f7fc fcca 	bl	8001de4 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005458:	429a      	cmp	r2, r3
 800545a:	d241      	bcs.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800547c:	637a      	str	r2, [r7, #52]	; 0x34
 800547e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	613b      	str	r3, [r7, #16]
   return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b0:	623a      	str	r2, [r7, #32]
 80054b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	69f9      	ldr	r1, [r7, #28]
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e00f      	b.n	8005500 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4013      	ands	r3, r2
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d09f      	beq.n	800543e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3740      	adds	r7, #64	; 0x40
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2222      	movs	r2, #34	; 0x22
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005554:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0220 	orr.w	r2, r2, #32
 8005574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b095      	sub	sp, #84	; 0x54
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ac:	643a      	str	r2, [r7, #64]	; 0x40
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e5      	bne.n	80055c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d119      	bne.n	8005630 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60bb      	str	r3, [r7, #8]
   return(result);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 0310 	bic.w	r3, r3, #16
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800561c:	61ba      	str	r2, [r7, #24]
 800561e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800563e:	bf00      	nop
 8005640:	3754      	adds	r7, #84	; 0x54
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff fecb 	bl	8005400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b21      	cmp	r3, #33	; 0x21
 8005684:	d13e      	bne.n	8005704 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d114      	bne.n	80056ba <UART_Transmit_IT+0x48>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d110      	bne.n	80056ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	621a      	str	r2, [r3, #32]
 80056b8:	e008      	b.n	80056cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6211      	str	r1, [r2, #32]
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4619      	mov	r1, r3
 80056da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10f      	bne.n	8005700 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fe5a 	bl	80053ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08c      	sub	sp, #48	; 0x30
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b22      	cmp	r3, #34	; 0x22
 8005754:	f040 80ab 	bne.w	80058ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005760:	d117      	bne.n	8005792 <UART_Receive_IT+0x50>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d113      	bne.n	8005792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005780:	b29a      	uxth	r2, r3
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
 8005790:	e026      	b.n	80057e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d007      	beq.n	80057b6 <UART_Receive_IT+0x74>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <UART_Receive_IT+0x82>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e008      	b.n	80057d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4619      	mov	r1, r3
 80057ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d15a      	bne.n	80058aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0220 	bic.w	r2, r2, #32
 8005802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0201 	bic.w	r2, r2, #1
 8005822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	2b01      	cmp	r3, #1
 8005832:	d135      	bne.n	80058a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f023 0310 	bic.w	r3, r3, #16
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	623a      	str	r2, [r7, #32]
 800585c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	61bb      	str	r3, [r7, #24]
   return(result);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b10      	cmp	r3, #16
 800587a:	d10a      	bne.n	8005892 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fdbb 	bl	8005414 <HAL_UARTEx_RxEventCallback>
 800589e:	e002      	b.n	80058a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fa ff45 	bl	8000730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e002      	b.n	80058b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	; 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058bc:	b0c0      	sub	sp, #256	; 0x100
 80058be:	af00      	add	r7, sp, #0
 80058c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	ea40 0301 	orr.w	r3, r0, r1
 80058e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005910:	f021 010c 	bic.w	r1, r1, #12
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800591e:	430b      	orrs	r3, r1
 8005920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005932:	6999      	ldr	r1, [r3, #24]
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	ea40 0301 	orr.w	r3, r0, r1
 800593e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b8f      	ldr	r3, [pc, #572]	; (8005b84 <UART_SetConfig+0x2cc>)
 8005948:	429a      	cmp	r2, r3
 800594a:	d005      	beq.n	8005958 <UART_SetConfig+0xa0>
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b8d      	ldr	r3, [pc, #564]	; (8005b88 <UART_SetConfig+0x2d0>)
 8005954:	429a      	cmp	r2, r3
 8005956:	d104      	bne.n	8005962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005958:	f7fd fbde 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 800595c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005960:	e003      	b.n	800596a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005962:	f7fd fbc5 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8005966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	f040 810c 	bne.w	8005b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	1891      	adds	r1, r2, r2
 8005990:	65b9      	str	r1, [r7, #88]	; 0x58
 8005992:	415b      	adcs	r3, r3
 8005994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800599a:	4621      	mov	r1, r4
 800599c:	eb12 0801 	adds.w	r8, r2, r1
 80059a0:	4629      	mov	r1, r5
 80059a2:	eb43 0901 	adc.w	r9, r3, r1
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ba:	4690      	mov	r8, r2
 80059bc:	4699      	mov	r9, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	eb18 0303 	adds.w	r3, r8, r3
 80059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059c8:	462b      	mov	r3, r5
 80059ca:	eb49 0303 	adc.w	r3, r9, r3
 80059ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059e6:	460b      	mov	r3, r1
 80059e8:	18db      	adds	r3, r3, r3
 80059ea:	653b      	str	r3, [r7, #80]	; 0x50
 80059ec:	4613      	mov	r3, r2
 80059ee:	eb42 0303 	adc.w	r3, r2, r3
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059fc:	f7fa fc00 	bl	8000200 <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4b61      	ldr	r3, [pc, #388]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005a06:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	011c      	lsls	r4, r3, #4
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a30:	4641      	mov	r1, r8
 8005a32:	eb12 0a01 	adds.w	sl, r2, r1
 8005a36:	4649      	mov	r1, r9
 8005a38:	eb43 0b01 	adc.w	fp, r3, r1
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a50:	4692      	mov	sl, r2
 8005a52:	469b      	mov	fp, r3
 8005a54:	4643      	mov	r3, r8
 8005a56:	eb1a 0303 	adds.w	r3, sl, r3
 8005a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	eb4b 0303 	adc.w	r3, fp, r3
 8005a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	18db      	adds	r3, r3, r3
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
 8005a82:	4613      	mov	r3, r2
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a92:	f7fa fbb5 	bl	8000200 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2264      	movs	r2, #100	; 0x64
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	1acb      	subs	r3, r1, r3
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac0:	441c      	add	r4, r3
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8005adc:	415b      	adcs	r3, r3
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	1851      	adds	r1, r2, r1
 8005ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aea:	4649      	mov	r1, r9
 8005aec:	414b      	adcs	r3, r1
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005afc:	4659      	mov	r1, fp
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b06:	4651      	mov	r1, sl
 8005b08:	00ca      	lsls	r2, r1, #3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4642      	mov	r2, r8
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b18:	464b      	mov	r3, r9
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	eb42 0303 	adc.w	r3, r2, r3
 8005b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b38:	460b      	mov	r3, r1
 8005b3a:	18db      	adds	r3, r3, r3
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3e:	4613      	mov	r3, r2
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b4e:	f7fa fb57 	bl	8000200 <__aeabi_uldivmod>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005b58:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	2164      	movs	r1, #100	; 0x64
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	3332      	adds	r3, #50	; 0x32
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <UART_SetConfig+0x2d4>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f003 0207 	and.w	r2, r3, #7
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4422      	add	r2, r4
 8005b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b80:	e105      	b.n	8005d8e <UART_SetConfig+0x4d6>
 8005b82:	bf00      	nop
 8005b84:	40011000 	.word	0x40011000
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	1891      	adds	r1, r2, r2
 8005ba8:	6239      	str	r1, [r7, #32]
 8005baa:	415b      	adcs	r3, r3
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	1854      	adds	r4, r2, r1
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	eb43 0501 	adc.w	r5, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	00eb      	lsls	r3, r5, #3
 8005bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bca:	00e2      	lsls	r2, r4, #3
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	18e3      	adds	r3, r4, r3
 8005bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bd8:	464b      	mov	r3, r9
 8005bda:	eb45 0303 	adc.w	r3, r5, r3
 8005bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bfe:	4629      	mov	r1, r5
 8005c00:	008b      	lsls	r3, r1, #2
 8005c02:	4621      	mov	r1, r4
 8005c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c08:	4621      	mov	r1, r4
 8005c0a:	008a      	lsls	r2, r1, #2
 8005c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c10:	f7fa faf6 	bl	8000200 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4b60      	ldr	r3, [pc, #384]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	011c      	lsls	r4, r3, #4
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	61b9      	str	r1, [r7, #24]
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6139      	str	r1, [r7, #16]
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c78:	464b      	mov	r3, r9
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	eb42 0303 	adc.w	r3, r2, r3
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	008b      	lsls	r3, r1, #2
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	008a      	lsls	r2, r1, #2
 8005caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cae:	f7fa faa7 	bl	8000200 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b39      	ldr	r3, [pc, #228]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd6:	441c      	add	r4, r3
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1851      	adds	r1, r2, r1
 8005cfa:	6039      	str	r1, [r7, #0]
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	414b      	adcs	r3, r1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d0e:	4659      	mov	r1, fp
 8005d10:	00cb      	lsls	r3, r1, #3
 8005d12:	4651      	mov	r1, sl
 8005d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d18:	4651      	mov	r1, sl
 8005d1a:	00ca      	lsls	r2, r1, #3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	4642      	mov	r2, r8
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d28:	464b      	mov	r3, r9
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	eb42 0303 	adc.w	r3, r2, r3
 8005d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	4641      	mov	r1, r8
 8005d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d54:	4641      	mov	r1, r8
 8005d56:	008a      	lsls	r2, r1, #2
 8005d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d5c:	f7fa fa50 	bl	8000200 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4422      	add	r2, r4
 8005d8c:	609a      	str	r2, [r3, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d94:	46bd      	mov	sp, r7
 8005d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9a:	bf00      	nop
 8005d9c:	51eb851f 	.word	0x51eb851f

08005da0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db2:	2b84      	cmp	r3, #132	; 0x84
 8005db4:	d005      	beq.n	8005dc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3303      	adds	r3, #3
 8005dc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dd4:	f001 f82a 	bl	8006e2c <vTaskStartScheduler>
  
  return osOK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de0:	b089      	sub	sp, #36	; 0x24
 8005de2:	af04      	add	r7, sp, #16
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <osThreadCreate+0x54>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01c      	beq.n	8005e32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685c      	ldr	r4, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681d      	ldr	r5, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691e      	ldr	r6, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ffc8 	bl	8005da0 <makeFreeRtosPriority>
 8005e10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1a:	9202      	str	r2, [sp, #8]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	9100      	str	r1, [sp, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4632      	mov	r2, r6
 8005e24:	4629      	mov	r1, r5
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fe22 	bl	8006a70 <xTaskCreateStatic>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e01c      	b.n	8005e6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685c      	ldr	r4, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e3e:	b29e      	uxth	r6, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff ffaa 	bl	8005da0 <makeFreeRtosPriority>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	f107 030c 	add.w	r3, r7, #12
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	9200      	str	r2, [sp, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fe64 	bl	8006b2a <xTaskCreate>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d001      	beq.n	8005e6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <osDelay+0x16>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	e000      	b.n	8005e8e <osDelay+0x18>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff98 	bl	8006dc4 <vTaskDelay>
  
  return osOK;
 8005e94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10a      	bne.n	8005ecc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	9200      	str	r2, [sp, #0]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	f000 f962 	bl	800618c <xQueueGenericCreateStatic>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	e016      	b.n	8005efa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e014      	b.n	8005efa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d110      	bne.n	8005ef8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	2100      	movs	r1, #0
 8005eda:	2001      	movs	r0, #1
 8005edc:	f000 f9ce 	bl	800627c <xQueueGenericCreate>
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <osSemaphoreCreate+0x56>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fa1e 	bl	8006330 <xQueueGenericSend>
      return sema;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	e000      	b.n	8005efa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005ef8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005f02:	b590      	push	{r4, r7, lr}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af02      	add	r7, sp, #8
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d011      	beq.n	8005f38 <osMessageCreate+0x36>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2400      	movs	r4, #0
 8005f2e:	9400      	str	r4, [sp, #0]
 8005f30:	f000 f92c 	bl	800618c <xQueueGenericCreateStatic>
 8005f34:	4603      	mov	r3, r0
 8005f36:	e008      	b.n	8005f4a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	4619      	mov	r1, r3
 8005f44:	f000 f99a 	bl	800627c <xQueueGenericCreate>
 8005f48:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}

08005f52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f103 0208 	add.w	r2, r3, #8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 0208 	add.w	r2, r3, #8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d103      	bne.n	8006014 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e00c      	b.n	800602e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3308      	adds	r3, #8
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e002      	b.n	8006022 <vListInsert+0x2e>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d2f6      	bcs.n	800601c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6892      	ldr	r2, [r2, #8]
 800607c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6852      	ldr	r2, [r2, #4]
 8006086:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d103      	bne.n	800609a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060e6:	f001 fced 	bl	8007ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	441a      	add	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	3b01      	subs	r3, #1
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d114      	bne.n	8006166 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01a      	beq.n	800617a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3310      	adds	r3, #16
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f8c1 	bl	80072d0 <xTaskRemoveFromEventList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d012      	beq.n	800617a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <xQueueGenericReset+0xcc>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	e009      	b.n	800617a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3310      	adds	r3, #16
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fef1 	bl	8005f52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3324      	adds	r3, #36	; 0x24
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff feec 	bl	8005f52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800617a:	f001 fcd3 	bl	8007b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800617e:	2301      	movs	r3, #1
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	; 0x38
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <xQueueGenericCreateStatic+0x52>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <xQueueGenericCreateStatic+0x56>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericCreateStatic+0x58>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <xQueueGenericCreateStatic+0x7e>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <xQueueGenericCreateStatic+0x82>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericCreateStatic+0x84>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	61fb      	str	r3, [r7, #28]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800622a:	2348      	movs	r3, #72	; 0x48
 800622c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b48      	cmp	r3, #72	; 0x48
 8006232:	d00a      	beq.n	800624a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	61bb      	str	r3, [r7, #24]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800624a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800625e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f83f 	bl	80062f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006274:	4618      	mov	r0, r3
 8006276:	3730      	adds	r7, #48	; 0x30
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	613b      	str	r3, [r7, #16]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3348      	adds	r3, #72	; 0x48
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 fd27 	bl	8007d08 <pvPortMalloc>
 80062ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d011      	beq.n	80062e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	3348      	adds	r3, #72	; 0x48
 80062ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f805 	bl	80062f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062e6:	69bb      	ldr	r3, [r7, #24]
	}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e002      	b.n	8006312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800631e:	2101      	movs	r1, #1
 8006320:	69b8      	ldr	r0, [r7, #24]
 8006322:	f7ff fecb 	bl	80060bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08e      	sub	sp, #56	; 0x38
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800633e:	2300      	movs	r3, #0
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xQueueGenericSend+0x32>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <xQueueGenericSend+0x40>
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <xQueueGenericSend+0x44>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <xQueueGenericSend+0x46>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <xQueueGenericSend+0x60>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d103      	bne.n	800639e <xQueueGenericSend+0x6e>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <xQueueGenericSend+0x72>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <xQueueGenericSend+0x74>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xQueueGenericSend+0x8e>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063be:	f001 f947 	bl	8007650 <xTaskGetSchedulerState>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <xQueueGenericSend+0x9e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSend+0xa2>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSend+0xa4>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueGenericSend+0xbe>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ee:	f001 fb69 	bl	8007ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xQueueGenericSend+0xd4>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d129      	bne.n	8006458 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640a:	f000 fa37 	bl	800687c <prvCopyDataToQueue>
 800640e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ff57 	bl	80072d0 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <xQueueGenericSend+0x1f8>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e00a      	b.n	8006450 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <xQueueGenericSend+0x1f8>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006450:	f001 fb68 	bl	8007b24 <vPortExitCritical>
				return pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	e063      	b.n	8006520 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800645e:	f001 fb61 	bl	8007b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	e05c      	b.n	8006520 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f000 ff8f 	bl	8007394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647a:	f001 fb53 	bl	8007b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647e:	f000 fd3f 	bl	8006f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006482:	f001 fb1f 	bl	8007ac4 <vPortEnterCritical>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800648c:	b25b      	sxtb	r3, r3
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x16c>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x182>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b2:	f001 fb37 	bl	8007b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 ff7e 	bl	80073c0 <xTaskCheckForTimeOut>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064cc:	f000 fab8 	bl	8006a40 <prvIsQueueFull>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fed2 	bl	8007288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e6:	f000 fa59 	bl	800699c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ea:	f000 fd17 	bl	8006f1c <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af7c 	bne.w	80063ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <xQueueGenericSend+0x1f8>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e772      	b.n	80063ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650a:	f000 fa47 	bl	800699c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650e:	f000 fd05 	bl	8006f1c <xTaskResumeAll>
 8006512:	e76c      	b.n	80063ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006516:	f000 fa41 	bl	800699c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651a:	f000 fcff 	bl	8006f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800651e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006520:	4618      	mov	r0, r3
 8006522:	3738      	adds	r7, #56	; 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b090      	sub	sp, #64	; 0x40
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <xQueueGenericSendFromISR+0x3c>
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <xQueueGenericSendFromISR+0x40>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <xQueueGenericSendFromISR+0x42>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d103      	bne.n	8006596 <xQueueGenericSendFromISR+0x6a>
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <xQueueGenericSendFromISR+0x6e>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <xQueueGenericSendFromISR+0x70>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065b6:	f001 fb67 	bl	8007c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065ba:	f3ef 8211 	mrs	r2, BASEPRI
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61fa      	str	r2, [r7, #28]
 80065d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <xQueueGenericSendFromISR+0xbc>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d12f      	bne.n	8006648 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065fe:	f000 f93d 	bl	800687c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006602:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d112      	bne.n	8006632 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	d016      	beq.n	8006642 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fe59 	bl	80072d0 <xTaskRemoveFromEventList>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00e      	beq.n	8006642 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e007      	b.n	8006642 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006636:	3301      	adds	r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	b25a      	sxtb	r2, r3
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006642:	2301      	movs	r3, #1
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006646:	e001      	b.n	800664c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006648:	2300      	movs	r3, #0
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006656:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800665a:	4618      	mov	r0, r3
 800665c:	3740      	adds	r7, #64	; 0x40
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b08e      	sub	sp, #56	; 0x38
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	623b      	str	r3, [r7, #32]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <xQueueGiveFromISR+0x48>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61fb      	str	r3, [r7, #28]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <xQueueGiveFromISR+0x58>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <xQueueGiveFromISR+0x5c>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueGiveFromISR+0x5e>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueGiveFromISR+0x78>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	61bb      	str	r3, [r7, #24]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066da:	f001 fad5 	bl	8007c88 <vPortValidateInterruptPriority>
	__asm volatile
 80066de:	f3ef 8211 	mrs	r2, BASEPRI
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	617a      	str	r2, [r7, #20]
 80066f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80066f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006706:	429a      	cmp	r2, r3
 8006708:	d22b      	bcs.n	8006762 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800671c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d112      	bne.n	800674c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d016      	beq.n	800675c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	3324      	adds	r3, #36	; 0x24
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fdcc 	bl	80072d0 <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00e      	beq.n	800675c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e007      	b.n	800675c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800674c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006750:	3301      	adds	r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	b25a      	sxtb	r2, r3
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
 8006760:	e001      	b.n	8006766 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f383 8811 	msr	BASEPRI, r3
}
 8006770:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006774:	4618      	mov	r0, r3
 8006776:	3738      	adds	r7, #56	; 0x38
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	623b      	str	r3, [r7, #32]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <xQueueReceiveFromISR+0x3a>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <xQueueReceiveFromISR+0x3e>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueReceiveFromISR+0x40>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61fb      	str	r3, [r7, #28]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067d6:	f001 fa57 	bl	8007c88 <vPortValidateInterruptPriority>
	__asm volatile
 80067da:	f3ef 8211 	mrs	r2, BASEPRI
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61ba      	str	r2, [r7, #24]
 80067f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d02f      	beq.n	8006862 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006810:	f000 f89e 	bl	8006950 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800681c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d112      	bne.n	800684c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	3310      	adds	r3, #16
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fd4c 	bl	80072d0 <xTaskRemoveFromEventList>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e007      	b.n	800685c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800684c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006850:	3301      	adds	r3, #1
 8006852:	b2db      	uxtb	r3, r3
 8006854:	b25a      	sxtb	r2, r3
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
 8006860:	e001      	b.n	8006866 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	613b      	str	r3, [r7, #16]
	__asm volatile
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f383 8811 	msr	BASEPRI, r3
}
 8006870:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006874:	4618      	mov	r0, r3
 8006876:	3738      	adds	r7, #56	; 0x38
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10d      	bne.n	80068b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d14d      	bne.n	800693e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fef0 	bl	800768c <xTaskPriorityDisinherit>
 80068ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	e043      	b.n	800693e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d119      	bne.n	80068f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6858      	ldr	r0, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	461a      	mov	r2, r3
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	f001 fd2b 	bl	8008322 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d32b      	bcc.n	800693e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	e026      	b.n	800693e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68d8      	ldr	r0, [r3, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	461a      	mov	r2, r3
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	f001 fd11 	bl	8008322 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	425b      	negs	r3, r3
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d207      	bcs.n	800692c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	425b      	negs	r3, r3
 8006926:	441a      	add	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d105      	bne.n	800693e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	3b01      	subs	r3, #1
 800693c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d018      	beq.n	8006994 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	441a      	add	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d303      	bcc.n	8006984 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68d9      	ldr	r1, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	461a      	mov	r2, r3
 800698e:	6838      	ldr	r0, [r7, #0]
 8006990:	f001 fcc7 	bl	8008322 <memcpy>
	}
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069a4:	f001 f88e 	bl	8007ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b0:	e011      	b.n	80069d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d012      	beq.n	80069e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fc86 	bl	80072d0 <xTaskRemoveFromEventList>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069ca:	f000 fd5b 	bl	8007484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	dce9      	bgt.n	80069b2 <prvUnlockQueue+0x16>
 80069de:	e000      	b.n	80069e2 <prvUnlockQueue+0x46>
					break;
 80069e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069ea:	f001 f89b 	bl	8007b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ee:	f001 f869 	bl	8007ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069fa:	e011      	b.n	8006a20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d012      	beq.n	8006a2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3310      	adds	r3, #16
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fc61 	bl	80072d0 <xTaskRemoveFromEventList>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a14:	f000 fd36 	bl	8007484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dce9      	bgt.n	80069fc <prvUnlockQueue+0x60>
 8006a28:	e000      	b.n	8006a2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a34:	f001 f876 	bl	8007b24 <vPortExitCritical>
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a48:	f001 f83c 	bl	8007ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d102      	bne.n	8006a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e001      	b.n	8006a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a62:	f001 f85f 	bl	8007b24 <vPortExitCritical>

	return xReturn;
 8006a66:	68fb      	ldr	r3, [r7, #12]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af04      	add	r7, sp, #16
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	61fb      	str	r3, [r7, #28]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ab6:	23b4      	movs	r3, #180	; 0xb4
 8006ab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2bb4      	cmp	r3, #180	; 0xb4
 8006abe:	d00a      	beq.n	8006ad6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	61bb      	str	r3, [r7, #24]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ad6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01e      	beq.n	8006b1c <xTaskCreateStatic+0xac>
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006af6:	2300      	movs	r3, #0
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	f107 0314 	add.w	r3, r7, #20
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f850 	bl	8006bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b16:	f000 f8eb 	bl	8006cf0 <prvAddNewTaskToReadyList>
 8006b1a:	e001      	b.n	8006b20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b20:	697b      	ldr	r3, [r7, #20]
	}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3728      	adds	r7, #40	; 0x28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b08c      	sub	sp, #48	; 0x30
 8006b2e:	af04      	add	r7, sp, #16
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f8e2 	bl	8007d08 <pvPortMalloc>
 8006b44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b4c:	20b4      	movs	r0, #180	; 0xb4
 8006b4e:	f001 f8db 	bl	8007d08 <pvPortMalloc>
 8006b52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b60:	e005      	b.n	8006b6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b62:	6978      	ldr	r0, [r7, #20]
 8006b64:	f001 f99c 	bl	8007ea0 <vPortFree>
 8006b68:	e001      	b.n	8006b6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d017      	beq.n	8006ba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	9302      	str	r3, [sp, #8]
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f80e 	bl	8006bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b98:	69f8      	ldr	r0, [r7, #28]
 8006b9a:	f000 f8a9 	bl	8006cf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e002      	b.n	8006baa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006baa:	69bb      	ldr	r3, [r7, #24]
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <prvInitialiseNewTask+0x48>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	617b      	str	r3, [r7, #20]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01f      	beq.n	8006c42 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e012      	b.n	8006c2e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	3334      	adds	r3, #52	; 0x34
 8006c18:	460a      	mov	r2, r1
 8006c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d9e9      	bls.n	8006c08 <prvInitialiseNewTask+0x54>
 8006c34:	e000      	b.n	8006c38 <prvInitialiseNewTask+0x84>
			{
				break;
 8006c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c40:	e003      	b.n	8006c4a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d901      	bls.n	8006c54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c50:	2306      	movs	r3, #6
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff f991 	bl	8005f92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	3318      	adds	r3, #24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff f98c 	bl	8005f92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f1c3 0207 	rsb	r2, r3, #7
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	334c      	adds	r3, #76	; 0x4c
 8006ca4:	2260      	movs	r2, #96	; 0x60
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fb48 	bl	800833e <memset>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <prvInitialiseNewTask+0x130>)
 8006cb2:	651a      	str	r2, [r3, #80]	; 0x50
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <prvInitialiseNewTask+0x134>)
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <prvInitialiseNewTask+0x138>)
 8006cbe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	69b8      	ldr	r0, [r7, #24]
 8006cc6:	f000 fdcd 	bl	8007864 <pxPortInitialiseStack>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cdc:	bf00      	nop
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08008d70 	.word	0x08008d70
 8006ce8:	08008d90 	.word	0x08008d90
 8006cec:	08008d50 	.word	0x08008d50

08006cf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cf8:	f000 fee4 	bl	8007ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <prvAddNewTaskToReadyList+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <prvAddNewTaskToReadyList+0xb8>)
 8006d04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d06:	4b29      	ldr	r3, [pc, #164]	; (8006dac <prvAddNewTaskToReadyList+0xbc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d0e:	4a27      	ldr	r2, [pc, #156]	; (8006dac <prvAddNewTaskToReadyList+0xbc>)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d14:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <prvAddNewTaskToReadyList+0xb8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d110      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d1c:	f000 fbd6 	bl	80074cc <prvInitialiseTaskLists>
 8006d20:	e00d      	b.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d22:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <prvAddNewTaskToReadyList+0xc0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d2a:	4b20      	ldr	r3, [pc, #128]	; (8006dac <prvAddNewTaskToReadyList+0xbc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d802      	bhi.n	8006d3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <prvAddNewTaskToReadyList+0xbc>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <prvAddNewTaskToReadyList+0xc4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <prvAddNewTaskToReadyList+0xc4>)
 8006d46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	4b19      	ldr	r3, [pc, #100]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <prvAddNewTaskToReadyList+0xc8>)
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <prvAddNewTaskToReadyList+0xcc>)
 8006d68:	441a      	add	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7ff f91b 	bl	8005fac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d76:	f000 fed5 	bl	8007b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <prvAddNewTaskToReadyList+0xc0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00e      	beq.n	8006da0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <prvAddNewTaskToReadyList+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d207      	bcs.n	8006da0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <prvAddNewTaskToReadyList+0xd0>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000750 	.word	0x20000750
 8006dac:	20000650 	.word	0x20000650
 8006db0:	2000075c 	.word	0x2000075c
 8006db4:	2000076c 	.word	0x2000076c
 8006db8:	20000758 	.word	0x20000758
 8006dbc:	20000654 	.word	0x20000654
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d017      	beq.n	8006e06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dd6:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <vTaskDelay+0x60>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <vTaskDelay+0x30>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60bb      	str	r3, [r7, #8]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006df4:	f000 f884 	bl	8006f00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fccc 	bl	8007798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e00:	f000 f88c 	bl	8006f1c <xTaskResumeAll>
 8006e04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <vTaskDelay+0x64>)
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000778 	.word	0x20000778
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	1d39      	adds	r1, r7, #4
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fb70 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	9202      	str	r2, [sp, #8]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	2300      	movs	r3, #0
 8006e58:	460a      	mov	r2, r1
 8006e5a:	4921      	ldr	r1, [pc, #132]	; (8006ee0 <vTaskStartScheduler+0xb4>)
 8006e5c:	4821      	ldr	r0, [pc, #132]	; (8006ee4 <vTaskStartScheduler+0xb8>)
 8006e5e:	f7ff fe07 	bl	8006a70 <xTaskCreateStatic>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <vTaskStartScheduler+0xbc>)
 8006e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <vTaskStartScheduler+0xbc>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e70:	2301      	movs	r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e001      	b.n	8006e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d11b      	bne.n	8006eb8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	613b      	str	r3, [r7, #16]
}
 8006e92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vTaskStartScheduler+0xc0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	334c      	adds	r3, #76	; 0x4c
 8006e9a:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <vTaskStartScheduler+0xc4>)
 8006e9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e9e:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <vTaskStartScheduler+0xc8>)
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <vTaskStartScheduler+0xcc>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <vTaskStartScheduler+0xd0>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eb2:	f000 fd65 	bl	8007980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb6:	e00e      	b.n	8006ed6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d10a      	bne.n	8006ed6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <vTaskStartScheduler+0xa8>
}
 8006ed6:	bf00      	nop
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08008d30 	.word	0x08008d30
 8006ee4:	0800749d 	.word	0x0800749d
 8006ee8:	20000774 	.word	0x20000774
 8006eec:	20000650 	.word	0x20000650
 8006ef0:	20000010 	.word	0x20000010
 8006ef4:	20000770 	.word	0x20000770
 8006ef8:	2000075c 	.word	0x2000075c
 8006efc:	20000754 	.word	0x20000754

08006f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <vTaskSuspendAll+0x18>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	4a03      	ldr	r2, [pc, #12]	; (8006f18 <vTaskSuspendAll+0x18>)
 8006f0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f0e:	bf00      	nop
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20000778 	.word	0x20000778

08006f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f2a:	4b41      	ldr	r3, [pc, #260]	; (8007030 <xTaskResumeAll+0x114>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f48:	f000 fdbc 	bl	8007ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f4c:	4b38      	ldr	r3, [pc, #224]	; (8007030 <xTaskResumeAll+0x114>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4a37      	ldr	r2, [pc, #220]	; (8007030 <xTaskResumeAll+0x114>)
 8006f54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <xTaskResumeAll+0x114>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d161      	bne.n	8007022 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f5e:	4b35      	ldr	r3, [pc, #212]	; (8007034 <xTaskResumeAll+0x118>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d05d      	beq.n	8007022 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f66:	e02e      	b.n	8006fc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	4b33      	ldr	r3, [pc, #204]	; (8007038 <xTaskResumeAll+0x11c>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3318      	adds	r3, #24
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff f876 	bl	8006066 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff f871 	bl	8006066 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	2201      	movs	r2, #1
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <xTaskResumeAll+0x120>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	4a2a      	ldr	r2, [pc, #168]	; (800703c <xTaskResumeAll+0x120>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a27      	ldr	r2, [pc, #156]	; (8007040 <xTaskResumeAll+0x124>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe fffd 	bl	8005fac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4b23      	ldr	r3, [pc, #140]	; (8007044 <xTaskResumeAll+0x128>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d302      	bcc.n	8006fc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006fc0:	4b21      	ldr	r3, [pc, #132]	; (8007048 <xTaskResumeAll+0x12c>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <xTaskResumeAll+0x11c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1cc      	bne.n	8006f68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fd4:	f000 fb1c 	bl	8007610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fd8:	4b1c      	ldr	r3, [pc, #112]	; (800704c <xTaskResumeAll+0x130>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fe4:	f000 f836 	bl	8007054 <xTaskIncrementTick>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fee:	4b16      	ldr	r3, [pc, #88]	; (8007048 <xTaskResumeAll+0x12c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f1      	bne.n	8006fe4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007000:	4b12      	ldr	r3, [pc, #72]	; (800704c <xTaskResumeAll+0x130>)
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <xTaskResumeAll+0x12c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <xTaskResumeAll+0x134>)
 8007014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007022:	f000 fd7f 	bl	8007b24 <vPortExitCritical>

	return xAlreadyYielded;
 8007026:	68bb      	ldr	r3, [r7, #8]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000778 	.word	0x20000778
 8007034:	20000750 	.word	0x20000750
 8007038:	20000710 	.word	0x20000710
 800703c:	20000758 	.word	0x20000758
 8007040:	20000654 	.word	0x20000654
 8007044:	20000650 	.word	0x20000650
 8007048:	20000764 	.word	0x20000764
 800704c:	20000760 	.word	0x20000760
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705e:	4b4e      	ldr	r3, [pc, #312]	; (8007198 <xTaskIncrementTick+0x144>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 808e 	bne.w	8007184 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007068:	4b4c      	ldr	r3, [pc, #304]	; (800719c <xTaskIncrementTick+0x148>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007070:	4a4a      	ldr	r2, [pc, #296]	; (800719c <xTaskIncrementTick+0x148>)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d120      	bne.n	80070be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800707c:	4b48      	ldr	r3, [pc, #288]	; (80071a0 <xTaskIncrementTick+0x14c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <xTaskIncrementTick+0x48>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	603b      	str	r3, [r7, #0]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <xTaskIncrementTick+0x46>
 800709c:	4b40      	ldr	r3, [pc, #256]	; (80071a0 <xTaskIncrementTick+0x14c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	4b40      	ldr	r3, [pc, #256]	; (80071a4 <xTaskIncrementTick+0x150>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a3e      	ldr	r2, [pc, #248]	; (80071a0 <xTaskIncrementTick+0x14c>)
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	4a3e      	ldr	r2, [pc, #248]	; (80071a4 <xTaskIncrementTick+0x150>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <xTaskIncrementTick+0x154>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	4a3c      	ldr	r2, [pc, #240]	; (80071a8 <xTaskIncrementTick+0x154>)
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	f000 faa9 	bl	8007610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070be:	4b3b      	ldr	r3, [pc, #236]	; (80071ac <xTaskIncrementTick+0x158>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d348      	bcc.n	800715a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c8:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <xTaskIncrementTick+0x14c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d2:	4b36      	ldr	r3, [pc, #216]	; (80071ac <xTaskIncrementTick+0x158>)
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	601a      	str	r2, [r3, #0]
					break;
 80070da:	e03e      	b.n	800715a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <xTaskIncrementTick+0x14c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d203      	bcs.n	80070fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070f4:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <xTaskIncrementTick+0x158>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070fa:	e02e      	b.n	800715a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe ffb0 	bl	8006066 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3318      	adds	r3, #24
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe ffa7 	bl	8006066 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <xTaskIncrementTick+0x15c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <xTaskIncrementTick+0x15c>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a1f      	ldr	r2, [pc, #124]	; (80071b4 <xTaskIncrementTick+0x160>)
 8007138:	441a      	add	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe ff33 	bl	8005fac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <xTaskIncrementTick+0x164>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	429a      	cmp	r2, r3
 8007152:	d3b9      	bcc.n	80070c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007158:	e7b6      	b.n	80070c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <xTaskIncrementTick+0x164>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4914      	ldr	r1, [pc, #80]	; (80071b4 <xTaskIncrementTick+0x160>)
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d901      	bls.n	8007176 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <xTaskIncrementTick+0x168>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800717e:	2301      	movs	r3, #1
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e004      	b.n	800718e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <xTaskIncrementTick+0x16c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <xTaskIncrementTick+0x16c>)
 800718c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800718e:	697b      	ldr	r3, [r7, #20]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000778 	.word	0x20000778
 800719c:	20000754 	.word	0x20000754
 80071a0:	20000708 	.word	0x20000708
 80071a4:	2000070c 	.word	0x2000070c
 80071a8:	20000768 	.word	0x20000768
 80071ac:	20000770 	.word	0x20000770
 80071b0:	20000758 	.word	0x20000758
 80071b4:	20000654 	.word	0x20000654
 80071b8:	20000650 	.word	0x20000650
 80071bc:	20000764 	.word	0x20000764
 80071c0:	20000760 	.word	0x20000760

080071c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ca:	4b29      	ldr	r3, [pc, #164]	; (8007270 <vTaskSwitchContext+0xac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071d2:	4b28      	ldr	r3, [pc, #160]	; (8007274 <vTaskSwitchContext+0xb0>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071d8:	e044      	b.n	8007264 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80071da:	4b26      	ldr	r3, [pc, #152]	; (8007274 <vTaskSwitchContext+0xb0>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <vTaskSwitchContext+0xb4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	fab3 f383 	clz	r3, r3
 80071ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	f1c3 031f 	rsb	r3, r3, #31
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	4921      	ldr	r1, [pc, #132]	; (800727c <vTaskSwitchContext+0xb8>)
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <vTaskSwitchContext+0x5c>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <vTaskSwitchContext+0x5a>
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4a14      	ldr	r2, [pc, #80]	; (800727c <vTaskSwitchContext+0xb8>)
 800722c:	4413      	add	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	3308      	adds	r3, #8
 8007242:	429a      	cmp	r2, r3
 8007244:	d104      	bne.n	8007250 <vTaskSwitchContext+0x8c>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4a0a      	ldr	r2, [pc, #40]	; (8007280 <vTaskSwitchContext+0xbc>)
 8007258:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <vTaskSwitchContext+0xbc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	334c      	adds	r3, #76	; 0x4c
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <vTaskSwitchContext+0xc0>)
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000778 	.word	0x20000778
 8007274:	20000764 	.word	0x20000764
 8007278:	20000758 	.word	0x20000758
 800727c:	20000654 	.word	0x20000654
 8007280:	20000650 	.word	0x20000650
 8007284:	20000010 	.word	0x20000010

08007288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60fb      	str	r3, [r7, #12]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <vTaskPlaceOnEventList+0x44>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3318      	adds	r3, #24
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fe fe9c 	bl	8005ff4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072bc:	2101      	movs	r1, #1
 80072be:	6838      	ldr	r0, [r7, #0]
 80072c0:	f000 fa6a 	bl	8007798 <prvAddCurrentTaskToDelayedList>
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000650 	.word	0x20000650

080072d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3318      	adds	r3, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe feb0 	bl	8006066 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <xTaskRemoveFromEventList+0xac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11c      	bne.n	8007348 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fea7 	bl	8006066 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	2201      	movs	r2, #1
 800731e:	409a      	lsls	r2, r3
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <xTaskRemoveFromEventList+0xb0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4313      	orrs	r3, r2
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <xTaskRemoveFromEventList+0xb0>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <xTaskRemoveFromEventList+0xb4>)
 8007338:	441a      	add	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7fe fe33 	bl	8005fac <vListInsertEnd>
 8007346:	e005      	b.n	8007354 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3318      	adds	r3, #24
 800734c:	4619      	mov	r1, r3
 800734e:	480e      	ldr	r0, [pc, #56]	; (8007388 <xTaskRemoveFromEventList+0xb8>)
 8007350:	f7fe fe2c 	bl	8005fac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <xTaskRemoveFromEventList+0xbc>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	429a      	cmp	r2, r3
 8007360:	d905      	bls.n	800736e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007362:	2301      	movs	r3, #1
 8007364:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <xTaskRemoveFromEventList+0xc0>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	e001      	b.n	8007372 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007372:	697b      	ldr	r3, [r7, #20]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000778 	.word	0x20000778
 8007380:	20000758 	.word	0x20000758
 8007384:	20000654 	.word	0x20000654
 8007388:	20000710 	.word	0x20000710
 800738c:	20000650 	.word	0x20000650
 8007390:	20000764 	.word	0x20000764

08007394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800739c:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <vTaskInternalSetTimeOutState+0x24>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <vTaskInternalSetTimeOutState+0x28>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	605a      	str	r2, [r3, #4]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	20000768 	.word	0x20000768
 80073bc:	20000754 	.word	0x20000754

080073c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	60fb      	str	r3, [r7, #12]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007402:	f000 fb5f 	bl	8007ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007406:	4b1d      	ldr	r3, [pc, #116]	; (800747c <xTaskCheckForTimeOut+0xbc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d102      	bne.n	8007426 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007420:	2300      	movs	r3, #0
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	e023      	b.n	800746e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <xTaskCheckForTimeOut+0xc0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d007      	beq.n	8007442 <xTaskCheckForTimeOut+0x82>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e015      	b.n	800746e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	429a      	cmp	r2, r3
 800744a:	d20b      	bcs.n	8007464 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	1ad2      	subs	r2, r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff9b 	bl	8007394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	e004      	b.n	800746e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800746a:	2301      	movs	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800746e:	f000 fb59 	bl	8007b24 <vPortExitCritical>

	return xReturn;
 8007472:	69fb      	ldr	r3, [r7, #28]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3720      	adds	r7, #32
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000754 	.word	0x20000754
 8007480:	20000768 	.word	0x20000768

08007484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007488:	4b03      	ldr	r3, [pc, #12]	; (8007498 <vTaskMissedYield+0x14>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20000764 	.word	0x20000764

0800749c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a4:	f000 f852 	bl	800754c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <prvIdleTask+0x28>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d9f9      	bls.n	80074a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <prvIdleTask+0x2c>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c0:	e7f0      	b.n	80074a4 <prvIdleTask+0x8>
 80074c2:	bf00      	nop
 80074c4:	20000654 	.word	0x20000654
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e00c      	b.n	80074f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <prvInitialiseTaskLists+0x60>)
 80074e4:	4413      	add	r3, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fd33 	bl	8005f52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3301      	adds	r3, #1
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	d9ef      	bls.n	80074d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074f8:	480d      	ldr	r0, [pc, #52]	; (8007530 <prvInitialiseTaskLists+0x64>)
 80074fa:	f7fe fd2a 	bl	8005f52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074fe:	480d      	ldr	r0, [pc, #52]	; (8007534 <prvInitialiseTaskLists+0x68>)
 8007500:	f7fe fd27 	bl	8005f52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007504:	480c      	ldr	r0, [pc, #48]	; (8007538 <prvInitialiseTaskLists+0x6c>)
 8007506:	f7fe fd24 	bl	8005f52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750a:	480c      	ldr	r0, [pc, #48]	; (800753c <prvInitialiseTaskLists+0x70>)
 800750c:	f7fe fd21 	bl	8005f52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007510:	480b      	ldr	r0, [pc, #44]	; (8007540 <prvInitialiseTaskLists+0x74>)
 8007512:	f7fe fd1e 	bl	8005f52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <prvInitialiseTaskLists+0x78>)
 8007518:	4a05      	ldr	r2, [pc, #20]	; (8007530 <prvInitialiseTaskLists+0x64>)
 800751a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <prvInitialiseTaskLists+0x7c>)
 800751e:	4a05      	ldr	r2, [pc, #20]	; (8007534 <prvInitialiseTaskLists+0x68>)
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000654 	.word	0x20000654
 8007530:	200006e0 	.word	0x200006e0
 8007534:	200006f4 	.word	0x200006f4
 8007538:	20000710 	.word	0x20000710
 800753c:	20000724 	.word	0x20000724
 8007540:	2000073c 	.word	0x2000073c
 8007544:	20000708 	.word	0x20000708
 8007548:	2000070c 	.word	0x2000070c

0800754c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007552:	e019      	b.n	8007588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007554:	f000 fab6 	bl	8007ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <prvCheckTasksWaitingTermination+0x50>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fd7e 	bl	8006066 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 8007572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800757c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800757e:	f000 fad1 	bl	8007b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f810 	bl	80075a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e1      	bne.n	8007554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000724 	.word	0x20000724
 80075a0:	20000750 	.word	0x20000750
 80075a4:	20000738 	.word	0x20000738

080075a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	334c      	adds	r3, #76	; 0x4c
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 ffe3 	bl	8008580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fc69 	bl	8007ea0 <vPortFree>
				vPortFree( pxTCB );
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fc66 	bl	8007ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d4:	e018      	b.n	8007608 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d103      	bne.n	80075e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc5d 	bl	8007ea0 <vPortFree>
	}
 80075e6:	e00f      	b.n	8007608 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d00a      	beq.n	8007608 <prvDeleteTCB+0x60>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <prvDeleteTCB+0x5e>
	}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvResetNextTaskUnblockTime+0x38>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <prvResetNextTaskUnblockTime+0x3c>)
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007628:	e008      	b.n	800763c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <prvResetNextTaskUnblockTime+0x38>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a04      	ldr	r2, [pc, #16]	; (800764c <prvResetNextTaskUnblockTime+0x3c>)
 800763a:	6013      	str	r3, [r2, #0]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000708 	.word	0x20000708
 800764c:	20000770 	.word	0x20000770

08007650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <xTaskGetSchedulerState+0x34>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800765e:	2301      	movs	r3, #1
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	e008      	b.n	8007676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007664:	4b08      	ldr	r3, [pc, #32]	; (8007688 <xTaskGetSchedulerState+0x38>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800766c:	2302      	movs	r3, #2
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	e001      	b.n	8007676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007672:	2300      	movs	r3, #0
 8007674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007676:	687b      	ldr	r3, [r7, #4]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	2000075c 	.word	0x2000075c
 8007688:	20000778 	.word	0x20000778

0800768c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d06e      	beq.n	8007780 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076a2:	4b3a      	ldr	r3, [pc, #232]	; (800778c <xTaskPriorityDisinherit+0x100>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d00a      	beq.n	80076c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60bb      	str	r3, [r7, #8]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e4:	1e5a      	subs	r2, r3, #1
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d044      	beq.n	8007780 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d140      	bne.n	8007780 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fcaf 	bl	8006066 <uxListRemove>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d115      	bne.n	800773a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	491f      	ldr	r1, [pc, #124]	; (8007790 <xTaskPriorityDisinherit+0x104>)
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xTaskPriorityDisinherit+0xae>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2201      	movs	r2, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43da      	mvns	r2, r3
 8007730:	4b18      	ldr	r3, [pc, #96]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4013      	ands	r3, r2
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007738:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f1c3 0207 	rsb	r2, r3, #7
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	2201      	movs	r2, #1
 8007754:	409a      	lsls	r2, r3
 8007756:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4313      	orrs	r3, r2
 800775c:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <xTaskPriorityDisinherit+0x104>)
 800776e:	441a      	add	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fe fc18 	bl	8005fac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000650 	.word	0x20000650
 8007790:	20000654 	.word	0x20000654
 8007794:	20000758 	.word	0x20000758

08007798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077a2:	4b29      	ldr	r3, [pc, #164]	; (8007848 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a8:	4b28      	ldr	r3, [pc, #160]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fc59 	bl	8006066 <uxListRemove>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077ba:	4b24      	ldr	r3, [pc, #144]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2201      	movs	r2, #1
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43da      	mvns	r2, r3
 80077c8:	4b21      	ldr	r3, [pc, #132]	; (8007850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4013      	ands	r3, r2
 80077ce:	4a20      	ldr	r2, [pc, #128]	; (8007850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d10a      	bne.n	80077f0 <prvAddCurrentTaskToDelayedList+0x58>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e0:	4b1a      	ldr	r3, [pc, #104]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	481a      	ldr	r0, [pc, #104]	; (8007854 <prvAddCurrentTaskToDelayedList+0xbc>)
 80077ea:	f7fe fbdf 	bl	8005fac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077ee:	e026      	b.n	800783e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077f8:	4b14      	ldr	r3, [pc, #80]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	429a      	cmp	r2, r3
 8007806:	d209      	bcs.n	800781c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007808:	4b13      	ldr	r3, [pc, #76]	; (8007858 <prvAddCurrentTaskToDelayedList+0xc0>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	4b0f      	ldr	r3, [pc, #60]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f7fe fbed 	bl	8005ff4 <vListInsert>
}
 800781a:	e010      	b.n	800783e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <prvAddCurrentTaskToDelayedList+0xc4>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7fe fbe3 	bl	8005ff4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d202      	bcs.n	800783e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <prvAddCurrentTaskToDelayedList+0xc8>)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6013      	str	r3, [r2, #0]
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000754 	.word	0x20000754
 800784c:	20000650 	.word	0x20000650
 8007850:	20000758 	.word	0x20000758
 8007854:	2000073c 	.word	0x2000073c
 8007858:	2000070c 	.word	0x2000070c
 800785c:	20000708 	.word	0x20000708
 8007860:	20000770 	.word	0x20000770

08007864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3b04      	subs	r3, #4
 8007874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800787c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3b04      	subs	r3, #4
 8007882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0201 	bic.w	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b04      	subs	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007894:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <pxPortInitialiseStack+0x64>)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b14      	subs	r3, #20
 800789e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b04      	subs	r3, #4
 80078aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f06f 0202 	mvn.w	r2, #2
 80078b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3b20      	subs	r3, #32
 80078b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	080078cd 	.word	0x080078cd

080078cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <prvTaskExitError+0x54>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d00a      	beq.n	80078f6 <prvTaskExitError+0x2a>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <prvTaskExitError+0x28>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	60bb      	str	r3, [r7, #8]
}
 8007908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800790a:	bf00      	nop
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0fc      	beq.n	800790c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	2000000c 	.word	0x2000000c
	...

08007930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pxCurrentTCBConst2>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f380 8809 	msr	PSP, r0
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	4770      	bx	lr
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst2>:
 8007950:	20000650 	.word	0x20000650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007958:	4808      	ldr	r0, [pc, #32]	; (800797c <prvPortStartFirstTask+0x24>)
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	6800      	ldr	r0, [r0, #0]
 800795e:	f380 8808 	msr	MSP, r0
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8814 	msr	CONTROL, r0
 800796a:	b662      	cpsie	i
 800796c:	b661      	cpsie	f
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	df00      	svc	0
 8007978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800797a:	bf00      	nop
 800797c:	e000ed08 	.word	0xe000ed08

08007980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007986:	4b46      	ldr	r3, [pc, #280]	; (8007aa0 <xPortStartScheduler+0x120>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a46      	ldr	r2, [pc, #280]	; (8007aa4 <xPortStartScheduler+0x124>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10a      	bne.n	80079a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	613b      	str	r3, [r7, #16]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079a6:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <xPortStartScheduler+0x120>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <xPortStartScheduler+0x128>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10a      	bne.n	80079c6 <xPortStartScheduler+0x46>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60fb      	str	r3, [r7, #12]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079c6:	4b39      	ldr	r3, [pc, #228]	; (8007aac <xPortStartScheduler+0x12c>)
 80079c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	4b31      	ldr	r3, [pc, #196]	; (8007ab0 <xPortStartScheduler+0x130>)
 80079ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ee:	4b31      	ldr	r3, [pc, #196]	; (8007ab4 <xPortStartScheduler+0x134>)
 80079f0:	2207      	movs	r2, #7
 80079f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079f4:	e009      	b.n	8007a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079f6:	4b2f      	ldr	r3, [pc, #188]	; (8007ab4 <xPortStartScheduler+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	4a2d      	ldr	r2, [pc, #180]	; (8007ab4 <xPortStartScheduler+0x134>)
 80079fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b80      	cmp	r3, #128	; 0x80
 8007a14:	d0ef      	beq.n	80079f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a16:	4b27      	ldr	r3, [pc, #156]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1c3 0307 	rsb	r3, r3, #7
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d00a      	beq.n	8007a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a38:	4b1e      	ldr	r3, [pc, #120]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	4a1d      	ldr	r2, [pc, #116]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a4a:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <xPortStartScheduler+0x134>)
 8007a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a56:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <xPortStartScheduler+0x138>)
 8007a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a6e:	f000 f8dd 	bl	8007c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a72:	4b12      	ldr	r3, [pc, #72]	; (8007abc <xPortStartScheduler+0x13c>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a78:	f000 f8fc 	bl	8007c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a7c:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <xPortStartScheduler+0x140>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0f      	ldr	r2, [pc, #60]	; (8007ac0 <xPortStartScheduler+0x140>)
 8007a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a88:	f7ff ff66 	bl	8007958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a8c:	f7ff fb9a 	bl	80071c4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a90:	f7ff ff1c 	bl	80078cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	e000ed00 	.word	0xe000ed00
 8007aa4:	410fc271 	.word	0x410fc271
 8007aa8:	410fc270 	.word	0x410fc270
 8007aac:	e000e400 	.word	0xe000e400
 8007ab0:	2000077c 	.word	0x2000077c
 8007ab4:	20000780 	.word	0x20000780
 8007ab8:	e000ed20 	.word	0xe000ed20
 8007abc:	2000000c 	.word	0x2000000c
 8007ac0:	e000ef34 	.word	0xe000ef34

08007ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <vPortEnterCritical+0x58>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <vPortEnterCritical+0x58>)
 8007ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <vPortEnterCritical+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10f      	bne.n	8007b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <vPortEnterCritical+0x5c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	603b      	str	r3, [r7, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	e7fe      	b.n	8007b0e <vPortEnterCritical+0x4a>
	}
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	2000000c 	.word	0x2000000c
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <vPortExitCritical+0x50>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <vPortExitCritical+0x24>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	607b      	str	r3, [r7, #4]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <vPortExitCritical+0x50>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <vPortExitCritical+0x50>)
 8007b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b52:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <vPortExitCritical+0x50>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <vPortExitCritical+0x42>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	f383 8811 	msr	BASEPRI, r3
}
 8007b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c
	...

08007b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b80:	f3ef 8009 	mrs	r0, PSP
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <pxCurrentTCBConst>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	f01e 0f10 	tst.w	lr, #16
 8007b90:	bf08      	it	eq
 8007b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	6010      	str	r0, [r2, #0]
 8007b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ba4:	f380 8811 	msr	BASEPRI, r0
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f7ff fb08 	bl	80071c4 <vTaskSwitchContext>
 8007bb4:	f04f 0000 	mov.w	r0, #0
 8007bb8:	f380 8811 	msr	BASEPRI, r0
 8007bbc:	bc09      	pop	{r0, r3}
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	6808      	ldr	r0, [r1, #0]
 8007bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc6:	f01e 0f10 	tst.w	lr, #16
 8007bca:	bf08      	it	eq
 8007bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bd0:	f380 8809 	msr	PSP, r0
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst>:
 8007be0:	20000650 	.word	0x20000650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	607b      	str	r3, [r7, #4]
}
 8007c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c02:	f7ff fa27 	bl	8007054 <xTaskIncrementTick>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <SysTick_Handler+0x40>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
}
 8007c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <vPortSetupTimerInterrupt+0x34>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <vPortSetupTimerInterrupt+0x38>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <vPortSetupTimerInterrupt+0x3c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <vPortSetupTimerInterrupt+0x40>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	099b      	lsrs	r3, r3, #6
 8007c48:	4a09      	ldr	r2, [pc, #36]	; (8007c70 <vPortSetupTimerInterrupt+0x44>)
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c4e:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <vPortSetupTimerInterrupt+0x34>)
 8007c50:	2207      	movs	r2, #7
 8007c52:	601a      	str	r2, [r3, #0]
}
 8007c54:	bf00      	nop
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	e000e010 	.word	0xe000e010
 8007c64:	e000e018 	.word	0xe000e018
 8007c68:	20000000 	.word	0x20000000
 8007c6c:	10624dd3 	.word	0x10624dd3
 8007c70:	e000e014 	.word	0xe000e014

08007c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c84 <vPortEnableVFP+0x10>
 8007c78:	6801      	ldr	r1, [r0, #0]
 8007c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c7e:	6001      	str	r1, [r0, #0]
 8007c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c82:	bf00      	nop
 8007c84:	e000ed88 	.word	0xe000ed88

08007c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c8e:	f3ef 8305 	mrs	r3, IPSR
 8007c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d914      	bls.n	8007cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <vPortValidateInterruptPriority+0x70>)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ca4:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <vPortValidateInterruptPriority+0x74>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	7afa      	ldrb	r2, [r7, #11]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d20a      	bcs.n	8007cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <vPortValidateInterruptPriority+0x78>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <vPortValidateInterruptPriority+0x7c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d90a      	bls.n	8007cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	603b      	str	r3, [r7, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <vPortValidateInterruptPriority+0x60>
	}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	e000e3f0 	.word	0xe000e3f0
 8007cfc:	2000077c 	.word	0x2000077c
 8007d00:	e000ed0c 	.word	0xe000ed0c
 8007d04:	20000780 	.word	0x20000780

08007d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d14:	f7ff f8f4 	bl	8006f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d18:	4b5b      	ldr	r3, [pc, #364]	; (8007e88 <pvPortMalloc+0x180>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d20:	f000 f920 	bl	8007f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d24:	4b59      	ldr	r3, [pc, #356]	; (8007e8c <pvPortMalloc+0x184>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 8093 	bne.w	8007e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01d      	beq.n	8007d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d38:	2208      	movs	r2, #8
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d014      	beq.n	8007d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	3308      	adds	r3, #8
 8007d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <pvPortMalloc+0x6c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	617b      	str	r3, [r7, #20]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d06e      	beq.n	8007e58 <pvPortMalloc+0x150>
 8007d7a:	4b45      	ldr	r3, [pc, #276]	; (8007e90 <pvPortMalloc+0x188>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d869      	bhi.n	8007e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d84:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <pvPortMalloc+0x18c>)
 8007d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d88:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <pvPortMalloc+0x18c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d8e:	e004      	b.n	8007d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d903      	bls.n	8007dac <pvPortMalloc+0xa4>
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f1      	bne.n	8007d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dac:	4b36      	ldr	r3, [pc, #216]	; (8007e88 <pvPortMalloc+0x180>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d050      	beq.n	8007e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2208      	movs	r2, #8
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d91f      	bls.n	8007e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <pvPortMalloc+0xf8>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	613b      	str	r3, [r7, #16]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	1ad2      	subs	r2, r2, r3
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e12:	69b8      	ldr	r0, [r7, #24]
 8007e14:	f000 f908 	bl	8008028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e18:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <pvPortMalloc+0x188>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <pvPortMalloc+0x188>)
 8007e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e26:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <pvPortMalloc+0x188>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <pvPortMalloc+0x190>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d203      	bcs.n	8007e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e32:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <pvPortMalloc+0x188>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <pvPortMalloc+0x190>)
 8007e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <pvPortMalloc+0x184>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e4e:	4b13      	ldr	r3, [pc, #76]	; (8007e9c <pvPortMalloc+0x194>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	4a11      	ldr	r2, [pc, #68]	; (8007e9c <pvPortMalloc+0x194>)
 8007e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e58:	f7ff f860 	bl	8006f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <pvPortMalloc+0x174>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <pvPortMalloc+0x172>
	return pvReturn;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3728      	adds	r7, #40	; 0x28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000438c 	.word	0x2000438c
 8007e8c:	200043a0 	.word	0x200043a0
 8007e90:	20004390 	.word	0x20004390
 8007e94:	20004384 	.word	0x20004384
 8007e98:	20004394 	.word	0x20004394
 8007e9c:	20004398 	.word	0x20004398

08007ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d04d      	beq.n	8007f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4413      	add	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <vPortFree+0xb8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <vPortFree+0x44>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <vPortFree+0x62>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60bb      	str	r3, [r7, #8]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <vPortFree+0xb8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11a      	bne.n	8007f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <vPortFree+0xb8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f28:	f7fe ffea 	bl	8006f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <vPortFree+0xbc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <vPortFree+0xbc>)
 8007f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f000 f874 	bl	8008028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <vPortFree+0xc0>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	4a06      	ldr	r2, [pc, #24]	; (8007f60 <vPortFree+0xc0>)
 8007f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f4a:	f7fe ffe7 	bl	8006f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200043a0 	.word	0x200043a0
 8007f5c:	20004390 	.word	0x20004390
 8007f60:	2000439c 	.word	0x2000439c

08007f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f70:	4b27      	ldr	r3, [pc, #156]	; (8008010 <prvHeapInit+0xac>)
 8007f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3307      	adds	r3, #7
 8007f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <prvHeapInit+0xac>)
 8007f94:	4413      	add	r3, r2
 8007f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <prvHeapInit+0xb0>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <prvHeapInit+0xb0>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4413      	add	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	; (8008018 <prvHeapInit+0xb4>)
 8007fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <prvHeapInit+0xb4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <prvHeapInit+0xb4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <prvHeapInit+0xb4>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <prvHeapInit+0xb8>)
 8007ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4a09      	ldr	r2, [pc, #36]	; (8008020 <prvHeapInit+0xbc>)
 8007ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <prvHeapInit+0xc0>)
 8007ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	20000784 	.word	0x20000784
 8008014:	20004384 	.word	0x20004384
 8008018:	2000438c 	.word	0x2000438c
 800801c:	20004394 	.word	0x20004394
 8008020:	20004390 	.word	0x20004390
 8008024:	200043a0 	.word	0x200043a0

08008028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008030:	4b28      	ldr	r3, [pc, #160]	; (80080d4 <prvInsertBlockIntoFreeList+0xac>)
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e002      	b.n	800803c <prvInsertBlockIntoFreeList+0x14>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d8f7      	bhi.n	8008036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d108      	bne.n	800806a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	441a      	add	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d118      	bne.n	80080b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d00d      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	441a      	add	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e008      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvInsertBlockIntoFreeList+0xb0>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e003      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d002      	beq.n	80080c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20004384 	.word	0x20004384
 80080d8:	2000438c 	.word	0x2000438c

080080dc <__errno>:
 80080dc:	4b01      	ldr	r3, [pc, #4]	; (80080e4 <__errno+0x8>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000010 	.word	0x20000010

080080e8 <std>:
 80080e8:	2300      	movs	r3, #0
 80080ea:	b510      	push	{r4, lr}
 80080ec:	4604      	mov	r4, r0
 80080ee:	e9c0 3300 	strd	r3, r3, [r0]
 80080f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f6:	6083      	str	r3, [r0, #8]
 80080f8:	8181      	strh	r1, [r0, #12]
 80080fa:	6643      	str	r3, [r0, #100]	; 0x64
 80080fc:	81c2      	strh	r2, [r0, #14]
 80080fe:	6183      	str	r3, [r0, #24]
 8008100:	4619      	mov	r1, r3
 8008102:	2208      	movs	r2, #8
 8008104:	305c      	adds	r0, #92	; 0x5c
 8008106:	f000 f91a 	bl	800833e <memset>
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <std+0x38>)
 800810c:	6263      	str	r3, [r4, #36]	; 0x24
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <std+0x3c>)
 8008110:	62a3      	str	r3, [r4, #40]	; 0x28
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <std+0x40>)
 8008114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <std+0x44>)
 8008118:	6224      	str	r4, [r4, #32]
 800811a:	6323      	str	r3, [r4, #48]	; 0x30
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	08008659 	.word	0x08008659
 8008124:	0800867b 	.word	0x0800867b
 8008128:	080086b3 	.word	0x080086b3
 800812c:	080086d7 	.word	0x080086d7

08008130 <_cleanup_r>:
 8008130:	4901      	ldr	r1, [pc, #4]	; (8008138 <_cleanup_r+0x8>)
 8008132:	f000 b8af 	b.w	8008294 <_fwalk_reent>
 8008136:	bf00      	nop
 8008138:	080089b1 	.word	0x080089b1

0800813c <__sfmoreglue>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	2268      	movs	r2, #104	; 0x68
 8008140:	1e4d      	subs	r5, r1, #1
 8008142:	4355      	muls	r5, r2
 8008144:	460e      	mov	r6, r1
 8008146:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800814a:	f000 f921 	bl	8008390 <_malloc_r>
 800814e:	4604      	mov	r4, r0
 8008150:	b140      	cbz	r0, 8008164 <__sfmoreglue+0x28>
 8008152:	2100      	movs	r1, #0
 8008154:	e9c0 1600 	strd	r1, r6, [r0]
 8008158:	300c      	adds	r0, #12
 800815a:	60a0      	str	r0, [r4, #8]
 800815c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008160:	f000 f8ed 	bl	800833e <memset>
 8008164:	4620      	mov	r0, r4
 8008166:	bd70      	pop	{r4, r5, r6, pc}

08008168 <__sfp_lock_acquire>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__sfp_lock_acquire+0x8>)
 800816a:	f000 b8d8 	b.w	800831e <__retarget_lock_acquire_recursive>
 800816e:	bf00      	nop
 8008170:	200043a5 	.word	0x200043a5

08008174 <__sfp_lock_release>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__sfp_lock_release+0x8>)
 8008176:	f000 b8d3 	b.w	8008320 <__retarget_lock_release_recursive>
 800817a:	bf00      	nop
 800817c:	200043a5 	.word	0x200043a5

08008180 <__sinit_lock_acquire>:
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <__sinit_lock_acquire+0x8>)
 8008182:	f000 b8cc 	b.w	800831e <__retarget_lock_acquire_recursive>
 8008186:	bf00      	nop
 8008188:	200043a6 	.word	0x200043a6

0800818c <__sinit_lock_release>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__sinit_lock_release+0x8>)
 800818e:	f000 b8c7 	b.w	8008320 <__retarget_lock_release_recursive>
 8008192:	bf00      	nop
 8008194:	200043a6 	.word	0x200043a6

08008198 <__sinit>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4604      	mov	r4, r0
 800819c:	f7ff fff0 	bl	8008180 <__sinit_lock_acquire>
 80081a0:	69a3      	ldr	r3, [r4, #24]
 80081a2:	b11b      	cbz	r3, 80081ac <__sinit+0x14>
 80081a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a8:	f7ff bff0 	b.w	800818c <__sinit_lock_release>
 80081ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081b0:	6523      	str	r3, [r4, #80]	; 0x50
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <__sinit+0x68>)
 80081b4:	4a13      	ldr	r2, [pc, #76]	; (8008204 <__sinit+0x6c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	bf04      	itt	eq
 80081be:	2301      	moveq	r3, #1
 80081c0:	61a3      	streq	r3, [r4, #24]
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f820 	bl	8008208 <__sfp>
 80081c8:	6060      	str	r0, [r4, #4]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f81c 	bl	8008208 <__sfp>
 80081d0:	60a0      	str	r0, [r4, #8]
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 f818 	bl	8008208 <__sfp>
 80081d8:	2200      	movs	r2, #0
 80081da:	60e0      	str	r0, [r4, #12]
 80081dc:	2104      	movs	r1, #4
 80081de:	6860      	ldr	r0, [r4, #4]
 80081e0:	f7ff ff82 	bl	80080e8 <std>
 80081e4:	68a0      	ldr	r0, [r4, #8]
 80081e6:	2201      	movs	r2, #1
 80081e8:	2109      	movs	r1, #9
 80081ea:	f7ff ff7d 	bl	80080e8 <std>
 80081ee:	68e0      	ldr	r0, [r4, #12]
 80081f0:	2202      	movs	r2, #2
 80081f2:	2112      	movs	r1, #18
 80081f4:	f7ff ff78 	bl	80080e8 <std>
 80081f8:	2301      	movs	r3, #1
 80081fa:	61a3      	str	r3, [r4, #24]
 80081fc:	e7d2      	b.n	80081a4 <__sinit+0xc>
 80081fe:	bf00      	nop
 8008200:	08008db0 	.word	0x08008db0
 8008204:	08008131 	.word	0x08008131

08008208 <__sfp>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	4607      	mov	r7, r0
 800820c:	f7ff ffac 	bl	8008168 <__sfp_lock_acquire>
 8008210:	4b1e      	ldr	r3, [pc, #120]	; (800828c <__sfp+0x84>)
 8008212:	681e      	ldr	r6, [r3, #0]
 8008214:	69b3      	ldr	r3, [r6, #24]
 8008216:	b913      	cbnz	r3, 800821e <__sfp+0x16>
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff ffbd 	bl	8008198 <__sinit>
 800821e:	3648      	adds	r6, #72	; 0x48
 8008220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008224:	3b01      	subs	r3, #1
 8008226:	d503      	bpl.n	8008230 <__sfp+0x28>
 8008228:	6833      	ldr	r3, [r6, #0]
 800822a:	b30b      	cbz	r3, 8008270 <__sfp+0x68>
 800822c:	6836      	ldr	r6, [r6, #0]
 800822e:	e7f7      	b.n	8008220 <__sfp+0x18>
 8008230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008234:	b9d5      	cbnz	r5, 800826c <__sfp+0x64>
 8008236:	4b16      	ldr	r3, [pc, #88]	; (8008290 <__sfp+0x88>)
 8008238:	60e3      	str	r3, [r4, #12]
 800823a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800823e:	6665      	str	r5, [r4, #100]	; 0x64
 8008240:	f000 f86c 	bl	800831c <__retarget_lock_init_recursive>
 8008244:	f7ff ff96 	bl	8008174 <__sfp_lock_release>
 8008248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800824c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008250:	6025      	str	r5, [r4, #0]
 8008252:	61a5      	str	r5, [r4, #24]
 8008254:	2208      	movs	r2, #8
 8008256:	4629      	mov	r1, r5
 8008258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800825c:	f000 f86f 	bl	800833e <memset>
 8008260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008268:	4620      	mov	r0, r4
 800826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800826c:	3468      	adds	r4, #104	; 0x68
 800826e:	e7d9      	b.n	8008224 <__sfp+0x1c>
 8008270:	2104      	movs	r1, #4
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff ff62 	bl	800813c <__sfmoreglue>
 8008278:	4604      	mov	r4, r0
 800827a:	6030      	str	r0, [r6, #0]
 800827c:	2800      	cmp	r0, #0
 800827e:	d1d5      	bne.n	800822c <__sfp+0x24>
 8008280:	f7ff ff78 	bl	8008174 <__sfp_lock_release>
 8008284:	230c      	movs	r3, #12
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	e7ee      	b.n	8008268 <__sfp+0x60>
 800828a:	bf00      	nop
 800828c:	08008db0 	.word	0x08008db0
 8008290:	ffff0001 	.word	0xffff0001

08008294 <_fwalk_reent>:
 8008294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008298:	4606      	mov	r6, r0
 800829a:	4688      	mov	r8, r1
 800829c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082a0:	2700      	movs	r7, #0
 80082a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082a6:	f1b9 0901 	subs.w	r9, r9, #1
 80082aa:	d505      	bpl.n	80082b8 <_fwalk_reent+0x24>
 80082ac:	6824      	ldr	r4, [r4, #0]
 80082ae:	2c00      	cmp	r4, #0
 80082b0:	d1f7      	bne.n	80082a2 <_fwalk_reent+0xe>
 80082b2:	4638      	mov	r0, r7
 80082b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b8:	89ab      	ldrh	r3, [r5, #12]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d907      	bls.n	80082ce <_fwalk_reent+0x3a>
 80082be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082c2:	3301      	adds	r3, #1
 80082c4:	d003      	beq.n	80082ce <_fwalk_reent+0x3a>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	47c0      	blx	r8
 80082cc:	4307      	orrs	r7, r0
 80082ce:	3568      	adds	r5, #104	; 0x68
 80082d0:	e7e9      	b.n	80082a6 <_fwalk_reent+0x12>
	...

080082d4 <__libc_init_array>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4d0d      	ldr	r5, [pc, #52]	; (800830c <__libc_init_array+0x38>)
 80082d8:	4c0d      	ldr	r4, [pc, #52]	; (8008310 <__libc_init_array+0x3c>)
 80082da:	1b64      	subs	r4, r4, r5
 80082dc:	10a4      	asrs	r4, r4, #2
 80082de:	2600      	movs	r6, #0
 80082e0:	42a6      	cmp	r6, r4
 80082e2:	d109      	bne.n	80082f8 <__libc_init_array+0x24>
 80082e4:	4d0b      	ldr	r5, [pc, #44]	; (8008314 <__libc_init_array+0x40>)
 80082e6:	4c0c      	ldr	r4, [pc, #48]	; (8008318 <__libc_init_array+0x44>)
 80082e8:	f000 fca2 	bl	8008c30 <_init>
 80082ec:	1b64      	subs	r4, r4, r5
 80082ee:	10a4      	asrs	r4, r4, #2
 80082f0:	2600      	movs	r6, #0
 80082f2:	42a6      	cmp	r6, r4
 80082f4:	d105      	bne.n	8008302 <__libc_init_array+0x2e>
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fc:	4798      	blx	r3
 80082fe:	3601      	adds	r6, #1
 8008300:	e7ee      	b.n	80082e0 <__libc_init_array+0xc>
 8008302:	f855 3b04 	ldr.w	r3, [r5], #4
 8008306:	4798      	blx	r3
 8008308:	3601      	adds	r6, #1
 800830a:	e7f2      	b.n	80082f2 <__libc_init_array+0x1e>
 800830c:	08008dbc 	.word	0x08008dbc
 8008310:	08008dbc 	.word	0x08008dbc
 8008314:	08008dbc 	.word	0x08008dbc
 8008318:	08008dc0 	.word	0x08008dc0

0800831c <__retarget_lock_init_recursive>:
 800831c:	4770      	bx	lr

0800831e <__retarget_lock_acquire_recursive>:
 800831e:	4770      	bx	lr

08008320 <__retarget_lock_release_recursive>:
 8008320:	4770      	bx	lr

08008322 <memcpy>:
 8008322:	440a      	add	r2, r1
 8008324:	4291      	cmp	r1, r2
 8008326:	f100 33ff 	add.w	r3, r0, #4294967295
 800832a:	d100      	bne.n	800832e <memcpy+0xc>
 800832c:	4770      	bx	lr
 800832e:	b510      	push	{r4, lr}
 8008330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008338:	4291      	cmp	r1, r2
 800833a:	d1f9      	bne.n	8008330 <memcpy+0xe>
 800833c:	bd10      	pop	{r4, pc}

0800833e <memset>:
 800833e:	4402      	add	r2, r0
 8008340:	4603      	mov	r3, r0
 8008342:	4293      	cmp	r3, r2
 8008344:	d100      	bne.n	8008348 <memset+0xa>
 8008346:	4770      	bx	lr
 8008348:	f803 1b01 	strb.w	r1, [r3], #1
 800834c:	e7f9      	b.n	8008342 <memset+0x4>
	...

08008350 <sbrk_aligned>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4e0e      	ldr	r6, [pc, #56]	; (800838c <sbrk_aligned+0x3c>)
 8008354:	460c      	mov	r4, r1
 8008356:	6831      	ldr	r1, [r6, #0]
 8008358:	4605      	mov	r5, r0
 800835a:	b911      	cbnz	r1, 8008362 <sbrk_aligned+0x12>
 800835c:	f000 f96c 	bl	8008638 <_sbrk_r>
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 f967 	bl	8008638 <_sbrk_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	d00a      	beq.n	8008384 <sbrk_aligned+0x34>
 800836e:	1cc4      	adds	r4, r0, #3
 8008370:	f024 0403 	bic.w	r4, r4, #3
 8008374:	42a0      	cmp	r0, r4
 8008376:	d007      	beq.n	8008388 <sbrk_aligned+0x38>
 8008378:	1a21      	subs	r1, r4, r0
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f95c 	bl	8008638 <_sbrk_r>
 8008380:	3001      	adds	r0, #1
 8008382:	d101      	bne.n	8008388 <sbrk_aligned+0x38>
 8008384:	f04f 34ff 	mov.w	r4, #4294967295
 8008388:	4620      	mov	r0, r4
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	200043ac 	.word	0x200043ac

08008390 <_malloc_r>:
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	1ccd      	adds	r5, r1, #3
 8008396:	f025 0503 	bic.w	r5, r5, #3
 800839a:	3508      	adds	r5, #8
 800839c:	2d0c      	cmp	r5, #12
 800839e:	bf38      	it	cc
 80083a0:	250c      	movcc	r5, #12
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	4607      	mov	r7, r0
 80083a6:	db01      	blt.n	80083ac <_malloc_r+0x1c>
 80083a8:	42a9      	cmp	r1, r5
 80083aa:	d905      	bls.n	80083b8 <_malloc_r+0x28>
 80083ac:	230c      	movs	r3, #12
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	2600      	movs	r6, #0
 80083b2:	4630      	mov	r0, r6
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b8:	4e2e      	ldr	r6, [pc, #184]	; (8008474 <_malloc_r+0xe4>)
 80083ba:	f000 fbad 	bl	8008b18 <__malloc_lock>
 80083be:	6833      	ldr	r3, [r6, #0]
 80083c0:	461c      	mov	r4, r3
 80083c2:	bb34      	cbnz	r4, 8008412 <_malloc_r+0x82>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7ff ffc2 	bl	8008350 <sbrk_aligned>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	4604      	mov	r4, r0
 80083d0:	d14d      	bne.n	800846e <_malloc_r+0xde>
 80083d2:	6834      	ldr	r4, [r6, #0]
 80083d4:	4626      	mov	r6, r4
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d140      	bne.n	800845c <_malloc_r+0xcc>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	4631      	mov	r1, r6
 80083de:	4638      	mov	r0, r7
 80083e0:	eb04 0803 	add.w	r8, r4, r3
 80083e4:	f000 f928 	bl	8008638 <_sbrk_r>
 80083e8:	4580      	cmp	r8, r0
 80083ea:	d13a      	bne.n	8008462 <_malloc_r+0xd2>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	3503      	adds	r5, #3
 80083f0:	1a6d      	subs	r5, r5, r1
 80083f2:	f025 0503 	bic.w	r5, r5, #3
 80083f6:	3508      	adds	r5, #8
 80083f8:	2d0c      	cmp	r5, #12
 80083fa:	bf38      	it	cc
 80083fc:	250c      	movcc	r5, #12
 80083fe:	4629      	mov	r1, r5
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff ffa5 	bl	8008350 <sbrk_aligned>
 8008406:	3001      	adds	r0, #1
 8008408:	d02b      	beq.n	8008462 <_malloc_r+0xd2>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	442b      	add	r3, r5
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	e00e      	b.n	8008430 <_malloc_r+0xa0>
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	1b52      	subs	r2, r2, r5
 8008416:	d41e      	bmi.n	8008456 <_malloc_r+0xc6>
 8008418:	2a0b      	cmp	r2, #11
 800841a:	d916      	bls.n	800844a <_malloc_r+0xba>
 800841c:	1961      	adds	r1, r4, r5
 800841e:	42a3      	cmp	r3, r4
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	bf18      	it	ne
 8008424:	6059      	strne	r1, [r3, #4]
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	bf08      	it	eq
 800842a:	6031      	streq	r1, [r6, #0]
 800842c:	5162      	str	r2, [r4, r5]
 800842e:	604b      	str	r3, [r1, #4]
 8008430:	4638      	mov	r0, r7
 8008432:	f104 060b 	add.w	r6, r4, #11
 8008436:	f000 fb75 	bl	8008b24 <__malloc_unlock>
 800843a:	f026 0607 	bic.w	r6, r6, #7
 800843e:	1d23      	adds	r3, r4, #4
 8008440:	1af2      	subs	r2, r6, r3
 8008442:	d0b6      	beq.n	80083b2 <_malloc_r+0x22>
 8008444:	1b9b      	subs	r3, r3, r6
 8008446:	50a3      	str	r3, [r4, r2]
 8008448:	e7b3      	b.n	80083b2 <_malloc_r+0x22>
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	42a3      	cmp	r3, r4
 800844e:	bf0c      	ite	eq
 8008450:	6032      	streq	r2, [r6, #0]
 8008452:	605a      	strne	r2, [r3, #4]
 8008454:	e7ec      	b.n	8008430 <_malloc_r+0xa0>
 8008456:	4623      	mov	r3, r4
 8008458:	6864      	ldr	r4, [r4, #4]
 800845a:	e7b2      	b.n	80083c2 <_malloc_r+0x32>
 800845c:	4634      	mov	r4, r6
 800845e:	6876      	ldr	r6, [r6, #4]
 8008460:	e7b9      	b.n	80083d6 <_malloc_r+0x46>
 8008462:	230c      	movs	r3, #12
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4638      	mov	r0, r7
 8008468:	f000 fb5c 	bl	8008b24 <__malloc_unlock>
 800846c:	e7a1      	b.n	80083b2 <_malloc_r+0x22>
 800846e:	6025      	str	r5, [r4, #0]
 8008470:	e7de      	b.n	8008430 <_malloc_r+0xa0>
 8008472:	bf00      	nop
 8008474:	200043a8 	.word	0x200043a8

08008478 <_puts_r>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	460e      	mov	r6, r1
 800847c:	4605      	mov	r5, r0
 800847e:	b118      	cbz	r0, 8008488 <_puts_r+0x10>
 8008480:	6983      	ldr	r3, [r0, #24]
 8008482:	b90b      	cbnz	r3, 8008488 <_puts_r+0x10>
 8008484:	f7ff fe88 	bl	8008198 <__sinit>
 8008488:	69ab      	ldr	r3, [r5, #24]
 800848a:	68ac      	ldr	r4, [r5, #8]
 800848c:	b913      	cbnz	r3, 8008494 <_puts_r+0x1c>
 800848e:	4628      	mov	r0, r5
 8008490:	f7ff fe82 	bl	8008198 <__sinit>
 8008494:	4b2c      	ldr	r3, [pc, #176]	; (8008548 <_puts_r+0xd0>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d120      	bne.n	80084dc <_puts_r+0x64>
 800849a:	686c      	ldr	r4, [r5, #4]
 800849c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849e:	07db      	lsls	r3, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_puts_r+0x36>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	0598      	lsls	r0, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_puts_r+0x36>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f7ff ff38 	bl	800831e <__retarget_lock_acquire_recursive>
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	d51d      	bpl.n	80084f0 <_puts_r+0x78>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	b1db      	cbz	r3, 80084f0 <_puts_r+0x78>
 80084b8:	3e01      	subs	r6, #1
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084c0:	3b01      	subs	r3, #1
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	bb39      	cbnz	r1, 8008516 <_puts_r+0x9e>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da38      	bge.n	800853c <_puts_r+0xc4>
 80084ca:	4622      	mov	r2, r4
 80084cc:	210a      	movs	r1, #10
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f906 	bl	80086e0 <__swbuf_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d011      	beq.n	80084fc <_puts_r+0x84>
 80084d8:	250a      	movs	r5, #10
 80084da:	e011      	b.n	8008500 <_puts_r+0x88>
 80084dc:	4b1b      	ldr	r3, [pc, #108]	; (800854c <_puts_r+0xd4>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d101      	bne.n	80084e6 <_puts_r+0x6e>
 80084e2:	68ac      	ldr	r4, [r5, #8]
 80084e4:	e7da      	b.n	800849c <_puts_r+0x24>
 80084e6:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <_puts_r+0xd8>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	bf08      	it	eq
 80084ec:	68ec      	ldreq	r4, [r5, #12]
 80084ee:	e7d5      	b.n	800849c <_puts_r+0x24>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 f958 	bl	80087a8 <__swsetup_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d0dd      	beq.n	80084b8 <_puts_r+0x40>
 80084fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008502:	07da      	lsls	r2, r3, #31
 8008504:	d405      	bmi.n	8008512 <_puts_r+0x9a>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	059b      	lsls	r3, r3, #22
 800850a:	d402      	bmi.n	8008512 <_puts_r+0x9a>
 800850c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800850e:	f7ff ff07 	bl	8008320 <__retarget_lock_release_recursive>
 8008512:	4628      	mov	r0, r5
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	2b00      	cmp	r3, #0
 8008518:	da04      	bge.n	8008524 <_puts_r+0xac>
 800851a:	69a2      	ldr	r2, [r4, #24]
 800851c:	429a      	cmp	r2, r3
 800851e:	dc06      	bgt.n	800852e <_puts_r+0xb6>
 8008520:	290a      	cmp	r1, #10
 8008522:	d004      	beq.n	800852e <_puts_r+0xb6>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	6022      	str	r2, [r4, #0]
 800852a:	7019      	strb	r1, [r3, #0]
 800852c:	e7c5      	b.n	80084ba <_puts_r+0x42>
 800852e:	4622      	mov	r2, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 f8d5 	bl	80086e0 <__swbuf_r>
 8008536:	3001      	adds	r0, #1
 8008538:	d1bf      	bne.n	80084ba <_puts_r+0x42>
 800853a:	e7df      	b.n	80084fc <_puts_r+0x84>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	250a      	movs	r5, #10
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	701d      	strb	r5, [r3, #0]
 8008546:	e7db      	b.n	8008500 <_puts_r+0x88>
 8008548:	08008d70 	.word	0x08008d70
 800854c:	08008d90 	.word	0x08008d90
 8008550:	08008d50 	.word	0x08008d50

08008554 <puts>:
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <puts+0xc>)
 8008556:	4601      	mov	r1, r0
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f7ff bf8d 	b.w	8008478 <_puts_r>
 800855e:	bf00      	nop
 8008560:	20000010 	.word	0x20000010

08008564 <cleanup_glue>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	6809      	ldr	r1, [r1, #0]
 800856a:	4605      	mov	r5, r0
 800856c:	b109      	cbz	r1, 8008572 <cleanup_glue+0xe>
 800856e:	f7ff fff9 	bl	8008564 <cleanup_glue>
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f000 bad9 	b.w	8008b30 <_free_r>
	...

08008580 <_reclaim_reent>:
 8008580:	4b2c      	ldr	r3, [pc, #176]	; (8008634 <_reclaim_reent+0xb4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4283      	cmp	r3, r0
 8008586:	b570      	push	{r4, r5, r6, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	d051      	beq.n	8008630 <_reclaim_reent+0xb0>
 800858c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800858e:	b143      	cbz	r3, 80085a2 <_reclaim_reent+0x22>
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d14a      	bne.n	800862c <_reclaim_reent+0xac>
 8008596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	b111      	cbz	r1, 80085a2 <_reclaim_reent+0x22>
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fac7 	bl	8008b30 <_free_r>
 80085a2:	6961      	ldr	r1, [r4, #20]
 80085a4:	b111      	cbz	r1, 80085ac <_reclaim_reent+0x2c>
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fac2 	bl	8008b30 <_free_r>
 80085ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085ae:	b111      	cbz	r1, 80085b6 <_reclaim_reent+0x36>
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fabd 	bl	8008b30 <_free_r>
 80085b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085b8:	b111      	cbz	r1, 80085c0 <_reclaim_reent+0x40>
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fab8 	bl	8008b30 <_free_r>
 80085c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80085c2:	b111      	cbz	r1, 80085ca <_reclaim_reent+0x4a>
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fab3 	bl	8008b30 <_free_r>
 80085ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80085cc:	b111      	cbz	r1, 80085d4 <_reclaim_reent+0x54>
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 faae 	bl	8008b30 <_free_r>
 80085d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80085d6:	b111      	cbz	r1, 80085de <_reclaim_reent+0x5e>
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 faa9 	bl	8008b30 <_free_r>
 80085de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085e0:	b111      	cbz	r1, 80085e8 <_reclaim_reent+0x68>
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 faa4 	bl	8008b30 <_free_r>
 80085e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ea:	b111      	cbz	r1, 80085f2 <_reclaim_reent+0x72>
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fa9f 	bl	8008b30 <_free_r>
 80085f2:	69a3      	ldr	r3, [r4, #24]
 80085f4:	b1e3      	cbz	r3, 8008630 <_reclaim_reent+0xb0>
 80085f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085f8:	4620      	mov	r0, r4
 80085fa:	4798      	blx	r3
 80085fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085fe:	b1b9      	cbz	r1, 8008630 <_reclaim_reent+0xb0>
 8008600:	4620      	mov	r0, r4
 8008602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008606:	f7ff bfad 	b.w	8008564 <cleanup_glue>
 800860a:	5949      	ldr	r1, [r1, r5]
 800860c:	b941      	cbnz	r1, 8008620 <_reclaim_reent+0xa0>
 800860e:	3504      	adds	r5, #4
 8008610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008612:	2d80      	cmp	r5, #128	; 0x80
 8008614:	68d9      	ldr	r1, [r3, #12]
 8008616:	d1f8      	bne.n	800860a <_reclaim_reent+0x8a>
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fa89 	bl	8008b30 <_free_r>
 800861e:	e7ba      	b.n	8008596 <_reclaim_reent+0x16>
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fa84 	bl	8008b30 <_free_r>
 8008628:	4631      	mov	r1, r6
 800862a:	e7ef      	b.n	800860c <_reclaim_reent+0x8c>
 800862c:	2500      	movs	r5, #0
 800862e:	e7ef      	b.n	8008610 <_reclaim_reent+0x90>
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010

08008638 <_sbrk_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	; (8008654 <_sbrk_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7f8 fe50 	bl	80012e8 <_sbrk>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_sbrk_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_sbrk_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	200043b0 	.word	0x200043b0

08008658 <__sread>:
 8008658:	b510      	push	{r4, lr}
 800865a:	460c      	mov	r4, r1
 800865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008660:	f000 fab2 	bl	8008bc8 <_read_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	bfab      	itete	ge
 8008668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800866a:	89a3      	ldrhlt	r3, [r4, #12]
 800866c:	181b      	addge	r3, r3, r0
 800866e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008672:	bfac      	ite	ge
 8008674:	6563      	strge	r3, [r4, #84]	; 0x54
 8008676:	81a3      	strhlt	r3, [r4, #12]
 8008678:	bd10      	pop	{r4, pc}

0800867a <__swrite>:
 800867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	461f      	mov	r7, r3
 8008680:	898b      	ldrh	r3, [r1, #12]
 8008682:	05db      	lsls	r3, r3, #23
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	4616      	mov	r6, r2
 800868a:	d505      	bpl.n	8008698 <__swrite+0x1e>
 800868c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008690:	2302      	movs	r3, #2
 8008692:	2200      	movs	r2, #0
 8008694:	f000 f9c8 	bl	8008a28 <_lseek_r>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800869e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	4632      	mov	r2, r6
 80086a6:	463b      	mov	r3, r7
 80086a8:	4628      	mov	r0, r5
 80086aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	f000 b869 	b.w	8008784 <_write_r>

080086b2 <__sseek>:
 80086b2:	b510      	push	{r4, lr}
 80086b4:	460c      	mov	r4, r1
 80086b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ba:	f000 f9b5 	bl	8008a28 <_lseek_r>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	bf15      	itete	ne
 80086c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ce:	81a3      	strheq	r3, [r4, #12]
 80086d0:	bf18      	it	ne
 80086d2:	81a3      	strhne	r3, [r4, #12]
 80086d4:	bd10      	pop	{r4, pc}

080086d6 <__sclose>:
 80086d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086da:	f000 b8d3 	b.w	8008884 <_close_r>
	...

080086e0 <__swbuf_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	460e      	mov	r6, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	4605      	mov	r5, r0
 80086e8:	b118      	cbz	r0, 80086f2 <__swbuf_r+0x12>
 80086ea:	6983      	ldr	r3, [r0, #24]
 80086ec:	b90b      	cbnz	r3, 80086f2 <__swbuf_r+0x12>
 80086ee:	f7ff fd53 	bl	8008198 <__sinit>
 80086f2:	4b21      	ldr	r3, [pc, #132]	; (8008778 <__swbuf_r+0x98>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d12b      	bne.n	8008750 <__swbuf_r+0x70>
 80086f8:	686c      	ldr	r4, [r5, #4]
 80086fa:	69a3      	ldr	r3, [r4, #24]
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	071a      	lsls	r2, r3, #28
 8008702:	d52f      	bpl.n	8008764 <__swbuf_r+0x84>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b36b      	cbz	r3, 8008764 <__swbuf_r+0x84>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1ac0      	subs	r0, r0, r3
 800870e:	6963      	ldr	r3, [r4, #20]
 8008710:	b2f6      	uxtb	r6, r6
 8008712:	4283      	cmp	r3, r0
 8008714:	4637      	mov	r7, r6
 8008716:	dc04      	bgt.n	8008722 <__swbuf_r+0x42>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f948 	bl	80089b0 <_fflush_r>
 8008720:	bb30      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	701e      	strb	r6, [r3, #0]
 8008730:	6963      	ldr	r3, [r4, #20]
 8008732:	3001      	adds	r0, #1
 8008734:	4283      	cmp	r3, r0
 8008736:	d004      	beq.n	8008742 <__swbuf_r+0x62>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	07db      	lsls	r3, r3, #31
 800873c:	d506      	bpl.n	800874c <__swbuf_r+0x6c>
 800873e:	2e0a      	cmp	r6, #10
 8008740:	d104      	bne.n	800874c <__swbuf_r+0x6c>
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f933 	bl	80089b0 <_fflush_r>
 800874a:	b988      	cbnz	r0, 8008770 <__swbuf_r+0x90>
 800874c:	4638      	mov	r0, r7
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <__swbuf_r+0x9c>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <__swbuf_r+0x7a>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7cf      	b.n	80086fa <__swbuf_r+0x1a>
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <__swbuf_r+0xa0>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7ca      	b.n	80086fa <__swbuf_r+0x1a>
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f81e 	bl	80087a8 <__swsetup_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0cb      	beq.n	8008708 <__swbuf_r+0x28>
 8008770:	f04f 37ff 	mov.w	r7, #4294967295
 8008774:	e7ea      	b.n	800874c <__swbuf_r+0x6c>
 8008776:	bf00      	nop
 8008778:	08008d70 	.word	0x08008d70
 800877c:	08008d90 	.word	0x08008d90
 8008780:	08008d50 	.word	0x08008d50

08008784 <_write_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	; (80087a4 <_write_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f8 fd57 	bl	8001246 <_write>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_write_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_write_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	200043b0 	.word	0x200043b0

080087a8 <__swsetup_r>:
 80087a8:	4b32      	ldr	r3, [pc, #200]	; (8008874 <__swsetup_r+0xcc>)
 80087aa:	b570      	push	{r4, r5, r6, lr}
 80087ac:	681d      	ldr	r5, [r3, #0]
 80087ae:	4606      	mov	r6, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	b125      	cbz	r5, 80087be <__swsetup_r+0x16>
 80087b4:	69ab      	ldr	r3, [r5, #24]
 80087b6:	b913      	cbnz	r3, 80087be <__swsetup_r+0x16>
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff fced 	bl	8008198 <__sinit>
 80087be:	4b2e      	ldr	r3, [pc, #184]	; (8008878 <__swsetup_r+0xd0>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d10f      	bne.n	80087e4 <__swsetup_r+0x3c>
 80087c4:	686c      	ldr	r4, [r5, #4]
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087cc:	0719      	lsls	r1, r3, #28
 80087ce:	d42c      	bmi.n	800882a <__swsetup_r+0x82>
 80087d0:	06dd      	lsls	r5, r3, #27
 80087d2:	d411      	bmi.n	80087f8 <__swsetup_r+0x50>
 80087d4:	2309      	movs	r3, #9
 80087d6:	6033      	str	r3, [r6, #0]
 80087d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	f04f 30ff 	mov.w	r0, #4294967295
 80087e2:	e03e      	b.n	8008862 <__swsetup_r+0xba>
 80087e4:	4b25      	ldr	r3, [pc, #148]	; (800887c <__swsetup_r+0xd4>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d101      	bne.n	80087ee <__swsetup_r+0x46>
 80087ea:	68ac      	ldr	r4, [r5, #8]
 80087ec:	e7eb      	b.n	80087c6 <__swsetup_r+0x1e>
 80087ee:	4b24      	ldr	r3, [pc, #144]	; (8008880 <__swsetup_r+0xd8>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	bf08      	it	eq
 80087f4:	68ec      	ldreq	r4, [r5, #12]
 80087f6:	e7e6      	b.n	80087c6 <__swsetup_r+0x1e>
 80087f8:	0758      	lsls	r0, r3, #29
 80087fa:	d512      	bpl.n	8008822 <__swsetup_r+0x7a>
 80087fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fe:	b141      	cbz	r1, 8008812 <__swsetup_r+0x6a>
 8008800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008804:	4299      	cmp	r1, r3
 8008806:	d002      	beq.n	800880e <__swsetup_r+0x66>
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f991 	bl	8008b30 <_free_r>
 800880e:	2300      	movs	r3, #0
 8008810:	6363      	str	r3, [r4, #52]	; 0x34
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	2300      	movs	r3, #0
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f043 0308 	orr.w	r3, r3, #8
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	b94b      	cbnz	r3, 8008842 <__swsetup_r+0x9a>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008838:	d003      	beq.n	8008842 <__swsetup_r+0x9a>
 800883a:	4621      	mov	r1, r4
 800883c:	4630      	mov	r0, r6
 800883e:	f000 f92b 	bl	8008a98 <__smakebuf_r>
 8008842:	89a0      	ldrh	r0, [r4, #12]
 8008844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008848:	f010 0301 	ands.w	r3, r0, #1
 800884c:	d00a      	beq.n	8008864 <__swsetup_r+0xbc>
 800884e:	2300      	movs	r3, #0
 8008850:	60a3      	str	r3, [r4, #8]
 8008852:	6963      	ldr	r3, [r4, #20]
 8008854:	425b      	negs	r3, r3
 8008856:	61a3      	str	r3, [r4, #24]
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	b943      	cbnz	r3, 800886e <__swsetup_r+0xc6>
 800885c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008860:	d1ba      	bne.n	80087d8 <__swsetup_r+0x30>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	0781      	lsls	r1, r0, #30
 8008866:	bf58      	it	pl
 8008868:	6963      	ldrpl	r3, [r4, #20]
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	e7f4      	b.n	8008858 <__swsetup_r+0xb0>
 800886e:	2000      	movs	r0, #0
 8008870:	e7f7      	b.n	8008862 <__swsetup_r+0xba>
 8008872:	bf00      	nop
 8008874:	20000010 	.word	0x20000010
 8008878:	08008d70 	.word	0x08008d70
 800887c:	08008d90 	.word	0x08008d90
 8008880:	08008d50 	.word	0x08008d50

08008884 <_close_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_close_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7f8 fcf5 	bl	800127e <_close>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_close_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_close_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200043b0 	.word	0x200043b0

080088a4 <__sflush_r>:
 80088a4:	898a      	ldrh	r2, [r1, #12]
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	0710      	lsls	r0, r2, #28
 80088ae:	460c      	mov	r4, r1
 80088b0:	d458      	bmi.n	8008964 <__sflush_r+0xc0>
 80088b2:	684b      	ldr	r3, [r1, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc05      	bgt.n	80088c4 <__sflush_r+0x20>
 80088b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc02      	bgt.n	80088c4 <__sflush_r+0x20>
 80088be:	2000      	movs	r0, #0
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	d0f9      	beq.n	80088be <__sflush_r+0x1a>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d0:	682f      	ldr	r7, [r5, #0]
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	d032      	beq.n	800893c <__sflush_r+0x98>
 80088d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	075a      	lsls	r2, r3, #29
 80088dc:	d505      	bpl.n	80088ea <__sflush_r+0x46>
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	1ac0      	subs	r0, r0, r3
 80088e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e4:	b10b      	cbz	r3, 80088ea <__sflush_r+0x46>
 80088e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e8:	1ac0      	subs	r0, r0, r3
 80088ea:	2300      	movs	r3, #0
 80088ec:	4602      	mov	r2, r0
 80088ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b0      	blx	r6
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	d106      	bne.n	800890a <__sflush_r+0x66>
 80088fc:	6829      	ldr	r1, [r5, #0]
 80088fe:	291d      	cmp	r1, #29
 8008900:	d82c      	bhi.n	800895c <__sflush_r+0xb8>
 8008902:	4a2a      	ldr	r2, [pc, #168]	; (80089ac <__sflush_r+0x108>)
 8008904:	40ca      	lsrs	r2, r1
 8008906:	07d6      	lsls	r6, r2, #31
 8008908:	d528      	bpl.n	800895c <__sflush_r+0xb8>
 800890a:	2200      	movs	r2, #0
 800890c:	6062      	str	r2, [r4, #4]
 800890e:	04d9      	lsls	r1, r3, #19
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	d504      	bpl.n	8008920 <__sflush_r+0x7c>
 8008916:	1c42      	adds	r2, r0, #1
 8008918:	d101      	bne.n	800891e <__sflush_r+0x7a>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b903      	cbnz	r3, 8008920 <__sflush_r+0x7c>
 800891e:	6560      	str	r0, [r4, #84]	; 0x54
 8008920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008922:	602f      	str	r7, [r5, #0]
 8008924:	2900      	cmp	r1, #0
 8008926:	d0ca      	beq.n	80088be <__sflush_r+0x1a>
 8008928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892c:	4299      	cmp	r1, r3
 800892e:	d002      	beq.n	8008936 <__sflush_r+0x92>
 8008930:	4628      	mov	r0, r5
 8008932:	f000 f8fd 	bl	8008b30 <_free_r>
 8008936:	2000      	movs	r0, #0
 8008938:	6360      	str	r0, [r4, #52]	; 0x34
 800893a:	e7c1      	b.n	80088c0 <__sflush_r+0x1c>
 800893c:	6a21      	ldr	r1, [r4, #32]
 800893e:	2301      	movs	r3, #1
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	1c41      	adds	r1, r0, #1
 8008946:	d1c7      	bne.n	80088d8 <__sflush_r+0x34>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c4      	beq.n	80088d8 <__sflush_r+0x34>
 800894e:	2b1d      	cmp	r3, #29
 8008950:	d001      	beq.n	8008956 <__sflush_r+0xb2>
 8008952:	2b16      	cmp	r3, #22
 8008954:	d101      	bne.n	800895a <__sflush_r+0xb6>
 8008956:	602f      	str	r7, [r5, #0]
 8008958:	e7b1      	b.n	80088be <__sflush_r+0x1a>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008960:	81a3      	strh	r3, [r4, #12]
 8008962:	e7ad      	b.n	80088c0 <__sflush_r+0x1c>
 8008964:	690f      	ldr	r7, [r1, #16]
 8008966:	2f00      	cmp	r7, #0
 8008968:	d0a9      	beq.n	80088be <__sflush_r+0x1a>
 800896a:	0793      	lsls	r3, r2, #30
 800896c:	680e      	ldr	r6, [r1, #0]
 800896e:	bf08      	it	eq
 8008970:	694b      	ldreq	r3, [r1, #20]
 8008972:	600f      	str	r7, [r1, #0]
 8008974:	bf18      	it	ne
 8008976:	2300      	movne	r3, #0
 8008978:	eba6 0807 	sub.w	r8, r6, r7
 800897c:	608b      	str	r3, [r1, #8]
 800897e:	f1b8 0f00 	cmp.w	r8, #0
 8008982:	dd9c      	ble.n	80088be <__sflush_r+0x1a>
 8008984:	6a21      	ldr	r1, [r4, #32]
 8008986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008988:	4643      	mov	r3, r8
 800898a:	463a      	mov	r2, r7
 800898c:	4628      	mov	r0, r5
 800898e:	47b0      	blx	r6
 8008990:	2800      	cmp	r0, #0
 8008992:	dc06      	bgt.n	80089a2 <__sflush_r+0xfe>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e78e      	b.n	80088c0 <__sflush_r+0x1c>
 80089a2:	4407      	add	r7, r0
 80089a4:	eba8 0800 	sub.w	r8, r8, r0
 80089a8:	e7e9      	b.n	800897e <__sflush_r+0xda>
 80089aa:	bf00      	nop
 80089ac:	20400001 	.word	0x20400001

080089b0 <_fflush_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	4605      	mov	r5, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b913      	cbnz	r3, 80089c0 <_fflush_r+0x10>
 80089ba:	2500      	movs	r5, #0
 80089bc:	4628      	mov	r0, r5
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	b118      	cbz	r0, 80089ca <_fflush_r+0x1a>
 80089c2:	6983      	ldr	r3, [r0, #24]
 80089c4:	b90b      	cbnz	r3, 80089ca <_fflush_r+0x1a>
 80089c6:	f7ff fbe7 	bl	8008198 <__sinit>
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <_fflush_r+0x6c>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	d11b      	bne.n	8008a08 <_fflush_r+0x58>
 80089d0:	686c      	ldr	r4, [r5, #4]
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0ef      	beq.n	80089ba <_fflush_r+0xa>
 80089da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d404      	bmi.n	80089ea <_fflush_r+0x3a>
 80089e0:	0599      	lsls	r1, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_fflush_r+0x3a>
 80089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e6:	f7ff fc9a 	bl	800831e <__retarget_lock_acquire_recursive>
 80089ea:	4628      	mov	r0, r5
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7ff ff59 	bl	80088a4 <__sflush_r>
 80089f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f4:	07da      	lsls	r2, r3, #31
 80089f6:	4605      	mov	r5, r0
 80089f8:	d4e0      	bmi.n	80089bc <_fflush_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	059b      	lsls	r3, r3, #22
 80089fe:	d4dd      	bmi.n	80089bc <_fflush_r+0xc>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f7ff fc8d 	bl	8008320 <__retarget_lock_release_recursive>
 8008a06:	e7d9      	b.n	80089bc <_fflush_r+0xc>
 8008a08:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <_fflush_r+0x70>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d101      	bne.n	8008a12 <_fflush_r+0x62>
 8008a0e:	68ac      	ldr	r4, [r5, #8]
 8008a10:	e7df      	b.n	80089d2 <_fflush_r+0x22>
 8008a12:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <_fflush_r+0x74>)
 8008a14:	429c      	cmp	r4, r3
 8008a16:	bf08      	it	eq
 8008a18:	68ec      	ldreq	r4, [r5, #12]
 8008a1a:	e7da      	b.n	80089d2 <_fflush_r+0x22>
 8008a1c:	08008d70 	.word	0x08008d70
 8008a20:	08008d90 	.word	0x08008d90
 8008a24:	08008d50 	.word	0x08008d50

08008a28 <_lseek_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d07      	ldr	r5, [pc, #28]	; (8008a48 <_lseek_r+0x20>)
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	4608      	mov	r0, r1
 8008a30:	4611      	mov	r1, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	602a      	str	r2, [r5, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f7f8 fc48 	bl	80012cc <_lseek>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_lseek_r+0x1e>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_lseek_r+0x1e>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	200043b0 	.word	0x200043b0

08008a4c <__swhatbuf_r>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	460e      	mov	r6, r1
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	2900      	cmp	r1, #0
 8008a56:	b096      	sub	sp, #88	; 0x58
 8008a58:	4614      	mov	r4, r2
 8008a5a:	461d      	mov	r5, r3
 8008a5c:	da08      	bge.n	8008a70 <__swhatbuf_r+0x24>
 8008a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	602a      	str	r2, [r5, #0]
 8008a66:	061a      	lsls	r2, r3, #24
 8008a68:	d410      	bmi.n	8008a8c <__swhatbuf_r+0x40>
 8008a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6e:	e00e      	b.n	8008a8e <__swhatbuf_r+0x42>
 8008a70:	466a      	mov	r2, sp
 8008a72:	f000 f8bb 	bl	8008bec <_fstat_r>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	dbf1      	blt.n	8008a5e <__swhatbuf_r+0x12>
 8008a7a:	9a01      	ldr	r2, [sp, #4]
 8008a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a84:	425a      	negs	r2, r3
 8008a86:	415a      	adcs	r2, r3
 8008a88:	602a      	str	r2, [r5, #0]
 8008a8a:	e7ee      	b.n	8008a6a <__swhatbuf_r+0x1e>
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	2000      	movs	r0, #0
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	b016      	add	sp, #88	; 0x58
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a98 <__smakebuf_r>:
 8008a98:	898b      	ldrh	r3, [r1, #12]
 8008a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a9c:	079d      	lsls	r5, r3, #30
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	d507      	bpl.n	8008ab4 <__smakebuf_r+0x1c>
 8008aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	6123      	str	r3, [r4, #16]
 8008aac:	2301      	movs	r3, #1
 8008aae:	6163      	str	r3, [r4, #20]
 8008ab0:	b002      	add	sp, #8
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	ab01      	add	r3, sp, #4
 8008ab6:	466a      	mov	r2, sp
 8008ab8:	f7ff ffc8 	bl	8008a4c <__swhatbuf_r>
 8008abc:	9900      	ldr	r1, [sp, #0]
 8008abe:	4605      	mov	r5, r0
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff fc65 	bl	8008390 <_malloc_r>
 8008ac6:	b948      	cbnz	r0, 8008adc <__smakebuf_r+0x44>
 8008ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008acc:	059a      	lsls	r2, r3, #22
 8008ace:	d4ef      	bmi.n	8008ab0 <__smakebuf_r+0x18>
 8008ad0:	f023 0303 	bic.w	r3, r3, #3
 8008ad4:	f043 0302 	orr.w	r3, r3, #2
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7e3      	b.n	8008aa4 <__smakebuf_r+0xc>
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <__smakebuf_r+0x7c>)
 8008ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	9b00      	ldr	r3, [sp, #0]
 8008aec:	6163      	str	r3, [r4, #20]
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	6120      	str	r0, [r4, #16]
 8008af2:	b15b      	cbz	r3, 8008b0c <__smakebuf_r+0x74>
 8008af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 f889 	bl	8008c10 <_isatty_r>
 8008afe:	b128      	cbz	r0, 8008b0c <__smakebuf_r+0x74>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	89a0      	ldrh	r0, [r4, #12]
 8008b0e:	4305      	orrs	r5, r0
 8008b10:	81a5      	strh	r5, [r4, #12]
 8008b12:	e7cd      	b.n	8008ab0 <__smakebuf_r+0x18>
 8008b14:	08008131 	.word	0x08008131

08008b18 <__malloc_lock>:
 8008b18:	4801      	ldr	r0, [pc, #4]	; (8008b20 <__malloc_lock+0x8>)
 8008b1a:	f7ff bc00 	b.w	800831e <__retarget_lock_acquire_recursive>
 8008b1e:	bf00      	nop
 8008b20:	200043a4 	.word	0x200043a4

08008b24 <__malloc_unlock>:
 8008b24:	4801      	ldr	r0, [pc, #4]	; (8008b2c <__malloc_unlock+0x8>)
 8008b26:	f7ff bbfb 	b.w	8008320 <__retarget_lock_release_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200043a4 	.word	0x200043a4

08008b30 <_free_r>:
 8008b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b32:	2900      	cmp	r1, #0
 8008b34:	d044      	beq.n	8008bc0 <_free_r+0x90>
 8008b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3a:	9001      	str	r0, [sp, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b42:	bfb8      	it	lt
 8008b44:	18e4      	addlt	r4, r4, r3
 8008b46:	f7ff ffe7 	bl	8008b18 <__malloc_lock>
 8008b4a:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <_free_r+0x94>)
 8008b4c:	9801      	ldr	r0, [sp, #4]
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	b933      	cbnz	r3, 8008b60 <_free_r+0x30>
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	6014      	str	r4, [r2, #0]
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b5c:	f7ff bfe2 	b.w	8008b24 <__malloc_unlock>
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d908      	bls.n	8008b76 <_free_r+0x46>
 8008b64:	6825      	ldr	r5, [r4, #0]
 8008b66:	1961      	adds	r1, r4, r5
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf01      	itttt	eq
 8008b6c:	6819      	ldreq	r1, [r3, #0]
 8008b6e:	685b      	ldreq	r3, [r3, #4]
 8008b70:	1949      	addeq	r1, r1, r5
 8008b72:	6021      	streq	r1, [r4, #0]
 8008b74:	e7ed      	b.n	8008b52 <_free_r+0x22>
 8008b76:	461a      	mov	r2, r3
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b10b      	cbz	r3, 8008b80 <_free_r+0x50>
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d9fa      	bls.n	8008b76 <_free_r+0x46>
 8008b80:	6811      	ldr	r1, [r2, #0]
 8008b82:	1855      	adds	r5, r2, r1
 8008b84:	42a5      	cmp	r5, r4
 8008b86:	d10b      	bne.n	8008ba0 <_free_r+0x70>
 8008b88:	6824      	ldr	r4, [r4, #0]
 8008b8a:	4421      	add	r1, r4
 8008b8c:	1854      	adds	r4, r2, r1
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	d1e0      	bne.n	8008b56 <_free_r+0x26>
 8008b94:	681c      	ldr	r4, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6053      	str	r3, [r2, #4]
 8008b9a:	4421      	add	r1, r4
 8008b9c:	6011      	str	r1, [r2, #0]
 8008b9e:	e7da      	b.n	8008b56 <_free_r+0x26>
 8008ba0:	d902      	bls.n	8008ba8 <_free_r+0x78>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	e7d6      	b.n	8008b56 <_free_r+0x26>
 8008ba8:	6825      	ldr	r5, [r4, #0]
 8008baa:	1961      	adds	r1, r4, r5
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf04      	itt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	bf04      	itt	eq
 8008bb8:	1949      	addeq	r1, r1, r5
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	6054      	str	r4, [r2, #4]
 8008bbe:	e7ca      	b.n	8008b56 <_free_r+0x26>
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bd30      	pop	{r4, r5, pc}
 8008bc4:	200043a8 	.word	0x200043a8

08008bc8 <_read_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	; (8008be8 <_read_r+0x20>)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f7f8 fb18 	bl	800120c <_read>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_read_r+0x1e>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_read_r+0x1e>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	200043b0 	.word	0x200043b0

08008bec <_fstat_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d07      	ldr	r5, [pc, #28]	; (8008c0c <_fstat_r+0x20>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	f7f8 fb4c 	bl	8001296 <_fstat>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	d102      	bne.n	8008c08 <_fstat_r+0x1c>
 8008c02:	682b      	ldr	r3, [r5, #0]
 8008c04:	b103      	cbz	r3, 8008c08 <_fstat_r+0x1c>
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200043b0 	.word	0x200043b0

08008c10 <_isatty_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d06      	ldr	r5, [pc, #24]	; (8008c2c <_isatty_r+0x1c>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7f8 fb4b 	bl	80012b6 <_isatty>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_isatty_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_isatty_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	200043b0 	.word	0x200043b0

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
