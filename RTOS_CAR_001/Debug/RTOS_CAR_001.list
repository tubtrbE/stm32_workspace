
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800972c  0800972c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009734  08009734  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004394  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004408  20004408  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f07c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004659  00000000  00000000  0003f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  00043780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  000450a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288a5  00000000  00000000  000467f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f65a  00000000  00000000  0006f095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed56a  00000000  00000000  0008e6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bc59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dc8  00000000  00000000  0017bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009390 	.word	0x08009390

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009390 	.word	0x08009390

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 800050c:	1d39      	adds	r1, r7, #4
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <__io_putchar+0x20>)
 8000516:	f004 ffce 	bl	80054b6 <HAL_UART_Transmit>
    return ch;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000618 	.word	0x20000618

08000528 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000fc 	.word	0x200000fc
 8000558:	200001b0 	.word	0x200001b0

0800055c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b0c6      	sub	sp, #280	; 0x118
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  Motor_Init();
 8000562:	f000 ff4f 	bl	8001404 <Motor_Init>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000566:	2100      	movs	r1, #0
 8000568:	488b      	ldr	r0, [pc, #556]	; (8000798 <MX_FREERTOS_Init+0x23c>)
 800056a:	f003 fdd5 	bl	8004118 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	488a      	ldr	r0, [pc, #552]	; (800079c <MX_FREERTOS_Init+0x240>)
 8000572:	f003 fdd1 	bl	8004118 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4889      	ldr	r0, [pc, #548]	; (80007a0 <MX_FREERTOS_Init+0x244>)
 800057a:	f003 fdcd 	bl	8004118 <HAL_TIM_IC_Start_IT>
	  HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 800057e:	2201      	movs	r2, #1
 8000580:	4988      	ldr	r1, [pc, #544]	; (80007a4 <MX_FREERTOS_Init+0x248>)
 8000582:	4889      	ldr	r0, [pc, #548]	; (80007a8 <MX_FREERTOS_Init+0x24c>)
 8000584:	f005 f829 	bl	80055da <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000588:	2300      	movs	r3, #0
 800058a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 8000594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f006 f835 	bl	800660a <osSemaphoreCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a82      	ldr	r2, [pc, #520]	; (80007ac <MX_FREERTOS_Init+0x250>)
 80005a4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 8, uint8_t);
 80005a6:	4b82      	ldr	r3, [pc, #520]	; (80007b0 <MX_FREERTOS_Init+0x254>)
 80005a8:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80005ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 80005b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 f858 	bl	800666e <osMessageCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a7c      	ldr	r2, [pc, #496]	; (80007b4 <MX_FREERTOS_Init+0x258>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c4:	4b7c      	ldr	r3, [pc, #496]	; (80007b8 <MX_FREERTOS_Init+0x25c>)
 80005c6:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 ffb3 	bl	800654a <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a75      	ldr	r2, [pc, #468]	; (80007bc <MX_FREERTOS_Init+0x260>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(UartCheck, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <MX_FREERTOS_Init+0x264>)
 80005ec:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(UartCheck), NULL);
 80005fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 ffa0 	bl	800654a <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a6d      	ldr	r2, [pc, #436]	; (80007c4 <MX_FREERTOS_Init+0x268>)
 800060e:	6013      	str	r3, [r2, #0]
  if(!Task1Handle)
 8000610:	4b6c      	ldr	r3, [pc, #432]	; (80007c4 <MX_FREERTOS_Init+0x268>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <MX_FREERTOS_Init+0xc2>
	  printf("ERR : Console Task Creation Failure !\r\n");
 8000618:	486b      	ldr	r0, [pc, #428]	; (80007c8 <MX_FREERTOS_Init+0x26c>)
 800061a:	f008 fb4b 	bl	8008cb4 <puts>

  osThreadDef(UartTask, UartMovingCar, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <MX_FREERTOS_Init+0x270>)
 8000620:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(UartTask), NULL);
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 ff86 	bl	800654a <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a63      	ldr	r2, [pc, #396]	; (80007d0 <MX_FREERTOS_Init+0x274>)
 8000642:	6013      	str	r3, [r2, #0]

  if(!Task2Handle)
 8000644:	4b62      	ldr	r3, [pc, #392]	; (80007d0 <MX_FREERTOS_Init+0x274>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <MX_FREERTOS_Init+0xf6>
     printf("ERR : CLI Task Creation Failure !\r\n");
 800064c:	4861      	ldr	r0, [pc, #388]	; (80007d4 <MX_FREERTOS_Init+0x278>)
 800064e:	f008 fb31 	bl	8008cb4 <puts>

  // HC-SR04 LEFT -------------------------------------------------------------------------------------------------------
  osThreadDef(LeftCheck, CheckingLeft, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000652:	4b61      	ldr	r3, [pc, #388]	; (80007d8 <MX_FREERTOS_Init+0x27c>)
 8000654:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Left_Checking = osThreadCreate(osThread(LeftCheck), NULL);
 8000666:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f005 ff6c 	bl	800654a <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a59      	ldr	r2, [pc, #356]	; (80007dc <MX_FREERTOS_Init+0x280>)
 8000676:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Left_Checking)
 8000678:	4b58      	ldr	r3, [pc, #352]	; (80007dc <MX_FREERTOS_Init+0x280>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <MX_FREERTOS_Init+0x12a>
	  printf("ERR : HS_SR04_left_Checking Creation Failure !\r\n");
 8000680:	4857      	ldr	r0, [pc, #348]	; (80007e0 <MX_FREERTOS_Init+0x284>)
 8000682:	f008 fb17 	bl	8008cb4 <puts>

  osThreadDef(LeftTask, CarLeftSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000686:	4b57      	ldr	r3, [pc, #348]	; (80007e4 <MX_FREERTOS_Init+0x288>)
 8000688:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Left_Handle = osThreadCreate(osThread(LeftTask), NULL);
 800069a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 ff52 	bl	800654a <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a4f      	ldr	r2, [pc, #316]	; (80007e8 <MX_FREERTOS_Init+0x28c>)
 80006aa:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Left_Handle)
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <MX_FREERTOS_Init+0x28c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d102      	bne.n	80006ba <MX_FREERTOS_Init+0x15e>
	  printf("ERR : HS_SR04_left_Handle Creation Failure !\r\n");
 80006b4:	484d      	ldr	r0, [pc, #308]	; (80007ec <MX_FREERTOS_Init+0x290>)
 80006b6:	f008 fafd 	bl	8008cb4 <puts>

  // HC-SR04 FRONT -------------------------------------------------------------------------------------------------------
  osThreadDef(FrontCheck, CheckingFront, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80006ba:	4b4d      	ldr	r3, [pc, #308]	; (80007f0 <MX_FREERTOS_Init+0x294>)
 80006bc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Front_Checking = osThreadCreate(osThread(FrontCheck), NULL);
 80006ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 ff38 	bl	800654a <osThreadCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a45      	ldr	r2, [pc, #276]	; (80007f4 <MX_FREERTOS_Init+0x298>)
 80006de:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Front_Checking)
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <MX_FREERTOS_Init+0x298>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <MX_FREERTOS_Init+0x192>
	  printf("ERR : HS_SR04_Front_Checking Creation Failure !\r\n");
 80006e8:	4843      	ldr	r0, [pc, #268]	; (80007f8 <MX_FREERTOS_Init+0x29c>)
 80006ea:	f008 fae3 	bl	8008cb4 <puts>

  osThreadDef(FrontTask, CarFrontSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <MX_FREERTOS_Init+0x2a0>)
 80006f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Front_Handle = osThreadCreate(osThread(FrontTask), NULL);
 8000702:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f005 ff1e 	bl	800654a <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a3b      	ldr	r2, [pc, #236]	; (8000800 <MX_FREERTOS_Init+0x2a4>)
 8000712:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Front_Handle)
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <MX_FREERTOS_Init+0x2a4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <MX_FREERTOS_Init+0x1c6>
	  printf("ERR : HS_SR04_Front_Handle Creation Failure !\r\n");
 800071c:	4839      	ldr	r0, [pc, #228]	; (8000804 <MX_FREERTOS_Init+0x2a8>)
 800071e:	f008 fac9 	bl	8008cb4 <puts>

  // HC-SR04 RIGHT -------------------------------------------------------------------------------------------------------
  osThreadDef(RightCheck, CheckingRight, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_FREERTOS_Init+0x2ac>)
 8000724:	f107 0420 	add.w	r4, r7, #32
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Right_Checking = osThreadCreate(osThread(RightCheck), NULL);
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f005 ff04 	bl	800654a <osThreadCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a31      	ldr	r2, [pc, #196]	; (800080c <MX_FREERTOS_Init+0x2b0>)
 8000746:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Right_Checking)
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_FREERTOS_Init+0x2b0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <MX_FREERTOS_Init+0x1fa>
	  printf("ERR : HS_SR04_Right_Checking Creation Failure !\r\n");
 8000750:	482f      	ldr	r0, [pc, #188]	; (8000810 <MX_FREERTOS_Init+0x2b4>)
 8000752:	f008 faaf 	bl	8008cb4 <puts>

  osThreadDef(RightTask, CarRightSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000756:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800075a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <MX_FREERTOS_Init+0x2b8>)
 8000760:	461c      	mov	r4, r3
 8000762:	4615      	mov	r5, r2
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HS_SR04_Right_Handle = osThreadCreate(osThread(RightTask), NULL);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fee8 	bl	800654a <osThreadCreate>
 800077a:	4603      	mov	r3, r0
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <MX_FREERTOS_Init+0x2bc>)
 800077e:	6013      	str	r3, [r2, #0]
  if(!HS_SR04_Right_Handle)
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_FREERTOS_Init+0x2bc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <MX_FREERTOS_Init+0x232>
	  printf("ERR : HS_SR04_Right_Handle Creation Failure !\r\n");
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <MX_FREERTOS_Init+0x2c0>)
 800078a:	f008 fa93 	bl	8008cb4 <puts>


  /* USER CODE END RTOS_THREADS */

}
 800078e:	bf00      	nop
 8000790:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000794:	46bd      	mov	sp, r7
 8000796:	bdb0      	pop	{r4, r5, r7, pc}
 8000798:	20000470 	.word	0x20000470
 800079c:	20000500 	.word	0x20000500
 80007a0:	20000548 	.word	0x20000548
 80007a4:	200000ec 	.word	0x200000ec
 80007a8:	2000065c 	.word	0x2000065c
 80007ac:	200000f8 	.word	0x200000f8
 80007b0:	08009588 	.word	0x08009588
 80007b4:	200000f4 	.word	0x200000f4
 80007b8:	08009598 	.word	0x08009598
 80007bc:	200000f0 	.word	0x200000f0
 80007c0:	080095b4 	.word	0x080095b4
 80007c4:	20000090 	.word	0x20000090
 80007c8:	08009414 	.word	0x08009414
 80007cc:	080095d0 	.word	0x080095d0
 80007d0:	20000094 	.word	0x20000094
 80007d4:	0800943c 	.word	0x0800943c
 80007d8:	080095ec 	.word	0x080095ec
 80007dc:	200000d4 	.word	0x200000d4
 80007e0:	08009460 	.word	0x08009460
 80007e4:	08009608 	.word	0x08009608
 80007e8:	200000e0 	.word	0x200000e0
 80007ec:	08009490 	.word	0x08009490
 80007f0:	08009624 	.word	0x08009624
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	080094c0 	.word	0x080094c0
 80007fc:	08009640 	.word	0x08009640
 8000800:	200000e4 	.word	0x200000e4
 8000804:	080094f4 	.word	0x080094f4
 8000808:	0800965c 	.word	0x0800965c
 800080c:	200000dc 	.word	0x200000dc
 8000810:	08009524 	.word	0x08009524
 8000814:	08009678 	.word	0x08009678
 8000818:	200000e8 	.word	0x200000e8
 800081c:	08009558 	.word	0x08009558

08000820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0'; // this value is what you receive
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <StartDefaultTask+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f107 0210 	add.w	r2, r7, #16
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 fb52 	bl	8006ee8 <xQueueReceiveFromISR>
 8000844:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d112      	bne.n	8000872 <StartDefaultTask+0x52>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <StartDefaultTask+0x60>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 010f 	add.w	r1, r7, #15
 8000858:	4618      	mov	r0, r3
 800085a:	f006 fb45 	bl	8006ee8 <xQueueReceiveFromISR>
 800085e:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <StartDefaultTask+0x52>
				// do something . . .
				Move(cByteRxed - '0');
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	3b30      	subs	r3, #48	; 0x30
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fbeb 	bl	8001048 <Move>
			}
		}
		osDelay(50);
 8000872:	2032      	movs	r0, #50	; 0x32
 8000874:	f005 feb5 	bl	80065e2 <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000878:	e7dc      	b.n	8000834 <StartDefaultTask+0x14>
 800087a:	bf00      	nop
 800087c:	200000f8 	.word	0x200000f8
 8000880:	200000f4 	.word	0x200000f4

08000884 <UartMovingCar>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// Task ---------------------------------------------------------------------------------------
void UartMovingCar (void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(50);
 800088c:	2032      	movs	r0, #50	; 0x32
 800088e:	f005 fea8 	bl	80065e2 <osDelay>
 8000892:	e7fb      	b.n	800088c <UartMovingCar+0x8>

08000894 <CarLeftSide>:
	}
}

void CarLeftSide (void const * argument){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(50);
 800089c:	2032      	movs	r0, #50	; 0x32
 800089e:	f005 fea0 	bl	80065e2 <osDelay>
 80008a2:	e7fb      	b.n	800089c <CarLeftSide+0x8>

080008a4 <CarFrontSide>:
	}
}

void CarFrontSide (void const * argument){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(50);
 80008ac:	2032      	movs	r0, #50	; 0x32
 80008ae:	f005 fe98 	bl	80065e2 <osDelay>
 80008b2:	e7fb      	b.n	80008ac <CarFrontSide+0x8>

080008b4 <CarRightSide>:
	}
}
void CarRightSide (void const * argument){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(50);
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f005 fe90 	bl	80065e2 <osDelay>
 80008c2:	e7fb      	b.n	80008bc <CarRightSide+0x8>

080008c4 <CheckingUartReceive>:


// ISR Checking-------------------------------------------------------------------------------

void CheckingUartReceive (void const * argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	4904      	ldr	r1, [pc, #16]	; (80008e0 <CheckingUartReceive+0x1c>)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <CheckingUartReceive+0x20>)
 80008d2:	f004 fe82 	bl	80055da <HAL_UART_Receive_IT>
    	osDelay(10);
 80008d6:	200a      	movs	r0, #10
 80008d8:	f005 fe83 	bl	80065e2 <osDelay>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80008dc:	e7f6      	b.n	80008cc <CheckingUartReceive+0x8>
 80008de:	bf00      	nop
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	2000065c 	.word	0x2000065c

080008e8 <CheckingLeft>:
    }
}
void CheckingLeft (void const * argument) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 80008f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f4:	4903      	ldr	r1, [pc, #12]	; (8000904 <CheckingLeft+0x1c>)
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <CheckingLeft+0x20>)
 80008f8:	f000 f844 	bl	8000984 <HCSR04_Read>

    	osDelay(60);
 80008fc:	203c      	movs	r0, #60	; 0x3c
 80008fe:	f005 fe70 	bl	80065e2 <osDelay>
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 8000902:	e7f5      	b.n	80008f0 <CheckingLeft+0x8>
 8000904:	40021400 	.word	0x40021400
 8000908:	20000470 	.word	0x20000470

0800090c <CheckingFront>:
    }
}
void CheckingFront (void const * argument) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
   	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 8000914:	2220      	movs	r2, #32
 8000916:	4904      	ldr	r1, [pc, #16]	; (8000928 <CheckingFront+0x1c>)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <CheckingFront+0x20>)
 800091a:	f000 f833 	bl	8000984 <HCSR04_Read>
    	osDelay(60);
 800091e:	203c      	movs	r0, #60	; 0x3c
 8000920:	f005 fe5f 	bl	80065e2 <osDelay>
   	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 8000924:	e7f6      	b.n	8000914 <CheckingFront+0x8>
 8000926:	bf00      	nop
 8000928:	40020000 	.word	0x40020000
 800092c:	20000500 	.word	0x20000500

08000930 <CheckingRight>:
    }
}
void CheckingRight (void const * argument) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093c:	4903      	ldr	r1, [pc, #12]	; (800094c <CheckingRight+0x1c>)
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <CheckingRight+0x20>)
 8000940:	f000 f820 	bl	8000984 <HCSR04_Read>
    	osDelay(60);
 8000944:	203c      	movs	r0, #60	; 0x3c
 8000946:	f005 fe4c 	bl	80065e2 <osDelay>
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 800094a:	e7f5      	b.n	8000938 <CheckingRight+0x8>
 800094c:	40020c00 	.word	0x40020c00
 8000950:	20000548 	.word	0x20000548

08000954 <delay>:
    }
}

void delay (uint16_t time, TIM_HandleTypeDef *htim)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim) < time);
 8000968:	bf00      	nop
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3f9      	bcc.n	800096a <delay+0x16>

}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <HCSR04_Read>:

void HCSR04_Read (TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);	// pull the TRIG pin HIGH
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f001 ffa3 	bl	80028e4 <HAL_GPIO_WritePin>
	delay(10, htim);  // wait for 10 us
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	200a      	movs	r0, #10
 80009a2:	f7ff ffd7 	bl	8000954 <delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);  // pull the TRIG pin low
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f001 ff99 	bl	80028e4 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1); // enable Interrupt
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f042 0202 	orr.w	r2, r2, #2
 80009c0:	60da      	str	r2, [r3, #12]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_UART_RxCpltCallback>:


// CallBack Session
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_RxCpltCallback+0x70>)
 80009d6:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 80009d8:	2301      	movs	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <HAL_UART_RxCpltCallback+0x74>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d124      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_UART_RxCpltCallback+0x78>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	f107 020c 	add.w	r2, r7, #12
 80009f2:	2300      	movs	r3, #0
 80009f4:	4914      	ldr	r1, [pc, #80]	; (8000a48 <HAL_UART_RxCpltCallback+0x7c>)
 80009f6:	f006 f94f 	bl	8006c98 <xQueueGenericSendFromISR>
 80009fa:	6138      	str	r0, [r7, #16]
		if(ret) {
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d008      	beq.n	8000a14 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_UART_RxCpltCallback+0x80>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f107 020c 	add.w	r2, r7, #12
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f006 f9de 	bl	8006dce <xQueueGiveFromISR>
 8000a12:	e00a      	b.n	8000a2a <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f7ff fbeb 	bl	80001f0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a22:	6979      	ldr	r1, [r7, #20]
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <HAL_UART_RxCpltCallback+0x84>)
 8000a26:	f004 fd46 	bl	80054b6 <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <HAL_UART_RxCpltCallback+0x7c>)
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x84>)
 8000a30:	f004 fdd3 	bl	80055da <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08009694 	.word	0x08009694
 8000a40:	40011400 	.word	0x40011400
 8000a44:	200000f4 	.word	0x200000f4
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	200000f8 	.word	0x200000f8
 8000a50:	2000065c 	.word	0x2000065c

08000a54 <HC_SRO4_Dis>:

// calculate the distance of HC_SR04
void HC_SRO4_Dis(TIM_HandleTypeDef *htim, int num) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]

	if (Is_First_Captured[num] == 0) // if the first rising edge is not captured
 8000a5e:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <HC_SRO4_Dis+0xf8>)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d113      	bne.n	8000a92 <HC_SRO4_Dis+0x3e>
	{
		Is_First_Captured[num] = 1;  // set the first captured as true
 8000a6a:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <HC_SRO4_Dis+0xf8>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		IC_Val1[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000a74:	2100      	movs	r1, #0
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f003 ffa4 	bl	80049c4 <HAL_TIM_ReadCapturedValue>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	4934      	ldr	r1, [pc, #208]	; (8000b50 <HC_SRO4_Dis+0xfc>)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		IC_Val1[num] = htim->Instance->CNT; // read the first value
		IC_Val2[num] = 0;
 8000a86:	4a33      	ldr	r2, [pc, #204]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Is_First_Captured[num] = 0; // set it back to false

		//htim is address
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
	}
}
 8000a90:	e057      	b.n	8000b42 <HC_SRO4_Dis+0xee>
		IC_Val2[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a92:	2100      	movs	r1, #0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f003 ff95 	bl	80049c4 <HAL_TIM_ReadCapturedValue>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	492d      	ldr	r1, [pc, #180]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (IC_Val2[num] > IC_Val1[num])
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aac:	4928      	ldr	r1, [pc, #160]	; (8000b50 <HC_SRO4_Dis+0xfc>)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d90d      	bls.n	8000ad4 <HC_SRO4_Dis+0x80>
			Difference[num] = IC_Val2[num]-IC_Val1[num];
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac0:	4923      	ldr	r1, [pc, #140]	; (8000b50 <HC_SRO4_Dis+0xfc>)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac8:	1ad2      	subs	r2, r2, r3
 8000aca:	4923      	ldr	r1, [pc, #140]	; (8000b58 <HC_SRO4_Dis+0x104>)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ad2:	e019      	b.n	8000b08 <HC_SRO4_Dis+0xb4>
		else if (IC_Val1[num] > IC_Val2[num])
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HC_SRO4_Dis+0xfc>)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000adc:	491d      	ldr	r1, [pc, #116]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d90f      	bls.n	8000b08 <HC_SRO4_Dis+0xb4>
			Difference[num] = (0xffff + IC_Val2[num]) - IC_Val1[num];
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HC_SRO4_Dis+0x100>)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af0:	4917      	ldr	r1, [pc, #92]	; (8000b50 <HC_SRO4_Dis+0xfc>)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000afe:	33ff      	adds	r3, #255	; 0xff
 8000b00:	4915      	ldr	r1, [pc, #84]	; (8000b58 <HC_SRO4_Dis+0x104>)
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		Distance[num] = Difference[num]*340/2000;
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <HC_SRO4_Dis+0x104>)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000b14:	fb02 f303 	mul.w	r3, r2, r3
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HC_SRO4_Dis+0x108>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	09da      	lsrs	r2, r3, #7
 8000b20:	490f      	ldr	r1, [pc, #60]	; (8000b60 <HC_SRO4_Dis+0x10c>)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Is_First_Captured[num] = 0; // set it back to false
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HC_SRO4_Dis+0xf8>)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0202 	bic.w	r2, r2, #2
 8000b40:	60da      	str	r2, [r3, #12]
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	20000098 	.word	0x20000098
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	10624dd3 	.word	0x10624dd3
 8000b60:	200000bc 	.word	0x200000bc

08000b64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d107      	bne.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x22>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7f1b      	ldrb	r3, [r3, #28]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d103      	bne.n	8000b86 <HAL_TIM_IC_CaptureCallback+0x22>
		{
			HC_SRO4_Dis(htim, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff67 	bl	8000a54 <HC_SRO4_Dis>
		}
	}
	if (htim->Instance == TIM3) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d107      	bne.n	8000ba0 <HAL_TIM_IC_CaptureCallback+0x3c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7f1b      	ldrb	r3, [r3, #28]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d103      	bne.n	8000ba0 <HAL_TIM_IC_CaptureCallback+0x3c>
		{
			HC_SRO4_Dis(htim, 1);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff5a 	bl	8000a54 <HC_SRO4_Dis>
		}
	}
	if (htim->Instance == TIM4) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x68>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d107      	bne.n	8000bba <HAL_TIM_IC_CaptureCallback+0x56>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7f1b      	ldrb	r3, [r3, #28]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d103      	bne.n	8000bba <HAL_TIM_IC_CaptureCallback+0x56>
		{
			HC_SRO4_Dis(htim, 2);
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff4d 	bl	8000a54 <HC_SRO4_Dis>
		}
	}
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a5c      	ldr	r2, [pc, #368]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a55      	ldr	r2, [pc, #340]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a4e      	ldr	r2, [pc, #312]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x1ac>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 510e 	mov.w	r1, #9088	; 0x2380
 8000cb0:	4833      	ldr	r0, [pc, #204]	; (8000d80 <MX_GPIO_Init+0x1b0>)
 8000cb2:	f001 fe17 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4832      	ldr	r0, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x1b4>)
 8000cbc:	f001 fe12 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cc6:	4830      	ldr	r0, [pc, #192]	; (8000d88 <MX_GPIO_Init+0x1b8>)
 8000cc8:	f001 fe0c 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2102      	movs	r1, #2
 8000cd0:	482e      	ldr	r0, [pc, #184]	; (8000d8c <MX_GPIO_Init+0x1bc>)
 8000cd2:	f001 fe07 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	482c      	ldr	r0, [pc, #176]	; (8000d90 <MX_GPIO_Init+0x1c0>)
 8000cde:	f001 fe01 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000ce2:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4821      	ldr	r0, [pc, #132]	; (8000d80 <MX_GPIO_Init+0x1b0>)
 8000cfc:	f001 fc46 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d00:	2320      	movs	r3, #32
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481b      	ldr	r0, [pc, #108]	; (8000d84 <MX_GPIO_Init+0x1b4>)
 8000d18:	f001 fc38 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000d1c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x1b8>)
 8000d36:	f001 fc29 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x1bc>)
 8000d52:	f001 fc1b 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x1c0>)
 8000d70:	f001 fc0c 	bl	800258c <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40021400 	.word	0x40021400
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_I2C1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <MX_I2C1_Init+0x7c>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000dd2:	f001 fda1 	bl	8002918 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f92e 	bl	800103c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000de4:	f001 fedc 	bl	8002ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dee:	f000 f925 	bl	800103c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x74>)
 8000df6:	f001 ff0f 	bl	8002c18 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 f91c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200003b0 	.word	0x200003b0
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	000186a0 	.word	0x000186a0

08000e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_I2C_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12c      	bne.n	8000e90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <HAL_I2C_MspInit+0x8c>)
 8000e70:	f001 fb8c 	bl	800258c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_I2C_MspInit+0x88>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f001 f9ba 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f81e 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f7ff fe8e 	bl	8000bd0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000eb4:	f000 fac2 	bl	800143c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000eb8:	f000 ffe8 	bl	8001e8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ebc:	f001 f810 	bl	8001ee0 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8000ec0:	f000 ffba 	bl	8001e38 <MX_UART7_Init>
  MX_I2C1_Init();
 8000ec4:	f7ff ff66 	bl	8000d94 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ec8:	f000 fd1e 	bl	8001908 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000ecc:	f001 f832 	bl	8001f34 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000ed0:	f000 fca6 	bl	8001820 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ed4:	f000 fdae 	bl	8001a34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ed8:	f000 fe1c 	bl	8001b14 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000edc:	f000 f878 	bl	8000fd0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ee0:	f7ff fb3c 	bl	800055c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ee4:	f005 fb2a 	bl	800653c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x44>
	...

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fdcf 	bl	8008a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <SystemClock_Config+0xdc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <SystemClock_Config+0xdc>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <SystemClock_Config+0xdc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemClock_Config+0xe0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <SystemClock_Config+0xe0>)
 8000f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <SystemClock_Config+0xe0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	2310      	movs	r3, #16
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f60:	2308      	movs	r3, #8
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f64:	23b4      	movs	r3, #180	; 0xb4
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fedf 	bl	8002d38 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f80:	f000 f85c 	bl	800103c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f84:	f001 fe88 	bl	8002c98 <HAL_PWREx_EnableOverDrive>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f8e:	f000 f855 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2105      	movs	r1, #5
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 f939 	bl	8003228 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fbc:	f000 f83e 	bl	800103c <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	; 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	2047      	movs	r0, #71	; 0x47
 8000fda:	f001 fa1b 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000fde:	2047      	movs	r0, #71	; 0x47
 8000fe0:	f001 fa34 	bl	800244c <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	201b      	movs	r0, #27
 8000fea:	f001 fa13 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fee:	201b      	movs	r0, #27
 8000ff0:	f001 fa2c 	bl	800244c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	f001 fa0b 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffe:	201d      	movs	r0, #29
 8001000:	f001 fa24 	bl	800244c <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2105      	movs	r1, #5
 8001008:	201e      	movs	r0, #30
 800100a:	f001 fa03 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800100e:	201e      	movs	r0, #30
 8001010:	f001 fa1c 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102a:	f001 f91b 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000c00 	.word	0x40000c00

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <Move>:
 *  Created on: Jun 30, 2022
 *      Author: cjhno
 */
#include "motor.h"

void Move(int controlcmd){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b06      	cmp	r3, #6
 8001054:	f200 8097 	bhi.w	8001186 <Move+0x13e>
 8001058:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <Move+0x18>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001161 	.word	0x08001161
 8001064:	0800107d 	.word	0x0800107d
 8001068:	080010ef 	.word	0x080010ef
 800106c:	080010a3 	.word	0x080010a3
 8001070:	080010c9 	.word	0x080010c9
 8001074:	08001115 	.word	0x08001115
 8001078:	0800113b 	.word	0x0800113b
		case FORWARD:
			Forward();
 800107c:	f000 f88c 	bl	8001198 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2101      	movs	r1, #1
 8001084:	4843      	ldr	r0, [pc, #268]	; (8001194 <Move+0x14c>)
 8001086:	f001 fc2d 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4841      	ldr	r0, [pc, #260]	; (8001194 <Move+0x14c>)
 8001090:	f001 fc28 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <Move+0x14c>)
 800109c:	f001 fc22 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 80010a0:	e074      	b.n	800118c <Move+0x144>
		case BACKWARD:
			Backward();
 80010a2:	f000 f8a9 	bl	80011f8 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	483a      	ldr	r0, [pc, #232]	; (8001194 <Move+0x14c>)
 80010ac:	f001 fc1a 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4837      	ldr	r0, [pc, #220]	; (8001194 <Move+0x14c>)
 80010b6:	f001 fc15 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	4834      	ldr	r0, [pc, #208]	; (8001194 <Move+0x14c>)
 80010c2:	f001 fc0f 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 80010c6:	e061      	b.n	800118c <Move+0x144>
		case LEFT:
			Left();
 80010c8:	f000 f8f6 	bl	80012b8 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	4830      	ldr	r0, [pc, #192]	; (8001194 <Move+0x14c>)
 80010d2:	f001 fc07 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	482e      	ldr	r0, [pc, #184]	; (8001194 <Move+0x14c>)
 80010dc:	f001 fc02 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	482b      	ldr	r0, [pc, #172]	; (8001194 <Move+0x14c>)
 80010e8:	f001 fbfc 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 80010ec:	e04e      	b.n	800118c <Move+0x144>
		case RIGHT:
			Right();
 80010ee:	f000 f8b3 	bl	8001258 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	4827      	ldr	r0, [pc, #156]	; (8001194 <Move+0x14c>)
 80010f8:	f001 fbf4 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <Move+0x14c>)
 8001102:	f001 fbef 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	4821      	ldr	r0, [pc, #132]	; (8001194 <Move+0x14c>)
 800110e:	f001 fbe9 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 8001112:	e03b      	b.n	800118c <Move+0x144>
		case CW:
			Cw();
 8001114:	f000 f900 	bl	8001318 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <Move+0x14c>)
 800111e:	f001 fbe1 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	481b      	ldr	r0, [pc, #108]	; (8001194 <Move+0x14c>)
 8001128:	f001 fbdc 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <Move+0x14c>)
 8001134:	f001 fbd6 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 8001138:	e028      	b.n	800118c <Move+0x144>
		case CCW:
			Ccw();
 800113a:	f000 f91d 	bl	8001378 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2101      	movs	r1, #1
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <Move+0x14c>)
 8001144:	f001 fbce 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <Move+0x14c>)
 800114e:	f001 fbc9 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001158:	480e      	ldr	r0, [pc, #56]	; (8001194 <Move+0x14c>)
 800115a:	f001 fbc3 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 800115e:	e015      	b.n	800118c <Move+0x144>
		case STOP:
			Stop();
 8001160:	f000 f93a 	bl	80013d8 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2101      	movs	r1, #1
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <Move+0x14c>)
 800116a:	f001 fbbb 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <Move+0x14c>)
 8001174:	f001 fbb6 	bl	80028e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <Move+0x14c>)
 8001180:	f001 fbb0 	bl	80028e4 <HAL_GPIO_WritePin>
			break;
 8001184:	e002      	b.n	800118c <Move+0x144>
		default:
			Stop();
 8001186:	f000 f927 	bl	80013d8 <Stop>
			break;
 800118a:	bf00      	nop
		}
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400

08001198 <Forward>:

void Forward()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <Forward+0x54>)
 80011a2:	f001 fb9f 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <Forward+0x58>)
 80011ae:	f001 fb99 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 80011b2:	2201      	movs	r2, #1
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <Forward+0x58>)
 80011b8:	f001 fb94 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <Forward+0x58>)
 80011c4:	f001 fb8e 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	480a      	ldr	r0, [pc, #40]	; (80011f4 <Forward+0x5c>)
 80011cc:	f002 fe12 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <Forward+0x5c>)
 80011d4:	f002 fe0e 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011d8:	2108      	movs	r1, #8
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <Forward+0x5c>)
 80011dc:	f002 fe0a 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80011e0:	210c      	movs	r1, #12
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <Forward+0x5c>)
 80011e4:	f002 fe06 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021400 	.word	0x40021400
 80011f4:	200004b8 	.word	0x200004b8

080011f8 <Backward>:

void Backward()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2102      	movs	r1, #2
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <Backward+0x54>)
 8001202:	f001 fb6f 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <Backward+0x58>)
 800120e:	f001 fb69 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <Backward+0x58>)
 8001218:	f001 fb64 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <Backward+0x58>)
 8001224:	f001 fb5e 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <Backward+0x5c>)
 800122c:	f002 fde2 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <Backward+0x5c>)
 8001234:	f002 fdde 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001238:	2108      	movs	r1, #8
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <Backward+0x5c>)
 800123c:	f002 fdda 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001240:	210c      	movs	r1, #12
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <Backward+0x5c>)
 8001244:	f002 fdd6 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021800 	.word	0x40021800
 8001250:	40021400 	.word	0x40021400
 8001254:	200004b8 	.word	0x200004b8

08001258 <Right>:

void Right()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <Right+0x54>)
 8001262:	f001 fb3f 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	4810      	ldr	r0, [pc, #64]	; (80012b0 <Right+0x58>)
 800126e:	f001 fb39 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <Right+0x58>)
 8001278:	f001 fb34 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <Right+0x58>)
 8001284:	f001 fb2e 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <Right+0x5c>)
 800128c:	f002 fdb2 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001290:	2104      	movs	r1, #4
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <Right+0x5c>)
 8001294:	f002 fdae 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001298:	2108      	movs	r1, #8
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <Right+0x5c>)
 800129c:	f002 fdaa 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012a0:	210c      	movs	r1, #12
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <Right+0x5c>)
 80012a4:	f002 fda6 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40021400 	.word	0x40021400
 80012b4:	200004b8 	.word	0x200004b8

080012b8 <Left>:

void Left()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <Left+0x54>)
 80012c2:	f001 fb0f 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <Left+0x58>)
 80012ce:	f001 fb09 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <Left+0x58>)
 80012d8:	f001 fb04 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <Left+0x58>)
 80012e4:	f001 fafe 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	; (8001314 <Left+0x5c>)
 80012ec:	f002 fd82 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <Left+0x5c>)
 80012f4:	f002 fd7e 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012f8:	2108      	movs	r1, #8
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <Left+0x5c>)
 80012fc:	f002 fd7a 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001300:	210c      	movs	r1, #12
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <Left+0x5c>)
 8001304:	f002 fd76 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021800 	.word	0x40021800
 8001310:	40021400 	.word	0x40021400
 8001314:	200004b8 	.word	0x200004b8

08001318 <Cw>:

void Cw()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2102      	movs	r1, #2
 8001320:	4812      	ldr	r0, [pc, #72]	; (800136c <Cw+0x54>)
 8001322:	f001 fadf 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <Cw+0x58>)
 800132e:	f001 fad9 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <Cw+0x58>)
 8001338:	f001 fad4 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <Cw+0x58>)
 8001344:	f001 face 	bl	80028e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001348:	2100      	movs	r1, #0
 800134a:	480a      	ldr	r0, [pc, #40]	; (8001374 <Cw+0x5c>)
 800134c:	f002 fd52 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001350:	2104      	movs	r1, #4
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <Cw+0x5c>)
 8001354:	f002 fd4e 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001358:	2108      	movs	r1, #8
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <Cw+0x5c>)
 800135c:	f002 fd4a 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001360:	210c      	movs	r1, #12
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <Cw+0x5c>)
 8001364:	f002 fd46 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021800 	.word	0x40021800
 8001370:	40021400 	.word	0x40021400
 8001374:	200004b8 	.word	0x200004b8

08001378 <Ccw>:

void Ccw()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4812      	ldr	r0, [pc, #72]	; (80013cc <Ccw+0x54>)
 8001382:	f001 faaf 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <Ccw+0x58>)
 800138e:	f001 faa9 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <Ccw+0x58>)
 8001398:	f001 faa4 	bl	80028e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <Ccw+0x58>)
 80013a4:	f001 fa9e 	bl	80028e4 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013a8:	2100      	movs	r1, #0
 80013aa:	480a      	ldr	r0, [pc, #40]	; (80013d4 <Ccw+0x5c>)
 80013ac:	f002 fd22 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013b0:	2104      	movs	r1, #4
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <Ccw+0x5c>)
 80013b4:	f002 fd1e 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013b8:	2108      	movs	r1, #8
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <Ccw+0x5c>)
 80013bc:	f002 fd1a 	bl	8003df4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013c0:	210c      	movs	r1, #12
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <Ccw+0x5c>)
 80013c4:	f002 fd16 	bl	8003df4 <HAL_TIM_PWM_Start>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021400 	.word	0x40021400
 80013d4:	200004b8 	.word	0x200004b8

080013d8 <Stop>:

void Stop()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80013dc:	2100      	movs	r1, #0
 80013de:	4808      	ldr	r0, [pc, #32]	; (8001400 <Stop+0x28>)
 80013e0:	f002 fdd0 	bl	8003f84 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <Stop+0x28>)
 80013e8:	f002 fdcc 	bl	8003f84 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80013ec:	2108      	movs	r1, #8
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <Stop+0x28>)
 80013f0:	f002 fdc8 	bl	8003f84 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80013f4:	210c      	movs	r1, #12
 80013f6:	4802      	ldr	r0, [pc, #8]	; (8001400 <Stop+0x28>)
 80013f8:	f002 fdc4 	bl	8003f84 <HAL_TIM_PWM_Stop>


}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200004b8 	.word	0x200004b8

08001404 <Motor_Init>:

void Motor_Init(){
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 8001412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001416:	f240 32b6 	movw	r2, #950	; 0x3b6
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 800141c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001420:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 8001426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_RTC_Init+0x44>)
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <MX_RTC_Init+0x48>)
 8001444:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_RTC_Init+0x44>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_RTC_Init+0x44>)
 800144e:	227f      	movs	r2, #127	; 0x7f
 8001450:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_RTC_Init+0x44>)
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_RTC_Init+0x44>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_RTC_Init+0x44>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_RTC_Init+0x44>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_RTC_Init+0x44>)
 800146c:	f002 faae 	bl	80039cc <HAL_RTC_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001476:	f7ff fde1 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000404 	.word	0x20000404
 8001484:	40002800 	.word	0x40002800

08001488 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2230      	movs	r2, #48	; 0x30
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f007 fb00 	bl	8008a9e <memset>
  if(rtcHandle->Instance==RTC)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_RTC_MspInit+0x4c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d111      	bne.n	80014cc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a8:	2320      	movs	r3, #32
 80014aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f8c8 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014c2:	f7ff fdbb 	bl	800103c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <HAL_RTC_MspInit+0x50>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40002800 	.word	0x40002800
 80014d8:	42470e3c 	.word	0x42470e3c

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_MspInit+0x54>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_MspInit+0x54>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x54>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_MspInit+0x54>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_MspInit+0x54>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_MspInit+0x54>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	210f      	movs	r1, #15
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	f000 ff77 	bl	8002414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2032      	movs	r0, #50	; 0x32
 800154a:	f000 ff63 	bl	8002414 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800154e:	2032      	movs	r0, #50	; 0x32
 8001550:	f000 ff7c 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_InitTick+0xa4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_InitTick+0xa4>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_InitTick+0xa4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001570:	f107 0210 	add.w	r2, r7, #16
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f834 	bl	80035e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001580:	f002 f80a 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_InitTick+0xa8>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3b01      	subs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_InitTick+0xac>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_InitTick+0xb0>)
 800159c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_InitTick+0xac>)
 80015a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_InitTick+0xac>)
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_InitTick+0xac>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_InitTick+0xac>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <HAL_InitTick+0xac>)
 80015ba:	f002 fb01 	bl	8003bc0 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_InitTick+0xac>)
 80015c6:	f002 fb4b 	bl	8003c60 <HAL_TIM_Base_Start_IT>
 80015ca:	4603      	mov	r3, r0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20000424 	.word	0x20000424
 80015e4:	40000c00 	.word	0x40000c00

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM1_CC_IRQHandler+0x10>)
 800161a:	f002 fea5 	bl	8004368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000470 	.word	0x20000470

08001628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM3_IRQHandler+0x10>)
 800162e:	f002 fe9b 	bl	8004368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000500 	.word	0x20000500

0800163c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <TIM4_IRQHandler+0x10>)
 8001642:	f002 fe91 	bl	8004368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000548 	.word	0x20000548

08001650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <USART2_IRQHandler+0x10>)
 8001656:	f003 fff1 	bl	800563c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200005d4 	.word	0x200005d4

08001664 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART3_IRQHandler+0x10>)
 800166a:	f003 ffe7 	bl	800563c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000618 	.word	0x20000618

08001678 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM5_IRQHandler+0x10>)
 800167e:	f002 fe73 	bl	8004368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000424 	.word	0x20000424

0800168c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USART6_IRQHandler+0x10>)
 8001692:	f003 ffd3 	bl	800563c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000065c 	.word	0x2000065c

080016a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <UART7_IRQHandler+0x10>)
 80016a6:	f003 ffc9 	bl	800563c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000590 	.word	0x20000590

080016b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00a      	b.n	80016dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c6:	f3af 8000 	nop.w
 80016ca:	4601      	mov	r1, r0
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf0      	blt.n	80016c6 <_read+0x12>
	}

return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e009      	b.n	8001714 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fefb 	bl	8000504 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf1      	blt.n	8001700 <_write+0x12>
	}
	return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:

int _close(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174e:	605a      	str	r2, [r3, #4]
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_isatty>:

int _isatty(int file)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	return 1;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f007 f83c 	bl	800883c <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20030000 	.word	0x20030000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	2000046c 	.word	0x2000046c
 80017f8:	20004408 	.word	0x20004408

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <MX_TIM1_Init+0xe0>)
 800184c:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <MX_TIM1_Init+0xe4>)
 800184e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001852:	22b3      	movs	r2, #179	; 0xb3
 8001854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <MX_TIM1_Init+0xe0>)
 800185e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <MX_TIM1_Init+0xe0>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001876:	4822      	ldr	r0, [pc, #136]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001878:	f002 f9a2 	bl	8003bc0 <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001882:	f7ff fbdb 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	4619      	mov	r1, r3
 8001892:	481b      	ldr	r0, [pc, #108]	; (8001900 <MX_TIM1_Init+0xe0>)
 8001894:	f002 ffce 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800189e:	f7ff fbcd 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <MX_TIM1_Init+0xe0>)
 80018a4:	f002 fbde 	bl	8004064 <HAL_TIM_IC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018ae:	f7ff fbc5 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_TIM1_Init+0xe0>)
 80018c2:	f003 fd1b 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80018cc:	f7ff fbb6 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80018d0:	230a      	movs	r3, #10
 80018d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d4:	2301      	movs	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 80018dc:	2305      	movs	r3, #5
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM1_Init+0xe0>)
 80018e8:	f002 fe46 	bl	8004578 <HAL_TIM_IC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80018f2:	f7ff fba3 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000470 	.word	0x20000470
 8001904:	40010000 	.word	0x40010000

08001908 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <MX_TIM2_Init+0x128>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001942:	2259      	movs	r2, #89	; 0x59
 8001944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <MX_TIM2_Init+0x128>)
 800194e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <MX_TIM2_Init+0x128>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4833      	ldr	r0, [pc, #204]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001962:	f002 f92d 	bl	8003bc0 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800196c:	f7ff fb66 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197a:	4619      	mov	r1, r3
 800197c:	482c      	ldr	r0, [pc, #176]	; (8001a30 <MX_TIM2_Init+0x128>)
 800197e:	f002 ff59 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001988:	f7ff fb58 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800198c:	4828      	ldr	r0, [pc, #160]	; (8001a30 <MX_TIM2_Init+0x128>)
 800198e:	f002 f9d7 	bl	8003d40 <HAL_TIM_PWM_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001998:	f7ff fb50 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4619      	mov	r1, r3
 80019aa:	4821      	ldr	r0, [pc, #132]	; (8001a30 <MX_TIM2_Init+0x128>)
 80019ac:	f003 fca6 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019b6:	f7ff fb41 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019ba:	2370      	movs	r3, #112	; 0x70
 80019bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4817      	ldr	r0, [pc, #92]	; (8001a30 <MX_TIM2_Init+0x128>)
 80019d2:	f002 fe6d 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019dc:	f7ff fb2e 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2204      	movs	r2, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <MX_TIM2_Init+0x128>)
 80019e8:	f002 fe62 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019f2:	f7ff fb23 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2208      	movs	r2, #8
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <MX_TIM2_Init+0x128>)
 80019fe:	f002 fe57 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001a08:	f7ff fb18 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001a14:	f002 fe4c 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001a1e:	f7ff fb0d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0x128>)
 8001a24:	f000 f9b0 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	; 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200004b8 	.word	0x200004b8

08001a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a60:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <MX_TIM3_Init+0xdc>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a66:	2259      	movs	r2, #89	; 0x59
 8001a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a84:	4821      	ldr	r0, [pc, #132]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001a86:	f002 f89b 	bl	8003bc0 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001a90:	f7ff fad4 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481a      	ldr	r0, [pc, #104]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001aa2:	f002 fec7 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001aac:	f7ff fac6 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ab0:	4816      	ldr	r0, [pc, #88]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001ab2:	f002 fad7 	bl	8004064 <HAL_TIM_IC_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001abc:	f7ff fabe 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001ad0:	f003 fc14 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001ada:	f7ff faaf 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001aea:	2305      	movs	r3, #5
 8001aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	2200      	movs	r2, #0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM3_Init+0xd8>)
 8001af6:	f002 fd3f 	bl	8004578 <HAL_TIM_IC_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001b00:	f7ff fa9c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000500 	.word	0x20000500
 8001b10:	40000400 	.word	0x40000400

08001b14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <MX_TIM4_Init+0xdc>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b46:	2259      	movs	r2, #89	; 0x59
 8001b48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b64:	4821      	ldr	r0, [pc, #132]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b66:	f002 f82b 	bl	8003bc0 <HAL_TIM_Base_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001b70:	f7ff fa64 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481a      	ldr	r0, [pc, #104]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b82:	f002 fe57 	bl	8004834 <HAL_TIM_ConfigClockSource>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f7ff fa56 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001b92:	f002 fa67 	bl	8004064 <HAL_TIM_IC_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b9c:	f7ff fa4e 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001bb0:	f003 fba4 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001bba:	f7ff fa3f 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_TIM4_Init+0xd8>)
 8001bd6:	f002 fccf 	bl	8004578 <HAL_TIM_IC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001be0:	f7ff fa2c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000548 	.word	0x20000548
 8001bf0:	40000800 	.word	0x40000800

08001bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	; 0x38
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_TIM_Base_MspInit+0x178>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12d      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a54      	ldr	r2, [pc, #336]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4842      	ldr	r0, [pc, #264]	; (8001d74 <HAL_TIM_Base_MspInit+0x180>)
 8001c6c:	f000 fc8e 	bl	800258c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c70:	e077      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d10e      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	69bb      	ldr	r3, [r7, #24]
}
 8001c98:	e063      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a36      	ldr	r2, [pc, #216]	; (8001d78 <HAL_TIM_Base_MspInit+0x184>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d12c      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cdc:	2340      	movs	r3, #64	; 0x40
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cec:	2302      	movs	r3, #2
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4821      	ldr	r0, [pc, #132]	; (8001d7c <HAL_TIM_Base_MspInit+0x188>)
 8001cf8:	f000 fc48 	bl	800258c <HAL_GPIO_Init>
}
 8001cfc:	e031      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_TIM_Base_MspInit+0x18c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d12c      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_Base_MspInit+0x17c>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d52:	2302      	movs	r3, #2
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <HAL_TIM_Base_MspInit+0x190>)
 8001d5e:	f000 fc15 	bl	800258c <HAL_GPIO_Init>
}
 8001d62:	bf00      	nop
 8001d64:	3738      	adds	r7, #56	; 0x38
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40020c00 	.word	0x40020c00

08001d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d13c      	bne.n	8001e24 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_TIM_MspPostInit+0xa4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df2:	2301      	movs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <HAL_TIM_MspPostInit+0xa8>)
 8001dfe:	f000 fbc5 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001e02:	f640 4308 	movw	r3, #3080	; 0xc08
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_TIM_MspPostInit+0xac>)
 8001e20:	f000 fbb4 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400

08001e38 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <MX_UART7_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e48:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_UART7_Init+0x4c>)
 8001e70:	f003 fad4 	bl	800541c <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001e7a:	f7ff f8df 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000590 	.word	0x20000590
 8001e88:	40007800 	.word	0x40007800

08001e8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_USART2_UART_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001e98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	f003 faaa 	bl	800541c <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ece:	f7ff f8b5 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200005d4 	.word	0x200005d4
 8001edc:	40004400 	.word	0x40004400

08001ee0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <MX_USART3_UART_Init+0x50>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_USART3_UART_Init+0x4c>)
 8001f18:	f003 fa80 	bl	800541c <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f22:	f7ff f88b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000618 	.word	0x20000618
 8001f30:	40004800 	.word	0x40004800

08001f34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_USART6_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f40:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001f44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART6_UART_Init+0x4c>)
 8001f6c:	f003 fa56 	bl	800541c <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f7ff f861 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000065c 	.word	0x2000065c
 8001f84:	40011400 	.word	0x40011400

08001f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b090      	sub	sp, #64	; 0x40
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a80      	ldr	r2, [pc, #512]	; (80021a8 <HAL_UART_MspInit+0x220>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d135      	bne.n	8002016 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a7e      	ldr	r2, [pc, #504]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_UART_MspInit+0x224>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001fe2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	486c      	ldr	r0, [pc, #432]	; (80021b0 <HAL_UART_MspInit+0x228>)
 8002000:	f000 fac4 	bl	800258c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2105      	movs	r1, #5
 8002008:	2052      	movs	r0, #82	; 0x52
 800200a:	f000 fa03 	bl	8002414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800200e:	2052      	movs	r0, #82	; 0x52
 8002010:	f000 fa1c 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002014:	e0c4      	b.n	80021a0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <HAL_UART_MspInit+0x22c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d152      	bne.n	80020c6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	4b61      	ldr	r3, [pc, #388]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a60      	ldr	r2, [pc, #384]	; (80021ac <HAL_UART_MspInit+0x224>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b5e      	ldr	r3, [pc, #376]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a59      	ldr	r2, [pc, #356]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_UART_MspInit+0x224>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_UART_MspInit+0x224>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_UART_MspInit+0x224>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002074:	2308      	movs	r3, #8
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002084:	2307      	movs	r3, #7
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	484a      	ldr	r0, [pc, #296]	; (80021b8 <HAL_UART_MspInit+0x230>)
 8002090:	f000 fa7c 	bl	800258c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002094:	2320      	movs	r3, #32
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a4:	2307      	movs	r3, #7
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ac:	4619      	mov	r1, r3
 80020ae:	4843      	ldr	r0, [pc, #268]	; (80021bc <HAL_UART_MspInit+0x234>)
 80020b0:	f000 fa6c 	bl	800258c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2105      	movs	r1, #5
 80020b8:	2026      	movs	r0, #38	; 0x26
 80020ba:	f000 f9ab 	bl	8002414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020be:	2026      	movs	r0, #38	; 0x26
 80020c0:	f000 f9c4 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 80020c4:	e06c      	b.n	80021a0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <HAL_UART_MspInit+0x238>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d135      	bne.n	800213c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_UART_MspInit+0x224>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211a:	2307      	movs	r3, #7
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	4825      	ldr	r0, [pc, #148]	; (80021bc <HAL_UART_MspInit+0x234>)
 8002126:	f000 fa31 	bl	800258c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	2027      	movs	r0, #39	; 0x27
 8002130:	f000 f970 	bl	8002414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002134:	2027      	movs	r0, #39	; 0x27
 8002136:	f000 f989 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 800213a:	e031      	b.n	80021a0 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_UART_MspInit+0x23c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_UART_MspInit+0x224>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002150:	f043 0320 	orr.w	r3, r3, #32
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_UART_MspInit+0x224>)
 800216c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_UART_MspInit+0x224>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800217e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002190:	2308      	movs	r3, #8
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <HAL_UART_MspInit+0x240>)
 800219c:	f000 f9f6 	bl	800258c <HAL_GPIO_Init>
}
 80021a0:	bf00      	nop
 80021a2:	3740      	adds	r7, #64	; 0x40
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40007800 	.word	0x40007800
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40004400 	.word	0x40004400
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40004800 	.word	0x40004800
 80021c4:	40011400 	.word	0x40011400
 80021c8:	40021800 	.word	0x40021800

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e8:	4c0b      	ldr	r4, [pc, #44]	; (8002218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f6:	f7ff fb01 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f006 fc1b 	bl	8008a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7fe fe51 	bl	8000ea4 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002204:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002210:	0800973c 	.word	0x0800973c
  ldr r2, =_sbss
 8002214:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002218:	20004408 	.word	0x20004408

0800221c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_Init+0x40>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_Init+0x40>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x40>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f8d8 	bl	80023fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f7ff f970 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff f942 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	200006a0 	.word	0x200006a0

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200006a0 	.word	0x200006a0

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff4c 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002426:	f7ff ff61 	bl	80022ec <__NVIC_GetPriorityGrouping>
 800242a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7ff ffb1 	bl	8002398 <NVIC_EncodePriority>
 8002436:	4602      	mov	r2, r0
 8002438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff80 	bl	8002344 <__NVIC_SetPriority>
}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff54 	bl	8002308 <__NVIC_EnableIRQ>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002476:	f7ff ff09 	bl	800228c <HAL_GetTick>
 800247a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d008      	beq.n	800249a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e052      	b.n	8002540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0216 	bic.w	r2, r2, #22
 80024a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <HAL_DMA_Abort+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0208 	bic.w	r2, r2, #8
 80024d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ea:	e013      	b.n	8002514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ec:	f7ff fece 	bl	800228c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d90c      	bls.n	8002514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e015      	b.n	8002540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e4      	bne.n	80024ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	223f      	movs	r2, #63	; 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00c      	b.n	8002580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e177      	b.n	8002898 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8166 	bne.w	8002892 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80c0 	beq.w	8002892 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_GPIO_Init+0x324>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a61      	ldr	r2, [pc, #388]	; (80028b4 <HAL_GPIO_Init+0x328>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_GPIO_Init+0x32c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d037      	beq.n	80027ca <HAL_GPIO_Init+0x23e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_GPIO_Init+0x330>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_GPIO_Init+0x23a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x334>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02b      	beq.n	80027c2 <HAL_GPIO_Init+0x236>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a55      	ldr	r2, [pc, #340]	; (80028c4 <HAL_GPIO_Init+0x338>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x232>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_GPIO_Init+0x33c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x22e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_GPIO_Init+0x340>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x22a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x344>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x348>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_GPIO_Init+0x34c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x350>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x21a>
 80027a2:	2309      	movs	r3, #9
 80027a4:	e012      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027a6:	230a      	movs	r3, #10
 80027a8:	e010      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x328>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_GPIO_Init+0x354>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae84 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022400 	.word	0x40022400
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e12b      	b.n	8002b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fa68 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800297c:	f000 fe0c 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8002980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a81      	ldr	r2, [pc, #516]	; (8002b8c <HAL_I2C_Init+0x274>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d807      	bhi.n	800299c <HAL_I2C_Init+0x84>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_I2C_Init+0x278>)
 8002990:	4293      	cmp	r3, r2
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e006      	b.n	80029aa <HAL_I2C_Init+0x92>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a7d      	ldr	r2, [pc, #500]	; (8002b94 <HAL_I2C_Init+0x27c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0e7      	b.n	8002b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a78      	ldr	r2, [pc, #480]	; (8002b98 <HAL_I2C_Init+0x280>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9b      	lsrs	r3, r3, #18
 80029bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a6a      	ldr	r2, [pc, #424]	; (8002b8c <HAL_I2C_Init+0x274>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d802      	bhi.n	80029ec <HAL_I2C_Init+0xd4>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	e009      	b.n	8002a00 <HAL_I2C_Init+0xe8>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <HAL_I2C_Init+0x284>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	495c      	ldr	r1, [pc, #368]	; (8002b8c <HAL_I2C_Init+0x274>)
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d819      	bhi.n	8002a54 <HAL_I2C_Init+0x13c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e59      	subs	r1, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2e:	1c59      	adds	r1, r3, #1
 8002a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a34:	400b      	ands	r3, r1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_I2C_Init+0x138>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e59      	subs	r1, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4e:	e051      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002a50:	2304      	movs	r3, #4
 8002a52:	e04f      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <HAL_I2C_Init+0x168>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e012      	b.n	8002aa6 <HAL_I2C_Init+0x18e>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Init+0x196>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e022      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_I2C_Init+0x1bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e58      	subs	r0, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad2:	e00f      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	0099      	lsls	r1, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	6809      	ldr	r1, [r1, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6911      	ldr	r1, [r2, #16]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	000186a0 	.word	0x000186a0
 8002b90:	001e847f 	.word	0x001e847f
 8002b94:	003d08ff 	.word	0x003d08ff
 8002b98:	431bde83 	.word	0x431bde83
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d129      	bne.n	8002c0a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2224      	movs	r2, #36	; 0x24
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0210 	bic.w	r2, r2, #16
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d12a      	bne.n	8002c88 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2224      	movs	r2, #36	; 0x24
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c52:	89fb      	ldrh	r3, [r7, #14]
 8002c54:	f023 030f 	bic.w	r3, r3, #15
 8002c58:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	89fa      	ldrh	r2, [r7, #14]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_PWREx_EnableOverDrive+0x94>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7ff fae2 	bl	800228c <HAL_GetTick>
 8002cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cca:	e009      	b.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ccc:	f7ff fade 	bl	800228c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e01f      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d1ee      	bne.n	8002ccc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff faca 	bl	800228c <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7ff fac6 	bl	800228c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e007      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	420e0040 	.word	0x420e0040
 8002d30:	40007000 	.word	0x40007000
 8002d34:	420e0044 	.word	0x420e0044

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e267      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d00c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d112      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d10b      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCC_OscConfig+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d157      	bne.n	8002e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e242      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x74>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b70      	ldr	r3, [pc, #448]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6f      	ldr	r2, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dd0:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fa4c 	bl	800228c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fa48 	bl	800228c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e207      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xc0>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff fa38 	bl	800228c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff fa34 	bl	800228c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1f3      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0xe8>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c7      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4937      	ldr	r1, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7ff f9ed 	bl	800228c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff f9e9 	bl	800228c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a8      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4925      	ldr	r1, [pc, #148]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f9cc 	bl	800228c <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f9c8 	bl	800228c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e187      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff f9ac 	bl	800228c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff f9a8 	bl	800228c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e167      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x200>
 8002f56:	e01b      	b.n	8002f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f995 	bl	800228c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e00e      	b.n	8002f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7ff f991 	bl	800228c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d907      	bls.n	8002f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e150      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	42470000 	.word	0x42470000
 8002f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ea      	bne.n	8002f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8097 	beq.w	80030cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a7c      	ldr	r2, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b7a      	ldr	r3, [pc, #488]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b77      	ldr	r3, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b74      	ldr	r3, [pc, #464]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff f951 	bl	800228c <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7ff f94d 	bl	800228c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e10c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x2ea>
 8003014:	4b64      	ldr	r3, [pc, #400]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a63      	ldr	r2, [pc, #396]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x30c>
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5e      	ldr	r2, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	4a5b      	ldr	r2, [pc, #364]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003044:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a57      	ldr	r2, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7ff f912 	bl	800228c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7ff f90e 	bl	800228c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0cb      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCC_OscConfig+0x334>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7ff f8fc 	bl	800228c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7ff f8f8 	bl	800228c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0b5      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a1 	beq.w	8003218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d05c      	beq.n	800319c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d141      	bne.n	800316e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff f8cc 	bl	800228c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff f8c8 	bl	800228c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e087      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	491b      	ldr	r1, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7ff f8a1 	bl	800228c <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7ff f89d 	bl	800228c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e05c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x416>
 800316c:	e054      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7ff f88a 	bl	800228c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7ff f886 	bl	800228c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e045      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x444>
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e038      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x4ec>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d121      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11a      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0cc      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b68      	ldr	r3, [pc, #416]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d90c      	bls.n	8003264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a52      	ldr	r2, [pc, #328]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800329e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d044      	beq.n	8003348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d119      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e067      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4934      	ldr	r1, [pc, #208]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003318:	f7fe ffb8 	bl	800228c <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	e00a      	b.n	8003336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003320:	f7fe ffb4 	bl	800228c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e04f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 020c 	and.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	429a      	cmp	r2, r3
 8003346:	d1eb      	bne.n	8003320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d20c      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f821 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490a      	ldr	r1, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe f8b0 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00
 80033e4:	40023800 	.word	0x40023800
 80033e8:	080096b0 	.word	0x080096b0
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b090      	sub	sp, #64	; 0x40
 80033fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003404:	2300      	movs	r3, #0
 8003406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340c:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d00d      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x40>
 8003418:	2b08      	cmp	r3, #8
 800341a:	f200 80a1 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x34>
 8003422:	2b04      	cmp	r3, #4
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x3a>
 8003426:	e09b      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800342c:	e09b      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342e:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003432:	e098      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343e:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d028      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344a:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	2200      	movs	r2, #0
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	627a      	str	r2, [r7, #36]	; 0x24
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800345c:	2100      	movs	r1, #0
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003460:	fb03 f201 	mul.w	r2, r3, r1
 8003464:	2300      	movs	r3, #0
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	4413      	add	r3, r2
 800346c:	4a43      	ldr	r2, [pc, #268]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 800346e:	fba0 1202 	umull	r1, r2, r0, r2
 8003472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003474:	460a      	mov	r2, r1
 8003476:	62ba      	str	r2, [r7, #40]	; 0x28
 8003478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347a:	4413      	add	r3, r2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	2200      	movs	r2, #0
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	61fa      	str	r2, [r7, #28]
 8003486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800348e:	f7fc feb7 	bl	8000200 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4613      	mov	r3, r2
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349a:	e053      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	2200      	movs	r2, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	617a      	str	r2, [r7, #20]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ae:	f04f 0b00 	mov.w	fp, #0
 80034b2:	4652      	mov	r2, sl
 80034b4:	465b      	mov	r3, fp
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	ebb2 080a 	subs.w	r8, r2, sl
 80034ce:	eb63 090b 	sbc.w	r9, r3, fp
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ea:	eb63 0509 	sbc.w	r5, r3, r9
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	00eb      	lsls	r3, r5, #3
 80034f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fc:	00e2      	lsls	r2, r4, #3
 80034fe:	4614      	mov	r4, r2
 8003500:	461d      	mov	r5, r3
 8003502:	eb14 030a 	adds.w	r3, r4, sl
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	eb45 030b 	adc.w	r3, r5, fp
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351a:	4629      	mov	r1, r5
 800351c:	028b      	lsls	r3, r1, #10
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003524:	4621      	mov	r1, r4
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	2200      	movs	r2, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	60fa      	str	r2, [r7, #12]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	f7fc fe62 	bl	8000200 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003568:	4618      	mov	r0, r3
 800356a:	3740      	adds	r7, #64	; 0x40
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	017d7840 	.word	0x017d7840

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000000 	.word	0x20000000

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800359c:	f7ff fff0 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0a9b      	lsrs	r3, r3, #10
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4903      	ldr	r1, [pc, #12]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	080096c0 	.word	0x080096c0

080035c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c4:	f7ff ffdc 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0b5b      	lsrs	r3, r3, #13
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	080096c0 	.word	0x080096c0

080035e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	220f      	movs	r2, #15
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_RCC_GetClockConfig+0x60>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40023c00 	.word	0x40023c00

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800367c:	2b00      	cmp	r3, #0
 800367e:	d075      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003680:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003686:	f7fe fe01 	bl	800228c <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800368e:	f7fe fdfd 	bl	800228c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e189      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	019a      	lsls	r2, r3, #6
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	071b      	lsls	r3, r3, #28
 80036c4:	4981      	ldr	r1, [pc, #516]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036d8:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	0f1b      	lsrs	r3, r3, #28
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	019a      	lsls	r2, r3, #6
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	431a      	orrs	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	071b      	lsls	r3, r3, #28
 80036f8:	4974      	ldr	r1, [pc, #464]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003700:	4b72      	ldr	r3, [pc, #456]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003706:	f023 021f 	bic.w	r2, r3, #31
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	3b01      	subs	r3, #1
 8003710:	496e      	ldr	r1, [pc, #440]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	019a      	lsls	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	071b      	lsls	r3, r3, #28
 8003738:	4964      	ldr	r1, [pc, #400]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003740:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003746:	f7fe fda1 	bl	800228c <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800374e:	f7fe fd9d 	bl	800228c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e129      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003784:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800378a:	f7fe fd7f 	bl	800228c <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003792:	f7fe fd7b 	bl	800228c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e107      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d0ef      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	0f1b      	lsrs	r3, r3, #28
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	019a      	lsls	r2, r3, #6
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	431a      	orrs	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	071b      	lsls	r3, r3, #28
 80037de:	493b      	ldr	r1, [pc, #236]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	4934      	ldr	r1, [pc, #208]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01e      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	0e1b      	lsrs	r3, r3, #24
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	019a      	lsls	r2, r3, #6
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	4927      	ldr	r1, [pc, #156]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800383a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003850:	f7fe fd1c 	bl	800228c <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003858:	f7fe fd18 	bl	800228c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0a4      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003876:	d1ef      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 808b 	beq.w	800399c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ae:	f7fe fced 	bl	800228c <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038b4:	e010      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fe fce9 	bl	800228c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d909      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e075      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80038c8:	42470068 	.word	0x42470068
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470070 	.word	0x42470070
 80038d4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d8:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0e8      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02f      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d028      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003912:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d114      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe fcaf 	bl	800228c <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fcab 	bl	800228c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e035      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003960:	d10d      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	4912      	ldr	r1, [pc, #72]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003984:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003988:	6093      	str	r3, [r2, #8]
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800398c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	490a      	ldr	r1, [pc, #40]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003998:	4313      	orrs	r3, r2
 800399a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80039b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40007000 	.word	0x40007000
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470e40 	.word	0x42470e40
 80039c8:	424711e0 	.word	0x424711e0

080039cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e066      	b.n	8003ab0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7f5b      	ldrb	r3, [r3, #29]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fd48 	bl	8001488 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	22ca      	movs	r2, #202	; 0xca
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2253      	movs	r2, #83	; 0x53
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f87a 	bl	8003b08 <RTC_EnterInitMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d12c      	bne.n	8003a78 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68d2      	ldr	r2, [r2, #12]
 8003a58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6919      	ldr	r1, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	041a      	lsls	r2, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f881 	bl	8003b76 <RTC_ExitInitMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d113      	bne.n	8003aa6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad4:	f7fe fbda 	bl	800228c <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ada:	e009      	b.n	8003af0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003adc:	f7fe fbd6 	bl	800228c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aea:	d901      	bls.n	8003af0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e007      	b.n	8003b00 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d122      	bne.n	8003b6c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fe fba9 	bl	800228c <HAL_GetTick>
 8003b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b3c:	e00c      	b.n	8003b58 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b3e:	f7fe fba5 	bl	800228c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b4c:	d904      	bls.n	8003b58 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <RTC_EnterInitMode+0x64>
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d1e8      	bne.n	8003b3e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff89 	bl	8003ab8 <HAL_RTC_WaitForSynchro>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe f804 	bl	8001bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f000 ff42 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d001      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e04e      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x80>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d111      	bne.n	8003d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d010      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	e007      	b.n	8003d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40010400 	.word	0x40010400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40001800 	.word	0x40001800

08003d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f839 	bl	8003dde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fe82 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x24>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e022      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d109      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x3e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e015      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d109      	bne.n	8003e4c <HAL_TIM_PWM_Start+0x58>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e008      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07c      	b.n	8003f60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x82>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	e013      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x92>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	e00b      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xa2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	e003      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fa02 	bl	80052b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_TIM_PWM_Start+0x174>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0xcc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_TIM_PWM_Start+0x178>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0xd0>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xd2>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_TIM_PWM_Start+0x174>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d01d      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <HAL_TIM_PWM_Start+0x17c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_TIM_PWM_Start+0x180>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_TIM_PWM_Start+0x184>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_TIM_PWM_Start+0x178>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_TIM_PWM_Start+0x188>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIM_PWM_Start+0x18c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d010      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	e007      	b.n	8003f5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800

08003f84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 f98a 	bl	80052b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_TIM_PWM_Stop+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_TIM_PWM_Stop+0x2c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <HAL_TIM_PWM_Stop+0xdc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_PWM_Stop+0x30>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_TIM_PWM_Stop+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <HAL_TIM_PWM_Stop+0x66>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	f240 4344 	movw	r3, #1092	; 0x444
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d107      	bne.n	8003fea <HAL_TIM_PWM_Stop+0x66>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_TIM_PWM_Stop+0x96>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	f240 4344 	movw	r3, #1092	; 0x444
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_TIM_PWM_Stop+0x96>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Stop+0xa6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004028:	e013      	b.n	8004052 <HAL_TIM_PWM_Stop+0xce>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Stop+0xb6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004038:	e00b      	b.n	8004052 <HAL_TIM_PWM_Stop+0xce>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Stop+0xc6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004048:	e003      	b.n	8004052 <HAL_TIM_PWM_Stop+0xce>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010000 	.word	0x40010000
 8004060:	40010400 	.word	0x40010400

08004064 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e041      	b.n	80040fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f839 	bl	8004102 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 fcf0 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <HAL_TIM_IC_Start_IT+0x1e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e013      	b.n	800415e <HAL_TIM_IC_Start_IT+0x46>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d104      	bne.n	8004146 <HAL_TIM_IC_Start_IT+0x2e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e00b      	b.n	800415e <HAL_TIM_IC_Start_IT+0x46>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d104      	bne.n	8004156 <HAL_TIM_IC_Start_IT+0x3e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e003      	b.n	800415e <HAL_TIM_IC_Start_IT+0x46>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <HAL_TIM_IC_Start_IT+0x58>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e013      	b.n	8004198 <HAL_TIM_IC_Start_IT+0x80>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d104      	bne.n	8004180 <HAL_TIM_IC_Start_IT+0x68>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e00b      	b.n	8004198 <HAL_TIM_IC_Start_IT+0x80>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b08      	cmp	r3, #8
 8004184:	d104      	bne.n	8004190 <HAL_TIM_IC_Start_IT+0x78>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e003      	b.n	8004198 <HAL_TIM_IC_Start_IT+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004196:	b2db      	uxtb	r3, r3
 8004198:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800419a:	7bbb      	ldrb	r3, [r7, #14]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a0:	7b7b      	ldrb	r3, [r7, #13]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0cc      	b.n	8004344 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_IC_Start_IT+0xa2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b8:	e013      	b.n	80041e2 <HAL_TIM_IC_Start_IT+0xca>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d104      	bne.n	80041ca <HAL_TIM_IC_Start_IT+0xb2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	e00b      	b.n	80041e2 <HAL_TIM_IC_Start_IT+0xca>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d104      	bne.n	80041da <HAL_TIM_IC_Start_IT+0xc2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	e003      	b.n	80041e2 <HAL_TIM_IC_Start_IT+0xca>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_IC_Start_IT+0xda>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	e013      	b.n	800421a <HAL_TIM_IC_Start_IT+0x102>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_IC_Start_IT+0xea>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004200:	e00b      	b.n	800421a <HAL_TIM_IC_Start_IT+0x102>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d104      	bne.n	8004212 <HAL_TIM_IC_Start_IT+0xfa>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004210:	e003      	b.n	800421a <HAL_TIM_IC_Start_IT+0x102>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d841      	bhi.n	80042a4 <HAL_TIM_IC_Start_IT+0x18c>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_TIM_IC_Start_IT+0x110>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800425d 	.word	0x0800425d
 800422c:	080042a5 	.word	0x080042a5
 8004230:	080042a5 	.word	0x080042a5
 8004234:	080042a5 	.word	0x080042a5
 8004238:	0800426f 	.word	0x0800426f
 800423c:	080042a5 	.word	0x080042a5
 8004240:	080042a5 	.word	0x080042a5
 8004244:	080042a5 	.word	0x080042a5
 8004248:	08004281 	.word	0x08004281
 800424c:	080042a5 	.word	0x080042a5
 8004250:	080042a5 	.word	0x080042a5
 8004254:	080042a5 	.word	0x080042a5
 8004258:	08004293 	.word	0x08004293
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0202 	orr.w	r2, r2, #2
 800426a:	60da      	str	r2, [r3, #12]
      break;
 800426c:	e01d      	b.n	80042aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0204 	orr.w	r2, r2, #4
 800427c:	60da      	str	r2, [r3, #12]
      break;
 800427e:	e014      	b.n	80042aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	60da      	str	r2, [r3, #12]
      break;
 8004290:	e00b      	b.n	80042aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0210 	orr.w	r2, r2, #16
 80042a0:	60da      	str	r2, [r3, #12]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d148      	bne.n	8004342 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fff9 	bl	80052b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a22      	ldr	r2, [pc, #136]	; (800434c <HAL_TIM_IC_Start_IT+0x234>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d01d      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_TIM_IC_Start_IT+0x238>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_TIM_IC_Start_IT+0x23c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_TIM_IC_Start_IT+0x240>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_TIM_IC_Start_IT+0x244>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <HAL_TIM_IC_Start_IT+0x248>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIM_IC_Start_IT+0x1f6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_TIM_IC_Start_IT+0x24c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d010      	beq.n	8004342 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	e007      	b.n	8004342 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40001800 	.word	0x40001800

08004368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d122      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0202 	mvn.w	r2, #2
 8004394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc fbda 	bl	8000b64 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fb4a 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fb51 	bl	8004a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d122      	bne.n	8004418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11b      	bne.n	8004418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0204 	mvn.w	r2, #4
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc fbb0 	bl	8000b64 <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb20 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fb27 	bl	8004a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	d122      	bne.n	800446c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d11b      	bne.n	800446c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0208 	mvn.w	r2, #8
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2204      	movs	r2, #4
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fb86 	bl	8000b64 <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 faf6 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fafd 	bl	8004a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b10      	cmp	r3, #16
 8004478:	d122      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d11b      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0210 	mvn.w	r2, #16
 8004490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2208      	movs	r2, #8
 8004496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fb5c 	bl	8000b64 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 facc 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fad3 	bl	8004a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0201 	mvn.w	r2, #1
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc fd96 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 ff78 	bl	8005408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa98 	bl	8004a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b20      	cmp	r3, #32
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b20      	cmp	r3, #32
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0220 	mvn.w	r2, #32
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 ff42 	bl	80053f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004592:	2302      	movs	r3, #2
 8004594:	e088      	b.n	80046a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f000 fcb8 	bl	8004f28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020c 	bic.w	r2, r2, #12
 80045c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	619a      	str	r2, [r3, #24]
 80045da:	e060      	b.n	800469e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d11c      	bne.n	800461c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fd3c 	bl	800506e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004604:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6999      	ldr	r1, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	619a      	str	r2, [r3, #24]
 800461a:	e040      	b.n	800469e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b08      	cmp	r3, #8
 8004620:	d11b      	bne.n	800465a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 fd89 	bl	8005148 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 020c 	bic.w	r2, r2, #12
 8004644:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
 8004658:	e021      	b.n	800469e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d11c      	bne.n	800469a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f000 fda6 	bl	80051c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004682:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69d9      	ldr	r1, [r3, #28]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	61da      	str	r2, [r3, #28]
 8004698:	e001      	b.n	800469e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0ae      	b.n	800482c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	f200 809f 	bhi.w	800481c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004719 	.word	0x08004719
 80046e8:	0800481d 	.word	0x0800481d
 80046ec:	0800481d 	.word	0x0800481d
 80046f0:	0800481d 	.word	0x0800481d
 80046f4:	08004759 	.word	0x08004759
 80046f8:	0800481d 	.word	0x0800481d
 80046fc:	0800481d 	.word	0x0800481d
 8004700:	0800481d 	.word	0x0800481d
 8004704:	0800479b 	.word	0x0800479b
 8004708:	0800481d 	.word	0x0800481d
 800470c:	0800481d 	.word	0x0800481d
 8004710:	0800481d 	.word	0x0800481d
 8004714:	080047db 	.word	0x080047db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fa52 	bl	8004bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	619a      	str	r2, [r3, #24]
      break;
 8004756:	e064      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 faa2 	bl	8004ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      break;
 8004798:	e043      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 faf7 	bl	8004d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0208 	orr.w	r2, r2, #8
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	61da      	str	r2, [r3, #28]
      break;
 80047d8:	e023      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb4b 	bl	8004e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
      break;
 800481a:	e002      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0b4      	b.n	80049ba <HAL_TIM_ConfigClockSource+0x186>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004888:	d03e      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0xd4>
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	f200 8087 	bhi.w	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	f000 8086 	beq.w	80049a6 <HAL_TIM_ConfigClockSource+0x172>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	d87f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d01a      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xa6>
 80048a4:	2b70      	cmp	r3, #112	; 0x70
 80048a6:	d87b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b60      	cmp	r3, #96	; 0x60
 80048aa:	d050      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x11a>
 80048ac:	2b60      	cmp	r3, #96	; 0x60
 80048ae:	d877      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b50      	cmp	r3, #80	; 0x50
 80048b2:	d03c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xfa>
 80048b4:	2b50      	cmp	r3, #80	; 0x50
 80048b6:	d873      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d058      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x13a>
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d86f      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d064      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b30      	cmp	r3, #48	; 0x30
 80048c6:	d86b      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d060      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d867      	bhi.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d05c      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d05a      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x15a>
 80048d8:	e062      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f000 fcc1 	bl	8005270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	609a      	str	r2, [r3, #8]
      break;
 8004906:	e04f      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f000 fcaa 	bl	8005270 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492a:	609a      	str	r2, [r3, #8]
      break;
 800492c:	e03c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	461a      	mov	r2, r3
 800493c:	f000 fb68 	bl	8005010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2150      	movs	r1, #80	; 0x50
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fc77 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800494c:	e02c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fbc4 	bl	80050e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2160      	movs	r1, #96	; 0x60
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fc67 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800496c:	e01c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	461a      	mov	r2, r3
 800497c:	f000 fb48 	bl	8005010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2140      	movs	r1, #64	; 0x40
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fc57 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800498c:	e00c      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f000 fc4e 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 800499e:	e003      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d831      	bhi.n	8004a3c <HAL_TIM_ReadCapturedValue+0x78>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a3d 	.word	0x08004a3d
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004a3d 	.word	0x08004a3d
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	08004a3d 	.word	0x08004a3d
 80049f8:	08004a3d 	.word	0x08004a3d
 80049fc:	08004a3d 	.word	0x08004a3d
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a3d 	.word	0x08004a3d
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004a3d 	.word	0x08004a3d
 8004a10:	08004a33 	.word	0x08004a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	60fb      	str	r3, [r7, #12]

      break;
 8004a1c:	e00f      	b.n	8004a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	60fb      	str	r3, [r7, #12]

      break;
 8004a26:	e00a      	b.n	8004a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	60fb      	str	r3, [r7, #12]

      break;
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	60fb      	str	r3, [r7, #12]

      break;
 8004a3a:	e000      	b.n	8004a3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a3c:	bf00      	nop
  }

  return tmpreg;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a40      	ldr	r2, [pc, #256]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d00f      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3d      	ldr	r2, [pc, #244]	; (8004ba0 <TIM_Base_SetConfig+0x118>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00b      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3c      	ldr	r2, [pc, #240]	; (8004ba4 <TIM_Base_SetConfig+0x11c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <TIM_Base_SetConfig+0x120>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3a      	ldr	r2, [pc, #232]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d02b      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d027      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <TIM_Base_SetConfig+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d023      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <TIM_Base_SetConfig+0x11c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01f      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <TIM_Base_SetConfig+0x120>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01b      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d017      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <TIM_Base_SetConfig+0x128>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <TIM_Base_SetConfig+0x12c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <TIM_Base_SetConfig+0x130>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <TIM_Base_SetConfig+0x134>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <TIM_Base_SetConfig+0x138>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <TIM_Base_SetConfig+0x13c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d108      	bne.n	8004b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <TIM_Base_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0xf8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d103      	bne.n	8004b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800
 8004bbc:	40001800 	.word	0x40001800
 8004bc0:	40001c00 	.word	0x40001c00
 8004bc4:	40002000 	.word	0x40002000

08004bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 0302 	bic.w	r3, r3, #2
 8004c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a20      	ldr	r2, [pc, #128]	; (8004ca0 <TIM_OC1_SetConfig+0xd8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC1_SetConfig+0x64>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <TIM_OC1_SetConfig+0xdc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10c      	bne.n	8004c46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0308 	bic.w	r3, r3, #8
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 0304 	bic.w	r3, r3, #4
 8004c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <TIM_OC1_SetConfig+0xd8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC1_SetConfig+0x8e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <TIM_OC1_SetConfig+0xdc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0210 	bic.w	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <TIM_OC2_SetConfig+0xe4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC2_SetConfig+0x68>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <TIM_OC2_SetConfig+0xe8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10d      	bne.n	8004d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <TIM_OC2_SetConfig+0xe4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_OC2_SetConfig+0x94>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <TIM_OC2_SetConfig+0xe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d113      	bne.n	8004d64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40010400 	.word	0x40010400

08004d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <TIM_OC3_SetConfig+0xe0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_OC3_SetConfig+0x66>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10d      	bne.n	8004e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC3_SetConfig+0xe0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_OC3_SetConfig+0x92>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC3_SetConfig+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400

08004e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_OC4_SetConfig+0xa4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC4_SetConfig+0x68>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <TIM_OC4_SetConfig+0xa8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40010400 	.word	0x40010400

08004f28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a28      	ldr	r2, [pc, #160]	; (8004ff4 <TIM_TI1_SetConfig+0xcc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01b      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d017      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <TIM_TI1_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <TIM_TI1_SetConfig+0xd4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <TIM_TI1_SetConfig+0xd8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a22      	ldr	r2, [pc, #136]	; (8005004 <TIM_TI1_SetConfig+0xdc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a21      	ldr	r2, [pc, #132]	; (8005008 <TIM_TI1_SetConfig+0xe0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_TI1_SetConfig+0x66>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <TIM_TI1_SetConfig+0xe4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <TIM_TI1_SetConfig+0x6a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <TIM_TI1_SetConfig+0x6c>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e003      	b.n	8004fb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f023 030a 	bic.w	r3, r3, #10
 8004fcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 030a 	and.w	r3, r3, #10
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40010400 	.word	0x40010400
 8005008:	40014000 	.word	0x40014000
 800500c:	40001800 	.word	0x40001800

08005010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800503a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f023 030a 	bic.w	r3, r3, #10
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800506e:	b480      	push	{r7}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 0210 	bic.w	r2, r3, #16
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	621a      	str	r2, [r3, #32]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f023 0210 	bic.w	r2, r3, #16
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	031b      	lsls	r3, r3, #12
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0303 	bic.w	r3, r3, #3
 8005174:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005184:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	b2db      	uxtb	r3, r3
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005198:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	031b      	lsls	r3, r3, #12
 8005204:	b29b      	uxth	r3, r3
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005212:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	031b      	lsls	r3, r3, #12
 8005218:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	431a      	orrs	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e05a      	b.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d01d      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10c      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e03f      	b.n	80054ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fc fda0 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	; 0x24
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fddf 	bl	8006024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b08a      	sub	sp, #40	; 0x28
 80054ba:	af02      	add	r7, sp, #8
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d17c      	bne.n	80055d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_UART_Transmit+0x2c>
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e075      	b.n	80055d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_UART_Transmit+0x3e>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e06e      	b.n	80055d2 <HAL_UART_Transmit+0x11c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2221      	movs	r2, #33	; 0x21
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550a:	f7fc febf 	bl	800228c <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	88fa      	ldrh	r2, [r7, #6]
 800551a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d108      	bne.n	8005538 <HAL_UART_Transmit+0x82>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e003      	b.n	8005540 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005548:	e02a      	b.n	80055a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fb1f 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e036      	b.n	80055d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3302      	adds	r3, #2
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e007      	b.n	8005592 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1cf      	bne.n	800554a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2140      	movs	r1, #64	; 0x40
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 faef 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e006      	b.n	80055d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d11d      	bne.n	8005630 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Receive_IT+0x26>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e016      	b.n	8005632 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Receive_IT+0x38>
 800560e:	2302      	movs	r3, #2
 8005610:	e00f      	b.n	8005632 <HAL_UART_Receive_IT+0x58>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	461a      	mov	r2, r3
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fb24 	bl	8005c74 <UART_Start_Receive_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	e000      	b.n	8005632 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b0ba      	sub	sp, #232	; 0xe8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005668:	2300      	movs	r3, #0
 800566a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800567a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_UART_IRQHandler+0x66>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fc07 	bl	8005eae <UART_Receive_IT>
      return;
 80056a0:	e256      	b.n	8005b50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80de 	beq.w	8005868 <HAL_UART_IRQHandler+0x22c>
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80d1 	beq.w	8005868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <HAL_UART_IRQHandler+0xae>
 80056d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0201 	orr.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xd2>
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0202 	orr.w	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xf6>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0204 	orr.w	r2, r3, #4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d011      	beq.n	8005762 <HAL_UART_IRQHandler+0x126>
 800573e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d105      	bne.n	8005756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800574a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0208 	orr.w	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 81ed 	beq.w	8005b46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_UART_IRQHandler+0x14e>
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb92 	bl	8005eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <HAL_UART_IRQHandler+0x17a>
 80057ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d04f      	beq.n	8005856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa9a 	bl	8005cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d141      	bne.n	800584e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800580e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1d9      	bne.n	80057ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	2b00      	cmp	r3, #0
 800581c:	d013      	beq.n	8005846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	4a7d      	ldr	r2, [pc, #500]	; (8005a18 <HAL_UART_IRQHandler+0x3dc>)
 8005824:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	4618      	mov	r0, r3
 800582c:	f7fc fe8c 	bl	8002548 <HAL_DMA_Abort_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	e00e      	b.n	8005864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f990 	bl	8005b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	e00a      	b.n	8005864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f98c 	bl	8005b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	e006      	b.n	8005864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f988 	bl	8005b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005862:	e170      	b.n	8005b46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	bf00      	nop
    return;
 8005866:	e16e      	b.n	8005b46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 814a 	bne.w	8005b06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8143 	beq.w	8005b06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 813c 	beq.w	8005b06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	f040 80b4 	bne.w	8005a1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8140 	beq.w	8005b4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058d2:	429a      	cmp	r2, r3
 80058d4:	f080 8139 	bcs.w	8005b4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ea:	f000 8088 	beq.w	80059fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800591a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800591e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1d9      	bne.n	80058ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800594a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3314      	adds	r3, #20
 800595a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800595e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e1      	bne.n	800593a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3314      	adds	r3, #20
 800597c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800599a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800599c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e3      	bne.n	8005976 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e3      	bne.n	80059bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fc fd35 	bl	8002468 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8b6 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a14:	e099      	b.n	8005b4a <HAL_UART_IRQHandler+0x50e>
 8005a16:	bf00      	nop
 8005a18:	08005db7 	.word	0x08005db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 808b 	beq.w	8005b4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a66:	647a      	str	r2, [r7, #68]	; 0x44
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e3      	bne.n	8005a42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	623b      	str	r3, [r7, #32]
   return(result);
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e3      	bne.n	8005a7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0310 	bic.w	r3, r3, #16
 8005ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ae4:	61fa      	str	r2, [r7, #28]
 8005ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	617b      	str	r3, [r7, #20]
   return(result);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e3      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f83e 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b04:	e023      	b.n	8005b4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_UART_IRQHandler+0x4ea>
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f95d 	bl	8005dde <UART_Transmit_IT>
    return;
 8005b24:	e014      	b.n	8005b50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_UART_IRQHandler+0x514>
 8005b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f99d 	bl	8005e7e <UART_EndTransmit_IT>
    return;
 8005b44:	e004      	b.n	8005b50 <HAL_UART_IRQHandler+0x514>
    return;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_UART_IRQHandler+0x514>
      return;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_UART_IRQHandler+0x514>
      return;
 8005b4e:	bf00      	nop
  }
}
 8005b50:	37e8      	adds	r7, #232	; 0xe8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b090      	sub	sp, #64	; 0x40
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba8:	e050      	b.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d04c      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bb8:	f7fc fb68 	bl	800228c <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d241      	bcs.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005be8:	637a      	str	r2, [r7, #52]	; 0x34
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	623a      	str	r2, [r7, #32]
 8005c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	69f9      	ldr	r1, [r7, #28]
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e00f      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d09f      	beq.n	8005baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3740      	adds	r7, #64	; 0x40
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2222      	movs	r2, #34	; 0x22
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0220 	orr.w	r2, r2, #32
 8005ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b095      	sub	sp, #84	; 0x54
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d18:	643a      	str	r2, [r7, #64]	; 0x40
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d119      	bne.n	8005d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d88:	61ba      	str	r2, [r7, #24]
 8005d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6979      	ldr	r1, [r7, #20]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	613b      	str	r3, [r7, #16]
   return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005daa:	bf00      	nop
 8005dac:	3754      	adds	r7, #84	; 0x54
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fecb 	bl	8005b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b21      	cmp	r3, #33	; 0x21
 8005df0:	d13e      	bne.n	8005e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	d114      	bne.n	8005e26 <UART_Transmit_IT+0x48>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d110      	bne.n	8005e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]
 8005e24:	e008      	b.n	8005e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6211      	str	r1, [r2, #32]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4619      	mov	r1, r3
 8005e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10f      	bne.n	8005e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe5a 	bl	8005b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b08c      	sub	sp, #48	; 0x30
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b22      	cmp	r3, #34	; 0x22
 8005ec0:	f040 80ab 	bne.w	800601a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ecc:	d117      	bne.n	8005efe <UART_Receive_IT+0x50>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d113      	bne.n	8005efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
 8005efc:	e026      	b.n	8005f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d007      	beq.n	8005f22 <UART_Receive_IT+0x74>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <UART_Receive_IT+0x82>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e008      	b.n	8005f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d15a      	bne.n	8006016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0220 	bic.w	r2, r2, #32
 8005f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d135      	bne.n	800600c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f023 0310 	bic.w	r3, r3, #16
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc6:	623a      	str	r2, [r7, #32]
 8005fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d10a      	bne.n	8005ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fdbb 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
 800600a:	e002      	b.n	8006012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fa fcdd 	bl	80009cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e002      	b.n	800601c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3730      	adds	r7, #48	; 0x30
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006028:	b0c0      	sub	sp, #256	; 0x100
 800602a:	af00      	add	r7, sp, #0
 800602c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	ea40 0301 	orr.w	r3, r0, r1
 800604c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800607c:	f021 010c 	bic.w	r1, r1, #12
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800608a:	430b      	orrs	r3, r1
 800608c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	6999      	ldr	r1, [r3, #24]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	ea40 0301 	orr.w	r3, r0, r1
 80060aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b8f      	ldr	r3, [pc, #572]	; (80062f0 <UART_SetConfig+0x2cc>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d005      	beq.n	80060c4 <UART_SetConfig+0xa0>
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <UART_SetConfig+0x2d0>)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d104      	bne.n	80060ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fd fa7c 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 80060c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060cc:	e003      	b.n	80060d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ce:	f7fd fa63 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80060d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e0:	f040 810c 	bne.w	80062fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80060fe:	415b      	adcs	r3, r3
 8006100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006106:	4621      	mov	r1, r4
 8006108:	eb12 0801 	adds.w	r8, r2, r1
 800610c:	4629      	mov	r1, r5
 800610e:	eb43 0901 	adc.w	r9, r3, r1
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800611e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006126:	4690      	mov	r8, r2
 8006128:	4699      	mov	r9, r3
 800612a:	4623      	mov	r3, r4
 800612c:	eb18 0303 	adds.w	r3, r8, r3
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006134:	462b      	mov	r3, r5
 8006136:	eb49 0303 	adc.w	r3, r9, r3
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800614a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800614e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006152:	460b      	mov	r3, r1
 8006154:	18db      	adds	r3, r3, r3
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
 8006158:	4613      	mov	r3, r2
 800615a:	eb42 0303 	adc.w	r3, r2, r3
 800615e:	657b      	str	r3, [r7, #84]	; 0x54
 8006160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006168:	f7fa f84a 	bl	8000200 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4b61      	ldr	r3, [pc, #388]	; (80062f8 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2302 	umull	r2, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	011c      	lsls	r4, r3, #4
 800617a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617e:	2200      	movs	r2, #0
 8006180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	64b9      	str	r1, [r7, #72]	; 0x48
 8006194:	415b      	adcs	r3, r3
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800619c:	4641      	mov	r1, r8
 800619e:	eb12 0a01 	adds.w	sl, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb43 0b01 	adc.w	fp, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061bc:	4692      	mov	sl, r2
 80061be:	469b      	mov	fp, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	eb1a 0303 	adds.w	r3, sl, r3
 80061c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ca:	464b      	mov	r3, r9
 80061cc:	eb4b 0303 	adc.w	r3, fp, r3
 80061d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061e8:	460b      	mov	r3, r1
 80061ea:	18db      	adds	r3, r3, r3
 80061ec:	643b      	str	r3, [r7, #64]	; 0x40
 80061ee:	4613      	mov	r3, r2
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
 80061f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061fe:	f7f9 ffff 	bl	8000200 <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4611      	mov	r1, r2
 8006208:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <UART_SetConfig+0x2d4>)
 800620a:	fba3 2301 	umull	r2, r3, r3, r1
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2264      	movs	r2, #100	; 0x64
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	1acb      	subs	r3, r1, r3
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800621e:	4b36      	ldr	r3, [pc, #216]	; (80062f8 <UART_SetConfig+0x2d4>)
 8006220:	fba3 2302 	umull	r2, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800622c:	441c      	add	r4, r3
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800623c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	1891      	adds	r1, r2, r2
 8006246:	63b9      	str	r1, [r7, #56]	; 0x38
 8006248:	415b      	adcs	r3, r3
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006250:	4641      	mov	r1, r8
 8006252:	1851      	adds	r1, r2, r1
 8006254:	6339      	str	r1, [r7, #48]	; 0x30
 8006256:	4649      	mov	r1, r9
 8006258:	414b      	adcs	r3, r1
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006268:	4659      	mov	r1, fp
 800626a:	00cb      	lsls	r3, r1, #3
 800626c:	4651      	mov	r1, sl
 800626e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006272:	4651      	mov	r1, sl
 8006274:	00ca      	lsls	r2, r1, #3
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	4603      	mov	r3, r0
 800627c:	4642      	mov	r2, r8
 800627e:	189b      	adds	r3, r3, r2
 8006280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006284:	464b      	mov	r3, r9
 8006286:	460a      	mov	r2, r1
 8006288:	eb42 0303 	adc.w	r3, r2, r3
 800628c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800629c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062a4:	460b      	mov	r3, r1
 80062a6:	18db      	adds	r3, r3, r3
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	4613      	mov	r3, r2
 80062ac:	eb42 0303 	adc.w	r3, r2, r3
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062ba:	f7f9 ffa1 	bl	8000200 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <UART_SetConfig+0x2d4>)
 80062c4:	fba3 1302 	umull	r1, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	2164      	movs	r1, #100	; 0x64
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	3332      	adds	r3, #50	; 0x32
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <UART_SetConfig+0x2d4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 0207 	and.w	r2, r3, #7
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4422      	add	r2, r4
 80062ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ec:	e105      	b.n	80064fa <UART_SetConfig+0x4d6>
 80062ee:	bf00      	nop
 80062f0:	40011000 	.word	0x40011000
 80062f4:	40011400 	.word	0x40011400
 80062f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800630a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	1891      	adds	r1, r2, r2
 8006314:	6239      	str	r1, [r7, #32]
 8006316:	415b      	adcs	r3, r3
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
 800631a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800631e:	4641      	mov	r1, r8
 8006320:	1854      	adds	r4, r2, r1
 8006322:	4649      	mov	r1, r9
 8006324:	eb43 0501 	adc.w	r5, r3, r1
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	00eb      	lsls	r3, r5, #3
 8006332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006336:	00e2      	lsls	r2, r4, #3
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	4643      	mov	r3, r8
 800633e:	18e3      	adds	r3, r4, r3
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006344:	464b      	mov	r3, r9
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800635a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800636a:	4629      	mov	r1, r5
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006374:	4621      	mov	r1, r4
 8006376:	008a      	lsls	r2, r1, #2
 8006378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800637c:	f7f9 ff40 	bl	8000200 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4b60      	ldr	r3, [pc, #384]	; (8006508 <UART_SetConfig+0x4e4>)
 8006386:	fba3 2302 	umull	r2, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	011c      	lsls	r4, r3, #4
 800638e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800639c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	1891      	adds	r1, r2, r2
 80063a6:	61b9      	str	r1, [r7, #24]
 80063a8:	415b      	adcs	r3, r3
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b0:	4641      	mov	r1, r8
 80063b2:	1851      	adds	r1, r2, r1
 80063b4:	6139      	str	r1, [r7, #16]
 80063b6:	4649      	mov	r1, r9
 80063b8:	414b      	adcs	r3, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c8:	4659      	mov	r1, fp
 80063ca:	00cb      	lsls	r3, r1, #3
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d2:	4651      	mov	r1, sl
 80063d4:	00ca      	lsls	r2, r1, #3
 80063d6:	4610      	mov	r0, r2
 80063d8:	4619      	mov	r1, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	4642      	mov	r2, r8
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e4:	464b      	mov	r3, r9
 80063e6:	460a      	mov	r2, r1
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800641a:	f7f9 fef1 	bl	8000200 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b39      	ldr	r3, [pc, #228]	; (8006508 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	; 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	; 0x32
 8006436:	4a34      	ldr	r2, [pc, #208]	; (8006508 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006442:	441c      	add	r4, r3
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006448:	2200      	movs	r2, #0
 800644a:	673b      	str	r3, [r7, #112]	; 0x70
 800644c:	677a      	str	r2, [r7, #116]	; 0x74
 800644e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	1891      	adds	r1, r2, r2
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	415b      	adcs	r3, r3
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006462:	4641      	mov	r1, r8
 8006464:	1851      	adds	r1, r2, r1
 8006466:	6039      	str	r1, [r7, #0]
 8006468:	4649      	mov	r1, r9
 800646a:	414b      	adcs	r3, r1
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800647a:	4659      	mov	r1, fp
 800647c:	00cb      	lsls	r3, r1, #3
 800647e:	4651      	mov	r1, sl
 8006480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006484:	4651      	mov	r1, sl
 8006486:	00ca      	lsls	r2, r1, #3
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	4603      	mov	r3, r0
 800648e:	4642      	mov	r2, r8
 8006490:	189b      	adds	r3, r3, r2
 8006492:	66bb      	str	r3, [r7, #104]	; 0x68
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	663b      	str	r3, [r7, #96]	; 0x60
 80064a8:	667a      	str	r2, [r7, #100]	; 0x64
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064b6:	4649      	mov	r1, r9
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	4641      	mov	r1, r8
 80064bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c0:	4641      	mov	r1, r8
 80064c2:	008a      	lsls	r2, r1, #2
 80064c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064c8:	f7f9 fe9a 	bl	8000200 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <UART_SetConfig+0x4e4>)
 80064d2:	fba3 1302 	umull	r1, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2164      	movs	r1, #100	; 0x64
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	3332      	adds	r3, #50	; 0x32
 80064e4:	4a08      	ldr	r2, [pc, #32]	; (8006508 <UART_SetConfig+0x4e4>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4422      	add	r2, r4
 80064f8:	609a      	str	r2, [r3, #8]
}
 80064fa:	bf00      	nop
 80064fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006506:	bf00      	nop
 8006508:	51eb851f 	.word	0x51eb851f

0800650c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800651a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800651e:	2b84      	cmp	r3, #132	; 0x84
 8006520:	d005      	beq.n	800652e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006522:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	3303      	adds	r3, #3
 800652c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006540:	f001 f82a 	bl	8007598 <vTaskStartScheduler>
  
  return osOK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	bd80      	pop	{r7, pc}

0800654a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800654a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654c:	b089      	sub	sp, #36	; 0x24
 800654e:	af04      	add	r7, sp, #16
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d020      	beq.n	800659e <osThreadCreate+0x54>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01c      	beq.n	800659e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685c      	ldr	r4, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681d      	ldr	r5, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691e      	ldr	r6, [r3, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff ffc8 	bl	800650c <makeFreeRtosPriority>
 800657c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006586:	9202      	str	r2, [sp, #8]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	9100      	str	r1, [sp, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	4632      	mov	r2, r6
 8006590:	4629      	mov	r1, r5
 8006592:	4620      	mov	r0, r4
 8006594:	f000 fe22 	bl	80071dc <xTaskCreateStatic>
 8006598:	4603      	mov	r3, r0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e01c      	b.n	80065d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685c      	ldr	r4, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065aa:	b29e      	uxth	r6, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff ffaa 	bl	800650c <makeFreeRtosPriority>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f107 030c 	add.w	r3, r7, #12
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	9200      	str	r2, [sp, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4629      	mov	r1, r5
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 fe64 	bl	8007296 <xTaskCreate>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d001      	beq.n	80065d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	e000      	b.n	80065da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <osDelay+0x16>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	e000      	b.n	80065fa <osDelay+0x18>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 ff98 	bl	8007530 <vTaskDelay>
  
  return osOK;
 8006600:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af02      	add	r7, sp, #8
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d10a      	bne.n	8006638 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2203      	movs	r2, #3
 8006628:	9200      	str	r2, [sp, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	2100      	movs	r1, #0
 800662e:	2001      	movs	r0, #1
 8006630:	f000 f962 	bl	80068f8 <xQueueGenericCreateStatic>
 8006634:	4603      	mov	r3, r0
 8006636:	e016      	b.n	8006666 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	e014      	b.n	8006666 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d110      	bne.n	8006664 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006642:	2203      	movs	r2, #3
 8006644:	2100      	movs	r1, #0
 8006646:	2001      	movs	r0, #1
 8006648:	f000 f9ce 	bl	80069e8 <xQueueGenericCreate>
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <osSemaphoreCreate+0x56>
 8006654:	2300      	movs	r3, #0
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fa1e 	bl	8006a9c <xQueueGenericSend>
      return sema;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	e000      	b.n	8006666 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006664:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800666e:	b590      	push	{r4, r7, lr}
 8006670:	b085      	sub	sp, #20
 8006672:	af02      	add	r7, sp, #8
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <osMessageCreate+0x36>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00d      	beq.n	80066a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2400      	movs	r4, #0
 800669a:	9400      	str	r4, [sp, #0]
 800669c:	f000 f92c 	bl	80068f8 <xQueueGenericCreateStatic>
 80066a0:	4603      	mov	r3, r0
 80066a2:	e008      	b.n	80066b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	4619      	mov	r1, r3
 80066b0:	f000 f99a 	bl	80069e8 <xQueueGenericCreate>
 80066b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}

080066be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f103 0208 	add.w	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f103 0208 	add.w	r2, r3, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 0208 	add.w	r2, r3, #8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d103      	bne.n	8006780 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e00c      	b.n	800679a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3308      	adds	r3, #8
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e002      	b.n	800678e <vListInsert+0x2e>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	d2f6      	bcs.n	8006788 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6892      	ldr	r2, [r2, #8]
 80067e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d103      	bne.n	8006806 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	1e5a      	subs	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006852:	f001 fce7 	bl	8008224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	441a      	add	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	3b01      	subs	r3, #1
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	22ff      	movs	r2, #255	; 0xff
 8006896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	22ff      	movs	r2, #255	; 0xff
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d114      	bne.n	80068d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3310      	adds	r3, #16
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 f8c1 	bl	8007a3c <xTaskRemoveFromEventList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068c0:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <xQueueGenericReset+0xcc>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	e009      	b.n	80068e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3310      	adds	r3, #16
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fef1 	bl	80066be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff feec 	bl	80066be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068e6:	f001 fccd 	bl	8008284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068ea:	2301      	movs	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <xQueueGenericCreateStatic+0x52>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <xQueueGenericCreateStatic+0x56>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericCreateStatic+0x58>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <xQueueGenericCreateStatic+0x7e>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <xQueueGenericCreateStatic+0x82>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueGenericCreateStatic+0x84>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61fb      	str	r3, [r7, #28]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006996:	2348      	movs	r3, #72	; 0x48
 8006998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b48      	cmp	r3, #72	; 0x48
 800699e:	d00a      	beq.n	80069b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61bb      	str	r3, [r7, #24]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f83f 	bl	8006a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3730      	adds	r7, #48	; 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xQueueGenericCreate+0x2a>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	613b      	str	r3, [r7, #16]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3348      	adds	r3, #72	; 0x48
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fd21 	bl	8008468 <pvPortMalloc>
 8006a26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d011      	beq.n	8006a52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	3348      	adds	r3, #72	; 0x48
 8006a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a40:	79fa      	ldrb	r2, [r7, #7]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f805 	bl	8006a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a52:	69bb      	ldr	r3, [r7, #24]
	}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e002      	b.n	8006a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	69b8      	ldr	r0, [r7, #24]
 8006a8e:	f7ff fecb 	bl	8006828 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08e      	sub	sp, #56	; 0x38
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xQueueGenericSend+0x32>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <xQueueGenericSend+0x40>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <xQueueGenericSend+0x44>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <xQueueGenericSend+0x46>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <xQueueGenericSend+0x60>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d103      	bne.n	8006b0a <xQueueGenericSend+0x6e>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <xQueueGenericSend+0x72>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xQueueGenericSend+0x74>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueGenericSend+0x8e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	623b      	str	r3, [r7, #32]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b2a:	f001 f947 	bl	8007dbc <xTaskGetSchedulerState>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <xQueueGenericSend+0x9e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericSend+0xa2>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericSend+0xa4>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xQueueGenericSend+0xbe>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	61fb      	str	r3, [r7, #28]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b5a:	f001 fb63 	bl	8008224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <xQueueGenericSend+0xd4>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d129      	bne.n	8006bc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b76:	f000 fa37 	bl	8006fe8 <prvCopyDataToQueue>
 8006b7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 ff57 	bl	8007a3c <xTaskRemoveFromEventList>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b94:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <xQueueGenericSend+0x1f8>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	e00a      	b.n	8006bbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bac:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <xQueueGenericSend+0x1f8>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bbc:	f001 fb62 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e063      	b.n	8006c8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bca:	f001 fb5b 	bl	8008284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e05c      	b.n	8006c8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 ff8f 	bl	8007b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006be6:	f001 fb4d 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bea:	f000 fd3f 	bl	800766c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bee:	f001 fb19 	bl	8008224 <vPortEnterCritical>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d103      	bne.n	8006c08 <xQueueGenericSend+0x16c>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c0e:	b25b      	sxtb	r3, r3
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d103      	bne.n	8006c1e <xQueueGenericSend+0x182>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c1e:	f001 fb31 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c22:	1d3a      	adds	r2, r7, #4
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 ff7e 	bl	8007b2c <xTaskCheckForTimeOut>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d124      	bne.n	8006c80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c38:	f000 fab8 	bl	80071ac <prvIsQueueFull>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d018      	beq.n	8006c74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	3310      	adds	r3, #16
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fed2 	bl	80079f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c52:	f000 fa59 	bl	8007108 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c56:	f000 fd17 	bl	8007688 <xTaskResumeAll>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f47f af7c 	bne.w	8006b5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <xQueueGenericSend+0x1f8>)
 8006c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	e772      	b.n	8006b5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c76:	f000 fa47 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c7a:	f000 fd05 	bl	8007688 <xTaskResumeAll>
 8006c7e:	e76c      	b.n	8006b5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c82:	f000 fa41 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c86:	f000 fcff 	bl	8007688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3738      	adds	r7, #56	; 0x38
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	e000ed04 	.word	0xe000ed04

08006c98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b090      	sub	sp, #64	; 0x40
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d103      	bne.n	8006cd4 <xQueueGenericSendFromISR+0x3c>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <xQueueGenericSendFromISR+0x40>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <xQueueGenericSendFromISR+0x42>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d103      	bne.n	8006d02 <xQueueGenericSendFromISR+0x6a>
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <xQueueGenericSendFromISR+0x6e>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <xQueueGenericSendFromISR+0x70>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	623b      	str	r3, [r7, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d22:	f001 fb61 	bl	80083e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d26:	f3ef 8211 	mrs	r2, BASEPRI
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	61fa      	str	r2, [r7, #28]
 8006d3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d302      	bcc.n	8006d54 <xQueueGenericSendFromISR+0xbc>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d12f      	bne.n	8006db4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d6a:	f000 f93d 	bl	8006fe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d112      	bne.n	8006d9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fe59 	bl	8007a3c <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e007      	b.n	8006dae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006da2:	3301      	adds	r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	b25a      	sxtb	r2, r3
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dae:	2301      	movs	r3, #1
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006db2:	e001      	b.n	8006db8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3740      	adds	r7, #64	; 0x40
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08e      	sub	sp, #56	; 0x38
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	623b      	str	r3, [r7, #32]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	61fb      	str	r3, [r7, #28]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <xQueueGiveFromISR+0x58>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <xQueueGiveFromISR+0x5c>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <xQueueGiveFromISR+0x5e>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	61bb      	str	r3, [r7, #24]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e46:	f001 facf 	bl	80083e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	617a      	str	r2, [r7, #20]
 8006e60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d22b      	bcs.n	8006ece <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d112      	bne.n	8006eb8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fdcc 	bl	8007a3c <xTaskRemoveFromEventList>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e007      	b.n	8006ec8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	b25a      	sxtb	r2, r3
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
 8006ecc:	e001      	b.n	8006ed2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
}
 8006edc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3738      	adds	r7, #56	; 0x38
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08e      	sub	sp, #56	; 0x38
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	623b      	str	r3, [r7, #32]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <xQueueReceiveFromISR+0x3a>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <xQueueReceiveFromISR+0x3e>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueReceiveFromISR+0x40>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61fb      	str	r3, [r7, #28]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f42:	f001 fa51 	bl	80083e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f46:	f3ef 8211 	mrs	r2, BASEPRI
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61ba      	str	r2, [r7, #24]
 8006f5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02f      	beq.n	8006fce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f7c:	f000 f89e 	bl	80070bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d112      	bne.n	8006fb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fd4c 	bl	8007a3c <xTaskRemoveFromEventList>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e007      	b.n	8006fc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	b25a      	sxtb	r2, r3
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
 8006fcc:	e001      	b.n	8006fd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f383 8811 	msr	BASEPRI, r3
}
 8006fdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3738      	adds	r7, #56	; 0x38
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14d      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fef0 	bl	8007df8 <xTaskPriorityDisinherit>
 8007018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	e043      	b.n	80070aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6858      	ldr	r0, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	461a      	mov	r2, r3
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	f001 fd25 	bl	8008a82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d32b      	bcc.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e026      	b.n	80070aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68d8      	ldr	r0, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	461a      	mov	r2, r3
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	f001 fd0b 	bl	8008a82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	425b      	negs	r3, r3
 8007076:	441a      	add	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d207      	bcs.n	8007098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	425b      	negs	r3, r3
 8007092:	441a      	add	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d105      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070b2:	697b      	ldr	r3, [r7, #20]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d303      	bcc.n	80070f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	461a      	mov	r2, r3
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f001 fcc1 	bl	8008a82 <memcpy>
	}
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007110:	f001 f888 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711c:	e011      	b.n	8007142 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fc86 	bl	8007a3c <xTaskRemoveFromEventList>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007136:	f000 fd5b 	bl	8007bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dce9      	bgt.n	800711e <prvUnlockQueue+0x16>
 800714a:	e000      	b.n	800714e <prvUnlockQueue+0x46>
					break;
 800714c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	22ff      	movs	r2, #255	; 0xff
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007156:	f001 f895 	bl	8008284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800715a:	f001 f863 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007164:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007166:	e011      	b.n	800718c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3310      	adds	r3, #16
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fc61 	bl	8007a3c <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007180:	f000 fd36 	bl	8007bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	3b01      	subs	r3, #1
 8007188:	b2db      	uxtb	r3, r3
 800718a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800718c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007190:	2b00      	cmp	r3, #0
 8007192:	dce9      	bgt.n	8007168 <prvUnlockQueue+0x60>
 8007194:	e000      	b.n	8007198 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007196:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 f870 	bl	8008284 <vPortExitCritical>
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 f836 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d102      	bne.n	80071ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 f859 	bl	8008284 <vPortExitCritical>

	return xReturn;
 80071d2:	68fb      	ldr	r3, [r7, #12]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	623b      	str	r3, [r7, #32]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <xTaskCreateStatic+0x46>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	61fb      	str	r3, [r7, #28]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007222:	23b4      	movs	r3, #180	; 0xb4
 8007224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2bb4      	cmp	r3, #180	; 0xb4
 800722a:	d00a      	beq.n	8007242 <xTaskCreateStatic+0x66>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61bb      	str	r3, [r7, #24]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007242:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01e      	beq.n	8007288 <xTaskCreateStatic+0xac>
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01b      	beq.n	8007288 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007258:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2202      	movs	r2, #2
 800725e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f850 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007282:	f000 f8eb 	bl	800745c <prvAddNewTaskToReadyList>
 8007286:	e001      	b.n	800728c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800728c:	697b      	ldr	r3, [r7, #20]
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007296:	b580      	push	{r7, lr}
 8007298:	b08c      	sub	sp, #48	; 0x30
 800729a:	af04      	add	r7, sp, #16
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f8dc 	bl	8008468 <pvPortMalloc>
 80072b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072b8:	20b4      	movs	r0, #180	; 0xb4
 80072ba:	f001 f8d5 	bl	8008468 <pvPortMalloc>
 80072be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
 80072cc:	e005      	b.n	80072da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f001 f996 	bl	8008600 <vPortFree>
 80072d4:	e001      	b.n	80072da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d017      	beq.n	8007310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f80e 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007304:	69f8      	ldr	r0, [r7, #28]
 8007306:	f000 f8a9 	bl	800745c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e002      	b.n	8007316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007316:	69bb      	ldr	r3, [r7, #24]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007338:	3b01      	subs	r3, #1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01f      	beq.n	80073ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e012      	b.n	800739a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	7819      	ldrb	r1, [r3, #0]
 800737c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	3334      	adds	r3, #52	; 0x34
 8007384:	460a      	mov	r2, r1
 8007386:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	3301      	adds	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d9e9      	bls.n	8007374 <prvInitialiseNewTask+0x54>
 80073a0:	e000      	b.n	80073a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80073a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073ac:	e003      	b.n	80073b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d901      	bls.n	80073c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073bc:	2306      	movs	r3, #6
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2200      	movs	r2, #0
 80073d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	3304      	adds	r3, #4
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f991 	bl	80066fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	3318      	adds	r3, #24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff f98c 	bl	80066fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	f1c3 0207 	rsb	r2, r3, #7
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2200      	movs	r2, #0
 8007408:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	334c      	adds	r3, #76	; 0x4c
 8007410:	2260      	movs	r2, #96	; 0x60
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fb42 	bl	8008a9e <memset>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <prvInitialiseNewTask+0x130>)
 800741e:	651a      	str	r2, [r3, #80]	; 0x50
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <prvInitialiseNewTask+0x134>)
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <prvInitialiseNewTask+0x138>)
 800742a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	69b8      	ldr	r0, [r7, #24]
 8007432:	f000 fdcd 	bl	8007fd0 <pxPortInitialiseStack>
 8007436:	4602      	mov	r2, r0
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007448:	bf00      	nop
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	080096e8 	.word	0x080096e8
 8007454:	08009708 	.word	0x08009708
 8007458:	080096c8 	.word	0x080096c8

0800745c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007464:	f000 fede 	bl	8008224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007468:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a29      	ldr	r2, [pc, #164]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 8007470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007472:	4b29      	ldr	r3, [pc, #164]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747a:	4a27      	ldr	r2, [pc, #156]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007480:	4b24      	ldr	r3, [pc, #144]	; (8007514 <prvAddNewTaskToReadyList+0xb8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d110      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007488:	f000 fbd6 	bl	8007c38 <prvInitialiseTaskLists>
 800748c:	e00d      	b.n	80074aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748e:	4b23      	ldr	r3, [pc, #140]	; (800751c <prvAddNewTaskToReadyList+0xc0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007496:	4b20      	ldr	r3, [pc, #128]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d802      	bhi.n	80074aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 80074b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	2201      	movs	r2, #1
 80074ba:	409a      	lsls	r2, r3
 80074bc:	4b19      	ldr	r3, [pc, #100]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	4a18      	ldr	r2, [pc, #96]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvAddNewTaskToReadyList+0xcc>)
 80074d4:	441a      	add	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7ff f91b 	bl	8006718 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e2:	f000 fecf 	bl	8008284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <prvAddNewTaskToReadyList+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074ee:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <prvAddNewTaskToReadyList+0xbc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d207      	bcs.n	800750c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <prvAddNewTaskToReadyList+0xd0>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	200007a4 	.word	0x200007a4
 8007518:	200006a4 	.word	0x200006a4
 800751c:	200007b0 	.word	0x200007b0
 8007520:	200007c0 	.word	0x200007c0
 8007524:	200007ac 	.word	0x200007ac
 8007528:	200006a8 	.word	0x200006a8
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d017      	beq.n	8007572 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <vTaskDelay+0x60>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vTaskDelay+0x30>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007560:	f000 f884 	bl	800766c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fccc 	bl	8007f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800756c:	f000 f88c 	bl	8007688 <xTaskResumeAll>
 8007570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <vTaskDelay+0x64>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	200007cc 	.word	0x200007cc
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075a6:	463a      	mov	r2, r7
 80075a8:	1d39      	adds	r1, r7, #4
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f8 ffba 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	460a      	mov	r2, r1
 80075c6:	4921      	ldr	r1, [pc, #132]	; (800764c <vTaskStartScheduler+0xb4>)
 80075c8:	4821      	ldr	r0, [pc, #132]	; (8007650 <vTaskStartScheduler+0xb8>)
 80075ca:	f7ff fe07 	bl	80071dc <xTaskCreateStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a20      	ldr	r2, [pc, #128]	; (8007654 <vTaskStartScheduler+0xbc>)
 80075d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <vTaskStartScheduler+0xbc>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e001      	b.n	80075e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d11b      	bne.n	8007624 <vTaskStartScheduler+0x8c>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	613b      	str	r3, [r7, #16]
}
 80075fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007600:	4b15      	ldr	r3, [pc, #84]	; (8007658 <vTaskStartScheduler+0xc0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	334c      	adds	r3, #76	; 0x4c
 8007606:	4a15      	ldr	r2, [pc, #84]	; (800765c <vTaskStartScheduler+0xc4>)
 8007608:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800760a:	4b15      	ldr	r3, [pc, #84]	; (8007660 <vTaskStartScheduler+0xc8>)
 800760c:	f04f 32ff 	mov.w	r2, #4294967295
 8007610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007612:	4b14      	ldr	r3, [pc, #80]	; (8007664 <vTaskStartScheduler+0xcc>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <vTaskStartScheduler+0xd0>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800761e:	f000 fd5f 	bl	80080e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007622:	e00e      	b.n	8007642 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d10a      	bne.n	8007642 <vTaskStartScheduler+0xaa>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <vTaskStartScheduler+0xa8>
}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	080096a8 	.word	0x080096a8
 8007650:	08007c09 	.word	0x08007c09
 8007654:	200007c8 	.word	0x200007c8
 8007658:	200006a4 	.word	0x200006a4
 800765c:	20000010 	.word	0x20000010
 8007660:	200007c4 	.word	0x200007c4
 8007664:	200007b0 	.word	0x200007b0
 8007668:	200007a8 	.word	0x200007a8

0800766c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <vTaskSuspendAll+0x18>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a03      	ldr	r2, [pc, #12]	; (8007684 <vTaskSuspendAll+0x18>)
 8007678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800767a:	bf00      	nop
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	200007cc 	.word	0x200007cc

08007688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007696:	4b41      	ldr	r3, [pc, #260]	; (800779c <xTaskResumeAll+0x114>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	603b      	str	r3, [r7, #0]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076b4:	f000 fdb6 	bl	8008224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076b8:	4b38      	ldr	r3, [pc, #224]	; (800779c <xTaskResumeAll+0x114>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4a37      	ldr	r2, [pc, #220]	; (800779c <xTaskResumeAll+0x114>)
 80076c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b36      	ldr	r3, [pc, #216]	; (800779c <xTaskResumeAll+0x114>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d161      	bne.n	800778e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076ca:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <xTaskResumeAll+0x118>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d05d      	beq.n	800778e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d2:	e02e      	b.n	8007732 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d4:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <xTaskResumeAll+0x11c>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3318      	adds	r3, #24
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff f876 	bl	80067d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff f871 	bl	80067d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <xTaskResumeAll+0x120>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <xTaskResumeAll+0x120>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a27      	ldr	r2, [pc, #156]	; (80077ac <xTaskResumeAll+0x124>)
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f7fe fffd 	bl	8006718 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	4b23      	ldr	r3, [pc, #140]	; (80077b0 <xTaskResumeAll+0x128>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800772c:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <xTaskResumeAll+0x12c>)
 800772e:	2201      	movs	r2, #1
 8007730:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007732:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <xTaskResumeAll+0x11c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1cc      	bne.n	80076d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007740:	f000 fb1c 	bl	8007d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007744:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <xTaskResumeAll+0x130>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d010      	beq.n	8007772 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007750:	f000 f836 	bl	80077c0 <xTaskIncrementTick>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800775a:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <xTaskResumeAll+0x12c>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3b01      	subs	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f1      	bne.n	8007750 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <xTaskResumeAll+0x130>)
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <xTaskResumeAll+0x12c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800777a:	2301      	movs	r3, #1
 800777c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800777e:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <xTaskResumeAll+0x134>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800778e:	f000 fd79 	bl	8008284 <vPortExitCritical>

	return xAlreadyYielded;
 8007792:	68bb      	ldr	r3, [r7, #8]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200007cc 	.word	0x200007cc
 80077a0:	200007a4 	.word	0x200007a4
 80077a4:	20000764 	.word	0x20000764
 80077a8:	200007ac 	.word	0x200007ac
 80077ac:	200006a8 	.word	0x200006a8
 80077b0:	200006a4 	.word	0x200006a4
 80077b4:	200007b8 	.word	0x200007b8
 80077b8:	200007b4 	.word	0x200007b4
 80077bc:	e000ed04 	.word	0xe000ed04

080077c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ca:	4b4e      	ldr	r3, [pc, #312]	; (8007904 <xTaskIncrementTick+0x144>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 808e 	bne.w	80078f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077d4:	4b4c      	ldr	r3, [pc, #304]	; (8007908 <xTaskIncrementTick+0x148>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077dc:	4a4a      	ldr	r2, [pc, #296]	; (8007908 <xTaskIncrementTick+0x148>)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d120      	bne.n	800782a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077e8:	4b48      	ldr	r3, [pc, #288]	; (800790c <xTaskIncrementTick+0x14c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <xTaskIncrementTick+0x48>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	603b      	str	r3, [r7, #0]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xTaskIncrementTick+0x46>
 8007808:	4b40      	ldr	r3, [pc, #256]	; (800790c <xTaskIncrementTick+0x14c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	4b40      	ldr	r3, [pc, #256]	; (8007910 <xTaskIncrementTick+0x150>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a3e      	ldr	r2, [pc, #248]	; (800790c <xTaskIncrementTick+0x14c>)
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4a3e      	ldr	r2, [pc, #248]	; (8007910 <xTaskIncrementTick+0x150>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	4b3d      	ldr	r3, [pc, #244]	; (8007914 <xTaskIncrementTick+0x154>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	4a3c      	ldr	r2, [pc, #240]	; (8007914 <xTaskIncrementTick+0x154>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	f000 faa9 	bl	8007d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800782a:	4b3b      	ldr	r3, [pc, #236]	; (8007918 <xTaskIncrementTick+0x158>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	429a      	cmp	r2, r3
 8007832:	d348      	bcc.n	80078c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007834:	4b35      	ldr	r3, [pc, #212]	; (800790c <xTaskIncrementTick+0x14c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783e:	4b36      	ldr	r3, [pc, #216]	; (8007918 <xTaskIncrementTick+0x158>)
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	601a      	str	r2, [r3, #0]
					break;
 8007846:	e03e      	b.n	80078c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b30      	ldr	r3, [pc, #192]	; (800790c <xTaskIncrementTick+0x14c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d203      	bcs.n	8007868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007860:	4a2d      	ldr	r2, [pc, #180]	; (8007918 <xTaskIncrementTick+0x158>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007866:	e02e      	b.n	80078c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe ffb0 	bl	80067d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3318      	adds	r3, #24
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe ffa7 	bl	80067d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	2201      	movs	r2, #1
 800788a:	409a      	lsls	r2, r3
 800788c:	4b23      	ldr	r3, [pc, #140]	; (800791c <xTaskIncrementTick+0x15c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4313      	orrs	r3, r2
 8007892:	4a22      	ldr	r2, [pc, #136]	; (800791c <xTaskIncrementTick+0x15c>)
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <xTaskIncrementTick+0x160>)
 80078a4:	441a      	add	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fe ff33 	bl	8006718 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <xTaskIncrementTick+0x164>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	429a      	cmp	r2, r3
 80078be:	d3b9      	bcc.n	8007834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c4:	e7b6      	b.n	8007834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078c6:	4b17      	ldr	r3, [pc, #92]	; (8007924 <xTaskIncrementTick+0x164>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4914      	ldr	r1, [pc, #80]	; (8007920 <xTaskIncrementTick+0x160>)
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d901      	bls.n	80078e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <xTaskIncrementTick+0x168>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e004      	b.n	80078fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <xTaskIncrementTick+0x16c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a0d      	ldr	r2, [pc, #52]	; (800792c <xTaskIncrementTick+0x16c>)
 80078f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078fa:	697b      	ldr	r3, [r7, #20]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200007cc 	.word	0x200007cc
 8007908:	200007a8 	.word	0x200007a8
 800790c:	2000075c 	.word	0x2000075c
 8007910:	20000760 	.word	0x20000760
 8007914:	200007bc 	.word	0x200007bc
 8007918:	200007c4 	.word	0x200007c4
 800791c:	200007ac 	.word	0x200007ac
 8007920:	200006a8 	.word	0x200006a8
 8007924:	200006a4 	.word	0x200006a4
 8007928:	200007b8 	.word	0x200007b8
 800792c:	200007b4 	.word	0x200007b4

08007930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007936:	4b29      	ldr	r3, [pc, #164]	; (80079dc <vTaskSwitchContext+0xac>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800793e:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <vTaskSwitchContext+0xb0>)
 8007940:	2201      	movs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007944:	e044      	b.n	80079d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007946:	4b26      	ldr	r3, [pc, #152]	; (80079e0 <vTaskSwitchContext+0xb0>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794c:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <vTaskSwitchContext+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	fab3 f383 	clz	r3, r3
 8007958:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f1c3 031f 	rsb	r3, r3, #31
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	4921      	ldr	r1, [pc, #132]	; (80079e8 <vTaskSwitchContext+0xb8>)
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	607b      	str	r3, [r7, #4]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <vTaskSwitchContext+0x5a>
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <vTaskSwitchContext+0xb8>)
 8007998:	4413      	add	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3308      	adds	r3, #8
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d104      	bne.n	80079bc <vTaskSwitchContext+0x8c>
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <vTaskSwitchContext+0xbc>)
 80079c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079c6:	4b09      	ldr	r3, [pc, #36]	; (80079ec <vTaskSwitchContext+0xbc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	334c      	adds	r3, #76	; 0x4c
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <vTaskSwitchContext+0xc0>)
 80079ce:	6013      	str	r3, [r2, #0]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	200007cc 	.word	0x200007cc
 80079e0:	200007b8 	.word	0x200007b8
 80079e4:	200007ac 	.word	0x200007ac
 80079e8:	200006a8 	.word	0x200006a8
 80079ec:	200006a4 	.word	0x200006a4
 80079f0:	20000010 	.word	0x20000010

080079f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <vTaskPlaceOnEventList+0x44>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3318      	adds	r3, #24
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fe fe9c 	bl	8006760 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a28:	2101      	movs	r1, #1
 8007a2a:	6838      	ldr	r0, [r7, #0]
 8007a2c:	f000 fa6a 	bl	8007f04 <prvAddCurrentTaskToDelayedList>
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200006a4 	.word	0x200006a4

08007a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60fb      	str	r3, [r7, #12]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3318      	adds	r3, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe feb0 	bl	80067d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <xTaskRemoveFromEventList+0xac>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d11c      	bne.n	8007ab4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fea7 	bl	80067d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	2201      	movs	r2, #1
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <xTaskRemoveFromEventList+0xb0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	4a16      	ldr	r2, [pc, #88]	; (8007aec <xTaskRemoveFromEventList+0xb0>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <xTaskRemoveFromEventList+0xb4>)
 8007aa4:	441a      	add	r2, r3
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fe fe33 	bl	8006718 <vListInsertEnd>
 8007ab2:	e005      	b.n	8007ac0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	3318      	adds	r3, #24
 8007ab8:	4619      	mov	r1, r3
 8007aba:	480e      	ldr	r0, [pc, #56]	; (8007af4 <xTaskRemoveFromEventList+0xb8>)
 8007abc:	f7fe fe2c 	bl	8006718 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <xTaskRemoveFromEventList+0xbc>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d905      	bls.n	8007ada <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <xTaskRemoveFromEventList+0xc0>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e001      	b.n	8007ade <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ade:	697b      	ldr	r3, [r7, #20]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	200007cc 	.word	0x200007cc
 8007aec:	200007ac 	.word	0x200007ac
 8007af0:	200006a8 	.word	0x200006a8
 8007af4:	20000764 	.word	0x20000764
 8007af8:	200006a4 	.word	0x200006a4
 8007afc:	200007b8 	.word	0x200007b8

08007b00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <vTaskInternalSetTimeOutState+0x24>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <vTaskInternalSetTimeOutState+0x28>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	200007bc 	.word	0x200007bc
 8007b28:	200007a8 	.word	0x200007a8

08007b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	613b      	str	r3, [r7, #16]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	60fb      	str	r3, [r7, #12]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b6e:	f000 fb59 	bl	8008224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b72:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <xTaskCheckForTimeOut+0xbc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d102      	bne.n	8007b92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e023      	b.n	8007bda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b15      	ldr	r3, [pc, #84]	; (8007bec <xTaskCheckForTimeOut+0xc0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d007      	beq.n	8007bae <xTaskCheckForTimeOut+0x82>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e015      	b.n	8007bda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d20b      	bcs.n	8007bd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff ff9b 	bl	8007b00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	e004      	b.n	8007bda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bda:	f000 fb53 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8007bde:	69fb      	ldr	r3, [r7, #28]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	200007a8 	.word	0x200007a8
 8007bec:	200007bc 	.word	0x200007bc

08007bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <vTaskMissedYield+0x14>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	200007b8 	.word	0x200007b8

08007c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c10:	f000 f852 	bl	8007cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <prvIdleTask+0x28>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d9f9      	bls.n	8007c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <prvIdleTask+0x2c>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c2c:	e7f0      	b.n	8007c10 <prvIdleTask+0x8>
 8007c2e:	bf00      	nop
 8007c30:	200006a8 	.word	0x200006a8
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	e00c      	b.n	8007c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4a12      	ldr	r2, [pc, #72]	; (8007c98 <prvInitialiseTaskLists+0x60>)
 8007c50:	4413      	add	r3, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fd33 	bl	80066be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b06      	cmp	r3, #6
 8007c62:	d9ef      	bls.n	8007c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c64:	480d      	ldr	r0, [pc, #52]	; (8007c9c <prvInitialiseTaskLists+0x64>)
 8007c66:	f7fe fd2a 	bl	80066be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c6a:	480d      	ldr	r0, [pc, #52]	; (8007ca0 <prvInitialiseTaskLists+0x68>)
 8007c6c:	f7fe fd27 	bl	80066be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c70:	480c      	ldr	r0, [pc, #48]	; (8007ca4 <prvInitialiseTaskLists+0x6c>)
 8007c72:	f7fe fd24 	bl	80066be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c76:	480c      	ldr	r0, [pc, #48]	; (8007ca8 <prvInitialiseTaskLists+0x70>)
 8007c78:	f7fe fd21 	bl	80066be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c7c:	480b      	ldr	r0, [pc, #44]	; (8007cac <prvInitialiseTaskLists+0x74>)
 8007c7e:	f7fe fd1e 	bl	80066be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <prvInitialiseTaskLists+0x78>)
 8007c84:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <prvInitialiseTaskLists+0x64>)
 8007c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvInitialiseTaskLists+0x7c>)
 8007c8a:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <prvInitialiseTaskLists+0x68>)
 8007c8c:	601a      	str	r2, [r3, #0]
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200006a8 	.word	0x200006a8
 8007c9c:	20000734 	.word	0x20000734
 8007ca0:	20000748 	.word	0x20000748
 8007ca4:	20000764 	.word	0x20000764
 8007ca8:	20000778 	.word	0x20000778
 8007cac:	20000790 	.word	0x20000790
 8007cb0:	2000075c 	.word	0x2000075c
 8007cb4:	20000760 	.word	0x20000760

08007cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cbe:	e019      	b.n	8007cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cc0:	f000 fab0 	bl	8008224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <prvCheckTasksWaitingTermination+0x50>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fd7e 	bl	80067d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <prvCheckTasksWaitingTermination+0x54>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <prvCheckTasksWaitingTermination+0x54>)
 8007cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <prvCheckTasksWaitingTermination+0x58>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <prvCheckTasksWaitingTermination+0x58>)
 8007ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cea:	f000 facb 	bl	8008284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f810 	bl	8007d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <prvCheckTasksWaitingTermination+0x58>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e1      	bne.n	8007cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000778 	.word	0x20000778
 8007d0c:	200007a4 	.word	0x200007a4
 8007d10:	2000078c 	.word	0x2000078c

08007d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	334c      	adds	r3, #76	; 0x4c
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 ffdd 	bl	8008ce0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fc63 	bl	8008600 <vPortFree>
				vPortFree( pxTCB );
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fc60 	bl	8008600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d40:	e018      	b.n	8007d74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d103      	bne.n	8007d54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc57 	bl	8008600 <vPortFree>
	}
 8007d52:	e00f      	b.n	8007d74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d00a      	beq.n	8007d74 <prvDeleteTCB+0x60>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <prvDeleteTCB+0x5e>
	}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <prvResetNextTaskUnblockTime+0x38>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvResetNextTaskUnblockTime+0x3c>)
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d94:	e008      	b.n	8007da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <prvResetNextTaskUnblockTime+0x38>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4a04      	ldr	r2, [pc, #16]	; (8007db8 <prvResetNextTaskUnblockTime+0x3c>)
 8007da6:	6013      	str	r3, [r2, #0]
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	2000075c 	.word	0x2000075c
 8007db8:	200007c4 	.word	0x200007c4

08007dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <xTaskGetSchedulerState+0x34>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	e008      	b.n	8007de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dd0:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <xTaskGetSchedulerState+0x38>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	e001      	b.n	8007de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007de2:	687b      	ldr	r3, [r7, #4]
	}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	200007b0 	.word	0x200007b0
 8007df4:	200007cc 	.word	0x200007cc

08007df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d06e      	beq.n	8007eec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e0e:	4b3a      	ldr	r3, [pc, #232]	; (8007ef8 <xTaskPriorityDisinherit+0x100>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d00a      	beq.n	8007e2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	60fb      	str	r3, [r7, #12]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60bb      	str	r3, [r7, #8]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d044      	beq.n	8007eec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d140      	bne.n	8007eec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fcaf 	bl	80067d2 <uxListRemove>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d115      	bne.n	8007ea6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	491f      	ldr	r1, [pc, #124]	; (8007efc <xTaskPriorityDisinherit+0x104>)
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xTaskPriorityDisinherit+0xae>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	2201      	movs	r2, #1
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	43da      	mvns	r2, r3
 8007e9c:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <xTaskPriorityDisinherit+0x108>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	4a17      	ldr	r2, [pc, #92]	; (8007f00 <xTaskPriorityDisinherit+0x108>)
 8007ea4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	f1c3 0207 	rsb	r2, r3, #7
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	409a      	lsls	r2, r3
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <xTaskPriorityDisinherit+0x108>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <xTaskPriorityDisinherit+0x108>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <xTaskPriorityDisinherit+0x104>)
 8007eda:	441a      	add	r2, r3
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f7fe fc18 	bl	8006718 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eec:	697b      	ldr	r3, [r7, #20]
	}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200006a4 	.word	0x200006a4
 8007efc:	200006a8 	.word	0x200006a8
 8007f00:	200007ac 	.word	0x200007ac

08007f04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f0e:	4b29      	ldr	r3, [pc, #164]	; (8007fb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f14:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fc59 	bl	80067d2 <uxListRemove>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f26:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	43da      	mvns	r2, r3
 8007f34:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d10a      	bne.n	8007f5c <prvAddCurrentTaskToDelayedList+0x58>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4619      	mov	r1, r3
 8007f54:	481a      	ldr	r0, [pc, #104]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f56:	f7fe fbdf 	bl	8006718 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f5a:	e026      	b.n	8007faa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f64:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d209      	bcs.n	8007f88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f74:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7fe fbed 	bl	8006760 <vListInsert>
}
 8007f86:	e010      	b.n	8007faa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f88:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f7fe fbe3 	bl	8006760 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d202      	bcs.n	8007faa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fa4:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6013      	str	r3, [r2, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200007a8 	.word	0x200007a8
 8007fb8:	200006a4 	.word	0x200006a4
 8007fbc:	200007ac 	.word	0x200007ac
 8007fc0:	20000790 	.word	0x20000790
 8007fc4:	20000760 	.word	0x20000760
 8007fc8:	2000075c 	.word	0x2000075c
 8007fcc:	200007c4 	.word	0x200007c4

08007fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3b04      	subs	r3, #4
 8007fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3b04      	subs	r3, #4
 8007fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b04      	subs	r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <pxPortInitialiseStack+0x64>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3b14      	subs	r3, #20
 800800a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b04      	subs	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f06f 0202 	mvn.w	r2, #2
 800801e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b20      	subs	r3, #32
 8008024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008026:	68fb      	ldr	r3, [r7, #12]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	08008039 	.word	0x08008039

08008038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <prvTaskExitError+0x54>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d00a      	beq.n	8008062 <prvTaskExitError+0x2a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60fb      	str	r3, [r7, #12]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <prvTaskExitError+0x28>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	60bb      	str	r3, [r7, #8]
}
 8008074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008076:	bf00      	nop
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0fc      	beq.n	8008078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	2000000c 	.word	0x2000000c

08008090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <pxCurrentTCBConst2>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f380 8809 	msr	PSP, r0
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	4770      	bx	lr
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst2>:
 80080b0:	200006a4 	.word	0x200006a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <prvPortStartFirstTask+0x24>)
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f380 8808 	msr	MSP, r0
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8814 	msr	CONTROL, r0
 80080ca:	b662      	cpsie	i
 80080cc:	b661      	cpsie	f
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	df00      	svc	0
 80080d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080da:	bf00      	nop
 80080dc:	e000ed08 	.word	0xe000ed08

080080e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080e6:	4b46      	ldr	r3, [pc, #280]	; (8008200 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a46      	ldr	r2, [pc, #280]	; (8008204 <xPortStartScheduler+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008106:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <xPortStartScheduler+0x120>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3f      	ldr	r2, [pc, #252]	; (8008208 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10a      	bne.n	8008126 <xPortStartScheduler+0x46>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <xPortStartScheduler+0x12c>)
 8008128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <xPortStartScheduler+0x130>)
 800814c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <xPortStartScheduler+0x134>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008154:	e009      	b.n	800816a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <xPortStartScheduler+0x134>)
 800815e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d0ef      	beq.n	8008156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <xPortStartScheduler+0x134>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	d00a      	beq.n	8008198 <xPortStartScheduler+0xb8>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <xPortStartScheduler+0x134>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <xPortStartScheduler+0x134>)
 80081a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xPortStartScheduler+0x134>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <xPortStartScheduler+0x134>)
 80081ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <xPortStartScheduler+0x138>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <xPortStartScheduler+0x138>)
 80081bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <xPortStartScheduler+0x138>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a14      	ldr	r2, [pc, #80]	; (8008218 <xPortStartScheduler+0x138>)
 80081c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ce:	f000 f8dd 	bl	800838c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <xPortStartScheduler+0x13c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081d8:	f000 f8fc 	bl	80083d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xPortStartScheduler+0x140>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0f      	ldr	r2, [pc, #60]	; (8008220 <xPortStartScheduler+0x140>)
 80081e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081e8:	f7ff ff66 	bl	80080b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081ec:	f7ff fba0 	bl	8007930 <vTaskSwitchContext>
	prvTaskExitError();
 80081f0:	f7ff ff22 	bl	8008038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00
 8008204:	410fc271 	.word	0x410fc271
 8008208:	410fc270 	.word	0x410fc270
 800820c:	e000e400 	.word	0xe000e400
 8008210:	200007d0 	.word	0x200007d0
 8008214:	200007d4 	.word	0x200007d4
 8008218:	e000ed20 	.word	0xe000ed20
 800821c:	2000000c 	.word	0x2000000c
 8008220:	e000ef34 	.word	0xe000ef34

08008224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
}
 800823c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <vPortEnterCritical+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a0d      	ldr	r2, [pc, #52]	; (800827c <vPortEnterCritical+0x58>)
 8008246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <vPortEnterCritical+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortEnterCritical+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <vPortEnterCritical+0x4c>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x4a>
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	2000000c 	.word	0x2000000c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <vPortExitCritical+0x50>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortExitCritical+0x24>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	607b      	str	r3, [r7, #4]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vPortExitCritical+0x50>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <vPortExitCritical+0x50>)
 80082b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <vPortExitCritical+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f383 8811 	msr	BASEPRI, r3
}
 80082c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c
	...

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	f380 8811 	msr	BASEPRI, r0
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f7ff fb0e 	bl	8007930 <vTaskSwitchContext>
 8008314:	f04f 0000 	mov.w	r0, #0
 8008318:	f380 8811 	msr	BASEPRI, r0
 800831c:	bc09      	pop	{r0, r3}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008326:	f01e 0f10 	tst.w	lr, #16
 800832a:	bf08      	it	eq
 800832c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008330:	f380 8809 	msr	PSP, r0
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst>:
 8008340:	200006a4 	.word	0x200006a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7ff fa2d 	bl	80077c0 <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <SysTick_Handler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
}
 800837e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <vPortSetupTimerInterrupt+0x44>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	e000e010 	.word	0xe000e010
 80083c4:	e000e018 	.word	0xe000e018
 80083c8:	20000000 	.word	0x20000000
 80083cc:	10624dd3 	.word	0x10624dd3
 80083d0:	e000e014 	.word	0xe000e014

080083d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e4 <vPortEnableVFP+0x10>
 80083d8:	6801      	ldr	r1, [r0, #0]
 80083da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083de:	6001      	str	r1, [r0, #0]
 80083e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083e2:	bf00      	nop
 80083e4:	e000ed88 	.word	0xe000ed88

080083e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ee:	f3ef 8305 	mrs	r3, IPSR
 80083f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d914      	bls.n	8008424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <vPortValidateInterruptPriority+0x70>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <vPortValidateInterruptPriority+0x74>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	7afa      	ldrb	r2, [r7, #11]
 800840a:	429a      	cmp	r2, r3
 800840c:	d20a      	bcs.n	8008424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <vPortValidateInterruptPriority+0x78>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <vPortValidateInterruptPriority+0x7c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d90a      	bls.n	800844a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	603b      	str	r3, [r7, #0]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <vPortValidateInterruptPriority+0x60>
	}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	e000e3f0 	.word	0xe000e3f0
 800845c:	200007d0 	.word	0x200007d0
 8008460:	e000ed0c 	.word	0xe000ed0c
 8008464:	200007d4 	.word	0x200007d4

08008468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008474:	f7ff f8fa 	bl	800766c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008478:	4b5b      	ldr	r3, [pc, #364]	; (80085e8 <pvPortMalloc+0x180>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008480:	f000 f920 	bl	80086c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <pvPortMalloc+0x184>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8093 	bne.w	80085b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01d      	beq.n	80084d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008498:	2208      	movs	r2, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d014      	beq.n	80084d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	3308      	adds	r3, #8
 80084b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <pvPortMalloc+0x6c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06e      	beq.n	80085b8 <pvPortMalloc+0x150>
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <pvPortMalloc+0x188>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d869      	bhi.n	80085b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084e4:	4b43      	ldr	r3, [pc, #268]	; (80085f4 <pvPortMalloc+0x18c>)
 80084e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084e8:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <pvPortMalloc+0x18c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ee:	e004      	b.n	80084fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <pvPortMalloc+0xa4>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800850c:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <pvPortMalloc+0x180>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	429a      	cmp	r2, r3
 8008514:	d050      	beq.n	80085b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2208      	movs	r2, #8
 800851c:	4413      	add	r3, r2
 800851e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	2308      	movs	r3, #8
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	429a      	cmp	r2, r3
 8008536:	d91f      	bls.n	8008578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <pvPortMalloc+0xf8>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	613b      	str	r3, [r7, #16]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008572:	69b8      	ldr	r0, [r7, #24]
 8008574:	f000 f908 	bl	8008788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <pvPortMalloc+0x188>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <pvPortMalloc+0x188>)
 8008584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <pvPortMalloc+0x188>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <pvPortMalloc+0x190>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d203      	bcs.n	800859a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <pvPortMalloc+0x188>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <pvPortMalloc+0x190>)
 8008598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <pvPortMalloc+0x184>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <pvPortMalloc+0x194>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a11      	ldr	r2, [pc, #68]	; (80085fc <pvPortMalloc+0x194>)
 80085b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b8:	f7ff f866 	bl	8007688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <pvPortMalloc+0x174>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <pvPortMalloc+0x172>
	return pvReturn;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200043e0 	.word	0x200043e0
 80085ec:	200043f4 	.word	0x200043f4
 80085f0:	200043e4 	.word	0x200043e4
 80085f4:	200043d8 	.word	0x200043d8
 80085f8:	200043e8 	.word	0x200043e8
 80085fc:	200043ec 	.word	0x200043ec

08008600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04d      	beq.n	80086ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008612:	2308      	movs	r3, #8
 8008614:	425b      	negs	r3, r3
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <vPortFree+0xb8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vPortFree+0x44>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60fb      	str	r3, [r7, #12]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <vPortFree+0x62>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60bb      	str	r3, [r7, #8]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <vPortFree+0xb8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01e      	beq.n	80086ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11a      	bne.n	80086ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <vPortFree+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	43db      	mvns	r3, r3
 8008682:	401a      	ands	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008688:	f7fe fff0 	bl	800766c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vPortFree+0xbc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4413      	add	r3, r2
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <vPortFree+0xbc>)
 8008698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f000 f874 	bl	8008788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vPortFree+0xc0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vPortFree+0xc0>)
 80086a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086aa:	f7fe ffed 	bl	8007688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ae:	bf00      	nop
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200043f4 	.word	0x200043f4
 80086bc:	200043e4 	.word	0x200043e4
 80086c0:	200043f0 	.word	0x200043f0

080086c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvHeapInit+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00c      	beq.n	80086f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvHeapInit+0xac>)
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <prvHeapInit+0xb0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <prvHeapInit+0xb0>)
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvHeapInit+0xb4>)
 8008724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvHeapInit+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvHeapInit+0xb4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <prvHeapInit+0xb8>)
 8008752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <prvHeapInit+0xbc>)
 800875a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <prvHeapInit+0xc0>)
 800875e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	200007d8 	.word	0x200007d8
 8008774:	200043d8 	.word	0x200043d8
 8008778:	200043e0 	.word	0x200043e0
 800877c:	200043e8 	.word	0x200043e8
 8008780:	200043e4 	.word	0x200043e4
 8008784:	200043f4 	.word	0x200043f4

08008788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008790:	4b28      	ldr	r3, [pc, #160]	; (8008834 <prvInsertBlockIntoFreeList+0xac>)
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <prvInsertBlockIntoFreeList+0x14>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8f7      	bhi.n	8008796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d108      	bne.n	80087ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d118      	bne.n	8008810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d00d      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e003      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	200043d8 	.word	0x200043d8
 8008838:	200043e0 	.word	0x200043e0

0800883c <__errno>:
 800883c:	4b01      	ldr	r3, [pc, #4]	; (8008844 <__errno+0x8>)
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20000010 	.word	0x20000010

08008848 <std>:
 8008848:	2300      	movs	r3, #0
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	e9c0 3300 	strd	r3, r3, [r0]
 8008852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	; 0x64
 800885c:	81c2      	strh	r2, [r0, #14]
 800885e:	6183      	str	r3, [r0, #24]
 8008860:	4619      	mov	r1, r3
 8008862:	2208      	movs	r2, #8
 8008864:	305c      	adds	r0, #92	; 0x5c
 8008866:	f000 f91a 	bl	8008a9e <memset>
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x38>)
 800886c:	6263      	str	r3, [r4, #36]	; 0x24
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x3c>)
 8008870:	62a3      	str	r3, [r4, #40]	; 0x28
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x40>)
 8008874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x44>)
 8008878:	6224      	str	r4, [r4, #32]
 800887a:	6323      	str	r3, [r4, #48]	; 0x30
 800887c:	bd10      	pop	{r4, pc}
 800887e:	bf00      	nop
 8008880:	08008db9 	.word	0x08008db9
 8008884:	08008ddb 	.word	0x08008ddb
 8008888:	08008e13 	.word	0x08008e13
 800888c:	08008e37 	.word	0x08008e37

08008890 <_cleanup_r>:
 8008890:	4901      	ldr	r1, [pc, #4]	; (8008898 <_cleanup_r+0x8>)
 8008892:	f000 b8af 	b.w	80089f4 <_fwalk_reent>
 8008896:	bf00      	nop
 8008898:	08009111 	.word	0x08009111

0800889c <__sfmoreglue>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	2268      	movs	r2, #104	; 0x68
 80088a0:	1e4d      	subs	r5, r1, #1
 80088a2:	4355      	muls	r5, r2
 80088a4:	460e      	mov	r6, r1
 80088a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088aa:	f000 f921 	bl	8008af0 <_malloc_r>
 80088ae:	4604      	mov	r4, r0
 80088b0:	b140      	cbz	r0, 80088c4 <__sfmoreglue+0x28>
 80088b2:	2100      	movs	r1, #0
 80088b4:	e9c0 1600 	strd	r1, r6, [r0]
 80088b8:	300c      	adds	r0, #12
 80088ba:	60a0      	str	r0, [r4, #8]
 80088bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088c0:	f000 f8ed 	bl	8008a9e <memset>
 80088c4:	4620      	mov	r0, r4
 80088c6:	bd70      	pop	{r4, r5, r6, pc}

080088c8 <__sfp_lock_acquire>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__sfp_lock_acquire+0x8>)
 80088ca:	f000 b8d8 	b.w	8008a7e <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	200043f9 	.word	0x200043f9

080088d4 <__sfp_lock_release>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sfp_lock_release+0x8>)
 80088d6:	f000 b8d3 	b.w	8008a80 <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	200043f9 	.word	0x200043f9

080088e0 <__sinit_lock_acquire>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sinit_lock_acquire+0x8>)
 80088e2:	f000 b8cc 	b.w	8008a7e <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	200043fa 	.word	0x200043fa

080088ec <__sinit_lock_release>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sinit_lock_release+0x8>)
 80088ee:	f000 b8c7 	b.w	8008a80 <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	200043fa 	.word	0x200043fa

080088f8 <__sinit>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7ff fff0 	bl	80088e0 <__sinit_lock_acquire>
 8008900:	69a3      	ldr	r3, [r4, #24]
 8008902:	b11b      	cbz	r3, 800890c <__sinit+0x14>
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f7ff bff0 	b.w	80088ec <__sinit_lock_release>
 800890c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008910:	6523      	str	r3, [r4, #80]	; 0x50
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <__sinit+0x68>)
 8008914:	4a13      	ldr	r2, [pc, #76]	; (8008964 <__sinit+0x6c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	62a2      	str	r2, [r4, #40]	; 0x28
 800891a:	42a3      	cmp	r3, r4
 800891c:	bf04      	itt	eq
 800891e:	2301      	moveq	r3, #1
 8008920:	61a3      	streq	r3, [r4, #24]
 8008922:	4620      	mov	r0, r4
 8008924:	f000 f820 	bl	8008968 <__sfp>
 8008928:	6060      	str	r0, [r4, #4]
 800892a:	4620      	mov	r0, r4
 800892c:	f000 f81c 	bl	8008968 <__sfp>
 8008930:	60a0      	str	r0, [r4, #8]
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f818 	bl	8008968 <__sfp>
 8008938:	2200      	movs	r2, #0
 800893a:	60e0      	str	r0, [r4, #12]
 800893c:	2104      	movs	r1, #4
 800893e:	6860      	ldr	r0, [r4, #4]
 8008940:	f7ff ff82 	bl	8008848 <std>
 8008944:	68a0      	ldr	r0, [r4, #8]
 8008946:	2201      	movs	r2, #1
 8008948:	2109      	movs	r1, #9
 800894a:	f7ff ff7d 	bl	8008848 <std>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	2112      	movs	r1, #18
 8008954:	f7ff ff78 	bl	8008848 <std>
 8008958:	2301      	movs	r3, #1
 800895a:	61a3      	str	r3, [r4, #24]
 800895c:	e7d2      	b.n	8008904 <__sinit+0xc>
 800895e:	bf00      	nop
 8008960:	08009728 	.word	0x08009728
 8008964:	08008891 	.word	0x08008891

08008968 <__sfp>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	4607      	mov	r7, r0
 800896c:	f7ff ffac 	bl	80088c8 <__sfp_lock_acquire>
 8008970:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <__sfp+0x84>)
 8008972:	681e      	ldr	r6, [r3, #0]
 8008974:	69b3      	ldr	r3, [r6, #24]
 8008976:	b913      	cbnz	r3, 800897e <__sfp+0x16>
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff ffbd 	bl	80088f8 <__sinit>
 800897e:	3648      	adds	r6, #72	; 0x48
 8008980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008984:	3b01      	subs	r3, #1
 8008986:	d503      	bpl.n	8008990 <__sfp+0x28>
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	b30b      	cbz	r3, 80089d0 <__sfp+0x68>
 800898c:	6836      	ldr	r6, [r6, #0]
 800898e:	e7f7      	b.n	8008980 <__sfp+0x18>
 8008990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008994:	b9d5      	cbnz	r5, 80089cc <__sfp+0x64>
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <__sfp+0x88>)
 8008998:	60e3      	str	r3, [r4, #12]
 800899a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800899e:	6665      	str	r5, [r4, #100]	; 0x64
 80089a0:	f000 f86c 	bl	8008a7c <__retarget_lock_init_recursive>
 80089a4:	f7ff ff96 	bl	80088d4 <__sfp_lock_release>
 80089a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089b0:	6025      	str	r5, [r4, #0]
 80089b2:	61a5      	str	r5, [r4, #24]
 80089b4:	2208      	movs	r2, #8
 80089b6:	4629      	mov	r1, r5
 80089b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089bc:	f000 f86f 	bl	8008a9e <memset>
 80089c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089c8:	4620      	mov	r0, r4
 80089ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089cc:	3468      	adds	r4, #104	; 0x68
 80089ce:	e7d9      	b.n	8008984 <__sfp+0x1c>
 80089d0:	2104      	movs	r1, #4
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7ff ff62 	bl	800889c <__sfmoreglue>
 80089d8:	4604      	mov	r4, r0
 80089da:	6030      	str	r0, [r6, #0]
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1d5      	bne.n	800898c <__sfp+0x24>
 80089e0:	f7ff ff78 	bl	80088d4 <__sfp_lock_release>
 80089e4:	230c      	movs	r3, #12
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	e7ee      	b.n	80089c8 <__sfp+0x60>
 80089ea:	bf00      	nop
 80089ec:	08009728 	.word	0x08009728
 80089f0:	ffff0001 	.word	0xffff0001

080089f4 <_fwalk_reent>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	4606      	mov	r6, r0
 80089fa:	4688      	mov	r8, r1
 80089fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a00:	2700      	movs	r7, #0
 8008a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a06:	f1b9 0901 	subs.w	r9, r9, #1
 8008a0a:	d505      	bpl.n	8008a18 <_fwalk_reent+0x24>
 8008a0c:	6824      	ldr	r4, [r4, #0]
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	d1f7      	bne.n	8008a02 <_fwalk_reent+0xe>
 8008a12:	4638      	mov	r0, r7
 8008a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a18:	89ab      	ldrh	r3, [r5, #12]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d907      	bls.n	8008a2e <_fwalk_reent+0x3a>
 8008a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a22:	3301      	adds	r3, #1
 8008a24:	d003      	beq.n	8008a2e <_fwalk_reent+0x3a>
 8008a26:	4629      	mov	r1, r5
 8008a28:	4630      	mov	r0, r6
 8008a2a:	47c0      	blx	r8
 8008a2c:	4307      	orrs	r7, r0
 8008a2e:	3568      	adds	r5, #104	; 0x68
 8008a30:	e7e9      	b.n	8008a06 <_fwalk_reent+0x12>
	...

08008a34 <__libc_init_array>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4d0d      	ldr	r5, [pc, #52]	; (8008a6c <__libc_init_array+0x38>)
 8008a38:	4c0d      	ldr	r4, [pc, #52]	; (8008a70 <__libc_init_array+0x3c>)
 8008a3a:	1b64      	subs	r4, r4, r5
 8008a3c:	10a4      	asrs	r4, r4, #2
 8008a3e:	2600      	movs	r6, #0
 8008a40:	42a6      	cmp	r6, r4
 8008a42:	d109      	bne.n	8008a58 <__libc_init_array+0x24>
 8008a44:	4d0b      	ldr	r5, [pc, #44]	; (8008a74 <__libc_init_array+0x40>)
 8008a46:	4c0c      	ldr	r4, [pc, #48]	; (8008a78 <__libc_init_array+0x44>)
 8008a48:	f000 fca2 	bl	8009390 <_init>
 8008a4c:	1b64      	subs	r4, r4, r5
 8008a4e:	10a4      	asrs	r4, r4, #2
 8008a50:	2600      	movs	r6, #0
 8008a52:	42a6      	cmp	r6, r4
 8008a54:	d105      	bne.n	8008a62 <__libc_init_array+0x2e>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5c:	4798      	blx	r3
 8008a5e:	3601      	adds	r6, #1
 8008a60:	e7ee      	b.n	8008a40 <__libc_init_array+0xc>
 8008a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a66:	4798      	blx	r3
 8008a68:	3601      	adds	r6, #1
 8008a6a:	e7f2      	b.n	8008a52 <__libc_init_array+0x1e>
 8008a6c:	08009734 	.word	0x08009734
 8008a70:	08009734 	.word	0x08009734
 8008a74:	08009734 	.word	0x08009734
 8008a78:	08009738 	.word	0x08009738

08008a7c <__retarget_lock_init_recursive>:
 8008a7c:	4770      	bx	lr

08008a7e <__retarget_lock_acquire_recursive>:
 8008a7e:	4770      	bx	lr

08008a80 <__retarget_lock_release_recursive>:
 8008a80:	4770      	bx	lr

08008a82 <memcpy>:
 8008a82:	440a      	add	r2, r1
 8008a84:	4291      	cmp	r1, r2
 8008a86:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a8a:	d100      	bne.n	8008a8e <memcpy+0xc>
 8008a8c:	4770      	bx	lr
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a98:	4291      	cmp	r1, r2
 8008a9a:	d1f9      	bne.n	8008a90 <memcpy+0xe>
 8008a9c:	bd10      	pop	{r4, pc}

08008a9e <memset>:
 8008a9e:	4402      	add	r2, r0
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d100      	bne.n	8008aa8 <memset+0xa>
 8008aa6:	4770      	bx	lr
 8008aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8008aac:	e7f9      	b.n	8008aa2 <memset+0x4>
	...

08008ab0 <sbrk_aligned>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	4e0e      	ldr	r6, [pc, #56]	; (8008aec <sbrk_aligned+0x3c>)
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	6831      	ldr	r1, [r6, #0]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	b911      	cbnz	r1, 8008ac2 <sbrk_aligned+0x12>
 8008abc:	f000 f96c 	bl	8008d98 <_sbrk_r>
 8008ac0:	6030      	str	r0, [r6, #0]
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f967 	bl	8008d98 <_sbrk_r>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d00a      	beq.n	8008ae4 <sbrk_aligned+0x34>
 8008ace:	1cc4      	adds	r4, r0, #3
 8008ad0:	f024 0403 	bic.w	r4, r4, #3
 8008ad4:	42a0      	cmp	r0, r4
 8008ad6:	d007      	beq.n	8008ae8 <sbrk_aligned+0x38>
 8008ad8:	1a21      	subs	r1, r4, r0
 8008ada:	4628      	mov	r0, r5
 8008adc:	f000 f95c 	bl	8008d98 <_sbrk_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d101      	bne.n	8008ae8 <sbrk_aligned+0x38>
 8008ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ae8:	4620      	mov	r0, r4
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	20004400 	.word	0x20004400

08008af0 <_malloc_r>:
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	1ccd      	adds	r5, r1, #3
 8008af6:	f025 0503 	bic.w	r5, r5, #3
 8008afa:	3508      	adds	r5, #8
 8008afc:	2d0c      	cmp	r5, #12
 8008afe:	bf38      	it	cc
 8008b00:	250c      	movcc	r5, #12
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	4607      	mov	r7, r0
 8008b06:	db01      	blt.n	8008b0c <_malloc_r+0x1c>
 8008b08:	42a9      	cmp	r1, r5
 8008b0a:	d905      	bls.n	8008b18 <_malloc_r+0x28>
 8008b0c:	230c      	movs	r3, #12
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	2600      	movs	r6, #0
 8008b12:	4630      	mov	r0, r6
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	4e2e      	ldr	r6, [pc, #184]	; (8008bd4 <_malloc_r+0xe4>)
 8008b1a:	f000 fbad 	bl	8009278 <__malloc_lock>
 8008b1e:	6833      	ldr	r3, [r6, #0]
 8008b20:	461c      	mov	r4, r3
 8008b22:	bb34      	cbnz	r4, 8008b72 <_malloc_r+0x82>
 8008b24:	4629      	mov	r1, r5
 8008b26:	4638      	mov	r0, r7
 8008b28:	f7ff ffc2 	bl	8008ab0 <sbrk_aligned>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	4604      	mov	r4, r0
 8008b30:	d14d      	bne.n	8008bce <_malloc_r+0xde>
 8008b32:	6834      	ldr	r4, [r6, #0]
 8008b34:	4626      	mov	r6, r4
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d140      	bne.n	8008bbc <_malloc_r+0xcc>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4638      	mov	r0, r7
 8008b40:	eb04 0803 	add.w	r8, r4, r3
 8008b44:	f000 f928 	bl	8008d98 <_sbrk_r>
 8008b48:	4580      	cmp	r8, r0
 8008b4a:	d13a      	bne.n	8008bc2 <_malloc_r+0xd2>
 8008b4c:	6821      	ldr	r1, [r4, #0]
 8008b4e:	3503      	adds	r5, #3
 8008b50:	1a6d      	subs	r5, r5, r1
 8008b52:	f025 0503 	bic.w	r5, r5, #3
 8008b56:	3508      	adds	r5, #8
 8008b58:	2d0c      	cmp	r5, #12
 8008b5a:	bf38      	it	cc
 8008b5c:	250c      	movcc	r5, #12
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ffa5 	bl	8008ab0 <sbrk_aligned>
 8008b66:	3001      	adds	r0, #1
 8008b68:	d02b      	beq.n	8008bc2 <_malloc_r+0xd2>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	442b      	add	r3, r5
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	e00e      	b.n	8008b90 <_malloc_r+0xa0>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	1b52      	subs	r2, r2, r5
 8008b76:	d41e      	bmi.n	8008bb6 <_malloc_r+0xc6>
 8008b78:	2a0b      	cmp	r2, #11
 8008b7a:	d916      	bls.n	8008baa <_malloc_r+0xba>
 8008b7c:	1961      	adds	r1, r4, r5
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	6025      	str	r5, [r4, #0]
 8008b82:	bf18      	it	ne
 8008b84:	6059      	strne	r1, [r3, #4]
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	bf08      	it	eq
 8008b8a:	6031      	streq	r1, [r6, #0]
 8008b8c:	5162      	str	r2, [r4, r5]
 8008b8e:	604b      	str	r3, [r1, #4]
 8008b90:	4638      	mov	r0, r7
 8008b92:	f104 060b 	add.w	r6, r4, #11
 8008b96:	f000 fb75 	bl	8009284 <__malloc_unlock>
 8008b9a:	f026 0607 	bic.w	r6, r6, #7
 8008b9e:	1d23      	adds	r3, r4, #4
 8008ba0:	1af2      	subs	r2, r6, r3
 8008ba2:	d0b6      	beq.n	8008b12 <_malloc_r+0x22>
 8008ba4:	1b9b      	subs	r3, r3, r6
 8008ba6:	50a3      	str	r3, [r4, r2]
 8008ba8:	e7b3      	b.n	8008b12 <_malloc_r+0x22>
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	bf0c      	ite	eq
 8008bb0:	6032      	streq	r2, [r6, #0]
 8008bb2:	605a      	strne	r2, [r3, #4]
 8008bb4:	e7ec      	b.n	8008b90 <_malloc_r+0xa0>
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	6864      	ldr	r4, [r4, #4]
 8008bba:	e7b2      	b.n	8008b22 <_malloc_r+0x32>
 8008bbc:	4634      	mov	r4, r6
 8008bbe:	6876      	ldr	r6, [r6, #4]
 8008bc0:	e7b9      	b.n	8008b36 <_malloc_r+0x46>
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f000 fb5c 	bl	8009284 <__malloc_unlock>
 8008bcc:	e7a1      	b.n	8008b12 <_malloc_r+0x22>
 8008bce:	6025      	str	r5, [r4, #0]
 8008bd0:	e7de      	b.n	8008b90 <_malloc_r+0xa0>
 8008bd2:	bf00      	nop
 8008bd4:	200043fc 	.word	0x200043fc

08008bd8 <_puts_r>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	460e      	mov	r6, r1
 8008bdc:	4605      	mov	r5, r0
 8008bde:	b118      	cbz	r0, 8008be8 <_puts_r+0x10>
 8008be0:	6983      	ldr	r3, [r0, #24]
 8008be2:	b90b      	cbnz	r3, 8008be8 <_puts_r+0x10>
 8008be4:	f7ff fe88 	bl	80088f8 <__sinit>
 8008be8:	69ab      	ldr	r3, [r5, #24]
 8008bea:	68ac      	ldr	r4, [r5, #8]
 8008bec:	b913      	cbnz	r3, 8008bf4 <_puts_r+0x1c>
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7ff fe82 	bl	80088f8 <__sinit>
 8008bf4:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <_puts_r+0xd0>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d120      	bne.n	8008c3c <_puts_r+0x64>
 8008bfa:	686c      	ldr	r4, [r5, #4]
 8008bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bfe:	07db      	lsls	r3, r3, #31
 8008c00:	d405      	bmi.n	8008c0e <_puts_r+0x36>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	0598      	lsls	r0, r3, #22
 8008c06:	d402      	bmi.n	8008c0e <_puts_r+0x36>
 8008c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0a:	f7ff ff38 	bl	8008a7e <__retarget_lock_acquire_recursive>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	0719      	lsls	r1, r3, #28
 8008c12:	d51d      	bpl.n	8008c50 <_puts_r+0x78>
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	b1db      	cbz	r3, 8008c50 <_puts_r+0x78>
 8008c18:	3e01      	subs	r6, #1
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c20:	3b01      	subs	r3, #1
 8008c22:	60a3      	str	r3, [r4, #8]
 8008c24:	bb39      	cbnz	r1, 8008c76 <_puts_r+0x9e>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da38      	bge.n	8008c9c <_puts_r+0xc4>
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	210a      	movs	r1, #10
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 f906 	bl	8008e40 <__swbuf_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d011      	beq.n	8008c5c <_puts_r+0x84>
 8008c38:	250a      	movs	r5, #10
 8008c3a:	e011      	b.n	8008c60 <_puts_r+0x88>
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <_puts_r+0xd4>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d101      	bne.n	8008c46 <_puts_r+0x6e>
 8008c42:	68ac      	ldr	r4, [r5, #8]
 8008c44:	e7da      	b.n	8008bfc <_puts_r+0x24>
 8008c46:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <_puts_r+0xd8>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	bf08      	it	eq
 8008c4c:	68ec      	ldreq	r4, [r5, #12]
 8008c4e:	e7d5      	b.n	8008bfc <_puts_r+0x24>
 8008c50:	4621      	mov	r1, r4
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f958 	bl	8008f08 <__swsetup_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d0dd      	beq.n	8008c18 <_puts_r+0x40>
 8008c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c62:	07da      	lsls	r2, r3, #31
 8008c64:	d405      	bmi.n	8008c72 <_puts_r+0x9a>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	059b      	lsls	r3, r3, #22
 8008c6a:	d402      	bmi.n	8008c72 <_puts_r+0x9a>
 8008c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6e:	f7ff ff07 	bl	8008a80 <__retarget_lock_release_recursive>
 8008c72:	4628      	mov	r0, r5
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da04      	bge.n	8008c84 <_puts_r+0xac>
 8008c7a:	69a2      	ldr	r2, [r4, #24]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	dc06      	bgt.n	8008c8e <_puts_r+0xb6>
 8008c80:	290a      	cmp	r1, #10
 8008c82:	d004      	beq.n	8008c8e <_puts_r+0xb6>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	6022      	str	r2, [r4, #0]
 8008c8a:	7019      	strb	r1, [r3, #0]
 8008c8c:	e7c5      	b.n	8008c1a <_puts_r+0x42>
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	f000 f8d5 	bl	8008e40 <__swbuf_r>
 8008c96:	3001      	adds	r0, #1
 8008c98:	d1bf      	bne.n	8008c1a <_puts_r+0x42>
 8008c9a:	e7df      	b.n	8008c5c <_puts_r+0x84>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	250a      	movs	r5, #10
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	701d      	strb	r5, [r3, #0]
 8008ca6:	e7db      	b.n	8008c60 <_puts_r+0x88>
 8008ca8:	080096e8 	.word	0x080096e8
 8008cac:	08009708 	.word	0x08009708
 8008cb0:	080096c8 	.word	0x080096c8

08008cb4 <puts>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <puts+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f7ff bf8d 	b.w	8008bd8 <_puts_r>
 8008cbe:	bf00      	nop
 8008cc0:	20000010 	.word	0x20000010

08008cc4 <cleanup_glue>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	6809      	ldr	r1, [r1, #0]
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b109      	cbz	r1, 8008cd2 <cleanup_glue+0xe>
 8008cce:	f7ff fff9 	bl	8008cc4 <cleanup_glue>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cda:	f000 bad9 	b.w	8009290 <_free_r>
	...

08008ce0 <_reclaim_reent>:
 8008ce0:	4b2c      	ldr	r3, [pc, #176]	; (8008d94 <_reclaim_reent+0xb4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4283      	cmp	r3, r0
 8008ce6:	b570      	push	{r4, r5, r6, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	d051      	beq.n	8008d90 <_reclaim_reent+0xb0>
 8008cec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cee:	b143      	cbz	r3, 8008d02 <_reclaim_reent+0x22>
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d14a      	bne.n	8008d8c <_reclaim_reent+0xac>
 8008cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	b111      	cbz	r1, 8008d02 <_reclaim_reent+0x22>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 fac7 	bl	8009290 <_free_r>
 8008d02:	6961      	ldr	r1, [r4, #20]
 8008d04:	b111      	cbz	r1, 8008d0c <_reclaim_reent+0x2c>
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fac2 	bl	8009290 <_free_r>
 8008d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d0e:	b111      	cbz	r1, 8008d16 <_reclaim_reent+0x36>
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fabd 	bl	8009290 <_free_r>
 8008d16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d18:	b111      	cbz	r1, 8008d20 <_reclaim_reent+0x40>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fab8 	bl	8009290 <_free_r>
 8008d20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d22:	b111      	cbz	r1, 8008d2a <_reclaim_reent+0x4a>
 8008d24:	4620      	mov	r0, r4
 8008d26:	f000 fab3 	bl	8009290 <_free_r>
 8008d2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d2c:	b111      	cbz	r1, 8008d34 <_reclaim_reent+0x54>
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 faae 	bl	8009290 <_free_r>
 8008d34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008d36:	b111      	cbz	r1, 8008d3e <_reclaim_reent+0x5e>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 faa9 	bl	8009290 <_free_r>
 8008d3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008d40:	b111      	cbz	r1, 8008d48 <_reclaim_reent+0x68>
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 faa4 	bl	8009290 <_free_r>
 8008d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d4a:	b111      	cbz	r1, 8008d52 <_reclaim_reent+0x72>
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 fa9f 	bl	8009290 <_free_r>
 8008d52:	69a3      	ldr	r3, [r4, #24]
 8008d54:	b1e3      	cbz	r3, 8008d90 <_reclaim_reent+0xb0>
 8008d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d58:	4620      	mov	r0, r4
 8008d5a:	4798      	blx	r3
 8008d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d5e:	b1b9      	cbz	r1, 8008d90 <_reclaim_reent+0xb0>
 8008d60:	4620      	mov	r0, r4
 8008d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d66:	f7ff bfad 	b.w	8008cc4 <cleanup_glue>
 8008d6a:	5949      	ldr	r1, [r1, r5]
 8008d6c:	b941      	cbnz	r1, 8008d80 <_reclaim_reent+0xa0>
 8008d6e:	3504      	adds	r5, #4
 8008d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d72:	2d80      	cmp	r5, #128	; 0x80
 8008d74:	68d9      	ldr	r1, [r3, #12]
 8008d76:	d1f8      	bne.n	8008d6a <_reclaim_reent+0x8a>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 fa89 	bl	8009290 <_free_r>
 8008d7e:	e7ba      	b.n	8008cf6 <_reclaim_reent+0x16>
 8008d80:	680e      	ldr	r6, [r1, #0]
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fa84 	bl	8009290 <_free_r>
 8008d88:	4631      	mov	r1, r6
 8008d8a:	e7ef      	b.n	8008d6c <_reclaim_reent+0x8c>
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	e7ef      	b.n	8008d70 <_reclaim_reent+0x90>
 8008d90:	bd70      	pop	{r4, r5, r6, pc}
 8008d92:	bf00      	nop
 8008d94:	20000010 	.word	0x20000010

08008d98 <_sbrk_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d06      	ldr	r5, [pc, #24]	; (8008db4 <_sbrk_r+0x1c>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	f7f8 fcf4 	bl	8001790 <_sbrk>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_sbrk_r+0x1a>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_sbrk_r+0x1a>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	20004404 	.word	0x20004404

08008db8 <__sread>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 fab2 	bl	8009328 <_read_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	bfab      	itete	ge
 8008dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dca:	89a3      	ldrhlt	r3, [r4, #12]
 8008dcc:	181b      	addge	r3, r3, r0
 8008dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dd2:	bfac      	ite	ge
 8008dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dd6:	81a3      	strhlt	r3, [r4, #12]
 8008dd8:	bd10      	pop	{r4, pc}

08008dda <__swrite>:
 8008dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	461f      	mov	r7, r3
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	05db      	lsls	r3, r3, #23
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4616      	mov	r6, r2
 8008dea:	d505      	bpl.n	8008df8 <__swrite+0x1e>
 8008dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df0:	2302      	movs	r3, #2
 8008df2:	2200      	movs	r2, #0
 8008df4:	f000 f9c8 	bl	8009188 <_lseek_r>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	4632      	mov	r2, r6
 8008e06:	463b      	mov	r3, r7
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	f000 b869 	b.w	8008ee4 <_write_r>

08008e12 <__sseek>:
 8008e12:	b510      	push	{r4, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 f9b5 	bl	8009188 <_lseek_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	bf15      	itete	ne
 8008e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e2e:	81a3      	strheq	r3, [r4, #12]
 8008e30:	bf18      	it	ne
 8008e32:	81a3      	strhne	r3, [r4, #12]
 8008e34:	bd10      	pop	{r4, pc}

08008e36 <__sclose>:
 8008e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3a:	f000 b8d3 	b.w	8008fe4 <_close_r>
	...

08008e40 <__swbuf_r>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	460e      	mov	r6, r1
 8008e44:	4614      	mov	r4, r2
 8008e46:	4605      	mov	r5, r0
 8008e48:	b118      	cbz	r0, 8008e52 <__swbuf_r+0x12>
 8008e4a:	6983      	ldr	r3, [r0, #24]
 8008e4c:	b90b      	cbnz	r3, 8008e52 <__swbuf_r+0x12>
 8008e4e:	f7ff fd53 	bl	80088f8 <__sinit>
 8008e52:	4b21      	ldr	r3, [pc, #132]	; (8008ed8 <__swbuf_r+0x98>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d12b      	bne.n	8008eb0 <__swbuf_r+0x70>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	69a3      	ldr	r3, [r4, #24]
 8008e5c:	60a3      	str	r3, [r4, #8]
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	071a      	lsls	r2, r3, #28
 8008e62:	d52f      	bpl.n	8008ec4 <__swbuf_r+0x84>
 8008e64:	6923      	ldr	r3, [r4, #16]
 8008e66:	b36b      	cbz	r3, 8008ec4 <__swbuf_r+0x84>
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	6820      	ldr	r0, [r4, #0]
 8008e6c:	1ac0      	subs	r0, r0, r3
 8008e6e:	6963      	ldr	r3, [r4, #20]
 8008e70:	b2f6      	uxtb	r6, r6
 8008e72:	4283      	cmp	r3, r0
 8008e74:	4637      	mov	r7, r6
 8008e76:	dc04      	bgt.n	8008e82 <__swbuf_r+0x42>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 f948 	bl	8009110 <_fflush_r>
 8008e80:	bb30      	cbnz	r0, 8008ed0 <__swbuf_r+0x90>
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	60a3      	str	r3, [r4, #8]
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	701e      	strb	r6, [r3, #0]
 8008e90:	6963      	ldr	r3, [r4, #20]
 8008e92:	3001      	adds	r0, #1
 8008e94:	4283      	cmp	r3, r0
 8008e96:	d004      	beq.n	8008ea2 <__swbuf_r+0x62>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	07db      	lsls	r3, r3, #31
 8008e9c:	d506      	bpl.n	8008eac <__swbuf_r+0x6c>
 8008e9e:	2e0a      	cmp	r6, #10
 8008ea0:	d104      	bne.n	8008eac <__swbuf_r+0x6c>
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f000 f933 	bl	8009110 <_fflush_r>
 8008eaa:	b988      	cbnz	r0, 8008ed0 <__swbuf_r+0x90>
 8008eac:	4638      	mov	r0, r7
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <__swbuf_r+0x9c>)
 8008eb2:	429c      	cmp	r4, r3
 8008eb4:	d101      	bne.n	8008eba <__swbuf_r+0x7a>
 8008eb6:	68ac      	ldr	r4, [r5, #8]
 8008eb8:	e7cf      	b.n	8008e5a <__swbuf_r+0x1a>
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <__swbuf_r+0xa0>)
 8008ebc:	429c      	cmp	r4, r3
 8008ebe:	bf08      	it	eq
 8008ec0:	68ec      	ldreq	r4, [r5, #12]
 8008ec2:	e7ca      	b.n	8008e5a <__swbuf_r+0x1a>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f81e 	bl	8008f08 <__swsetup_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d0cb      	beq.n	8008e68 <__swbuf_r+0x28>
 8008ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ed4:	e7ea      	b.n	8008eac <__swbuf_r+0x6c>
 8008ed6:	bf00      	nop
 8008ed8:	080096e8 	.word	0x080096e8
 8008edc:	08009708 	.word	0x08009708
 8008ee0:	080096c8 	.word	0x080096c8

08008ee4 <_write_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	; (8008f04 <_write_r+0x20>)
 8008ee8:	4604      	mov	r4, r0
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f7f8 fbfb 	bl	80016ee <_write>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_write_r+0x1e>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_write_r+0x1e>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20004404 	.word	0x20004404

08008f08 <__swsetup_r>:
 8008f08:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <__swsetup_r+0xcc>)
 8008f0a:	b570      	push	{r4, r5, r6, lr}
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	b125      	cbz	r5, 8008f1e <__swsetup_r+0x16>
 8008f14:	69ab      	ldr	r3, [r5, #24]
 8008f16:	b913      	cbnz	r3, 8008f1e <__swsetup_r+0x16>
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7ff fced 	bl	80088f8 <__sinit>
 8008f1e:	4b2e      	ldr	r3, [pc, #184]	; (8008fd8 <__swsetup_r+0xd0>)
 8008f20:	429c      	cmp	r4, r3
 8008f22:	d10f      	bne.n	8008f44 <__swsetup_r+0x3c>
 8008f24:	686c      	ldr	r4, [r5, #4]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f2c:	0719      	lsls	r1, r3, #28
 8008f2e:	d42c      	bmi.n	8008f8a <__swsetup_r+0x82>
 8008f30:	06dd      	lsls	r5, r3, #27
 8008f32:	d411      	bmi.n	8008f58 <__swsetup_r+0x50>
 8008f34:	2309      	movs	r3, #9
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e03e      	b.n	8008fc2 <__swsetup_r+0xba>
 8008f44:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <__swsetup_r+0xd4>)
 8008f46:	429c      	cmp	r4, r3
 8008f48:	d101      	bne.n	8008f4e <__swsetup_r+0x46>
 8008f4a:	68ac      	ldr	r4, [r5, #8]
 8008f4c:	e7eb      	b.n	8008f26 <__swsetup_r+0x1e>
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <__swsetup_r+0xd8>)
 8008f50:	429c      	cmp	r4, r3
 8008f52:	bf08      	it	eq
 8008f54:	68ec      	ldreq	r4, [r5, #12]
 8008f56:	e7e6      	b.n	8008f26 <__swsetup_r+0x1e>
 8008f58:	0758      	lsls	r0, r3, #29
 8008f5a:	d512      	bpl.n	8008f82 <__swsetup_r+0x7a>
 8008f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5e:	b141      	cbz	r1, 8008f72 <__swsetup_r+0x6a>
 8008f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d002      	beq.n	8008f6e <__swsetup_r+0x66>
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f991 	bl	8009290 <_free_r>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6363      	str	r3, [r4, #52]	; 0x34
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f043 0308 	orr.w	r3, r3, #8
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	b94b      	cbnz	r3, 8008fa2 <__swsetup_r+0x9a>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f98:	d003      	beq.n	8008fa2 <__swsetup_r+0x9a>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 f92b 	bl	80091f8 <__smakebuf_r>
 8008fa2:	89a0      	ldrh	r0, [r4, #12]
 8008fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa8:	f010 0301 	ands.w	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <__swsetup_r+0xbc>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60a3      	str	r3, [r4, #8]
 8008fb2:	6963      	ldr	r3, [r4, #20]
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	61a3      	str	r3, [r4, #24]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	b943      	cbnz	r3, 8008fce <__swsetup_r+0xc6>
 8008fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fc0:	d1ba      	bne.n	8008f38 <__swsetup_r+0x30>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	0781      	lsls	r1, r0, #30
 8008fc6:	bf58      	it	pl
 8008fc8:	6963      	ldrpl	r3, [r4, #20]
 8008fca:	60a3      	str	r3, [r4, #8]
 8008fcc:	e7f4      	b.n	8008fb8 <__swsetup_r+0xb0>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e7f7      	b.n	8008fc2 <__swsetup_r+0xba>
 8008fd2:	bf00      	nop
 8008fd4:	20000010 	.word	0x20000010
 8008fd8:	080096e8 	.word	0x080096e8
 8008fdc:	08009708 	.word	0x08009708
 8008fe0:	080096c8 	.word	0x080096c8

08008fe4 <_close_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_close_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f8 fb99 	bl	8001726 <_close>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_close_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_close_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	20004404 	.word	0x20004404

08009004 <__sflush_r>:
 8009004:	898a      	ldrh	r2, [r1, #12]
 8009006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900a:	4605      	mov	r5, r0
 800900c:	0710      	lsls	r0, r2, #28
 800900e:	460c      	mov	r4, r1
 8009010:	d458      	bmi.n	80090c4 <__sflush_r+0xc0>
 8009012:	684b      	ldr	r3, [r1, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc05      	bgt.n	8009024 <__sflush_r+0x20>
 8009018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	dc02      	bgt.n	8009024 <__sflush_r+0x20>
 800901e:	2000      	movs	r0, #0
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009026:	2e00      	cmp	r6, #0
 8009028:	d0f9      	beq.n	800901e <__sflush_r+0x1a>
 800902a:	2300      	movs	r3, #0
 800902c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009030:	682f      	ldr	r7, [r5, #0]
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	d032      	beq.n	800909c <__sflush_r+0x98>
 8009036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	075a      	lsls	r2, r3, #29
 800903c:	d505      	bpl.n	800904a <__sflush_r+0x46>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	1ac0      	subs	r0, r0, r3
 8009042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009044:	b10b      	cbz	r3, 800904a <__sflush_r+0x46>
 8009046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009048:	1ac0      	subs	r0, r0, r3
 800904a:	2300      	movs	r3, #0
 800904c:	4602      	mov	r2, r0
 800904e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009050:	6a21      	ldr	r1, [r4, #32]
 8009052:	4628      	mov	r0, r5
 8009054:	47b0      	blx	r6
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	d106      	bne.n	800906a <__sflush_r+0x66>
 800905c:	6829      	ldr	r1, [r5, #0]
 800905e:	291d      	cmp	r1, #29
 8009060:	d82c      	bhi.n	80090bc <__sflush_r+0xb8>
 8009062:	4a2a      	ldr	r2, [pc, #168]	; (800910c <__sflush_r+0x108>)
 8009064:	40ca      	lsrs	r2, r1
 8009066:	07d6      	lsls	r6, r2, #31
 8009068:	d528      	bpl.n	80090bc <__sflush_r+0xb8>
 800906a:	2200      	movs	r2, #0
 800906c:	6062      	str	r2, [r4, #4]
 800906e:	04d9      	lsls	r1, r3, #19
 8009070:	6922      	ldr	r2, [r4, #16]
 8009072:	6022      	str	r2, [r4, #0]
 8009074:	d504      	bpl.n	8009080 <__sflush_r+0x7c>
 8009076:	1c42      	adds	r2, r0, #1
 8009078:	d101      	bne.n	800907e <__sflush_r+0x7a>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b903      	cbnz	r3, 8009080 <__sflush_r+0x7c>
 800907e:	6560      	str	r0, [r4, #84]	; 0x54
 8009080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009082:	602f      	str	r7, [r5, #0]
 8009084:	2900      	cmp	r1, #0
 8009086:	d0ca      	beq.n	800901e <__sflush_r+0x1a>
 8009088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800908c:	4299      	cmp	r1, r3
 800908e:	d002      	beq.n	8009096 <__sflush_r+0x92>
 8009090:	4628      	mov	r0, r5
 8009092:	f000 f8fd 	bl	8009290 <_free_r>
 8009096:	2000      	movs	r0, #0
 8009098:	6360      	str	r0, [r4, #52]	; 0x34
 800909a:	e7c1      	b.n	8009020 <__sflush_r+0x1c>
 800909c:	6a21      	ldr	r1, [r4, #32]
 800909e:	2301      	movs	r3, #1
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b0      	blx	r6
 80090a4:	1c41      	adds	r1, r0, #1
 80090a6:	d1c7      	bne.n	8009038 <__sflush_r+0x34>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0c4      	beq.n	8009038 <__sflush_r+0x34>
 80090ae:	2b1d      	cmp	r3, #29
 80090b0:	d001      	beq.n	80090b6 <__sflush_r+0xb2>
 80090b2:	2b16      	cmp	r3, #22
 80090b4:	d101      	bne.n	80090ba <__sflush_r+0xb6>
 80090b6:	602f      	str	r7, [r5, #0]
 80090b8:	e7b1      	b.n	800901e <__sflush_r+0x1a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	e7ad      	b.n	8009020 <__sflush_r+0x1c>
 80090c4:	690f      	ldr	r7, [r1, #16]
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	d0a9      	beq.n	800901e <__sflush_r+0x1a>
 80090ca:	0793      	lsls	r3, r2, #30
 80090cc:	680e      	ldr	r6, [r1, #0]
 80090ce:	bf08      	it	eq
 80090d0:	694b      	ldreq	r3, [r1, #20]
 80090d2:	600f      	str	r7, [r1, #0]
 80090d4:	bf18      	it	ne
 80090d6:	2300      	movne	r3, #0
 80090d8:	eba6 0807 	sub.w	r8, r6, r7
 80090dc:	608b      	str	r3, [r1, #8]
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	dd9c      	ble.n	800901e <__sflush_r+0x1a>
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090e8:	4643      	mov	r3, r8
 80090ea:	463a      	mov	r2, r7
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b0      	blx	r6
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dc06      	bgt.n	8009102 <__sflush_r+0xfe>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	e78e      	b.n	8009020 <__sflush_r+0x1c>
 8009102:	4407      	add	r7, r0
 8009104:	eba8 0800 	sub.w	r8, r8, r0
 8009108:	e7e9      	b.n	80090de <__sflush_r+0xda>
 800910a:	bf00      	nop
 800910c:	20400001 	.word	0x20400001

08009110 <_fflush_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	690b      	ldr	r3, [r1, #16]
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	b913      	cbnz	r3, 8009120 <_fflush_r+0x10>
 800911a:	2500      	movs	r5, #0
 800911c:	4628      	mov	r0, r5
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	b118      	cbz	r0, 800912a <_fflush_r+0x1a>
 8009122:	6983      	ldr	r3, [r0, #24]
 8009124:	b90b      	cbnz	r3, 800912a <_fflush_r+0x1a>
 8009126:	f7ff fbe7 	bl	80088f8 <__sinit>
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <_fflush_r+0x6c>)
 800912c:	429c      	cmp	r4, r3
 800912e:	d11b      	bne.n	8009168 <_fflush_r+0x58>
 8009130:	686c      	ldr	r4, [r5, #4]
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0ef      	beq.n	800911a <_fflush_r+0xa>
 800913a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800913c:	07d0      	lsls	r0, r2, #31
 800913e:	d404      	bmi.n	800914a <_fflush_r+0x3a>
 8009140:	0599      	lsls	r1, r3, #22
 8009142:	d402      	bmi.n	800914a <_fflush_r+0x3a>
 8009144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009146:	f7ff fc9a 	bl	8008a7e <__retarget_lock_acquire_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	4621      	mov	r1, r4
 800914e:	f7ff ff59 	bl	8009004 <__sflush_r>
 8009152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	4605      	mov	r5, r0
 8009158:	d4e0      	bmi.n	800911c <_fflush_r+0xc>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	059b      	lsls	r3, r3, #22
 800915e:	d4dd      	bmi.n	800911c <_fflush_r+0xc>
 8009160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009162:	f7ff fc8d 	bl	8008a80 <__retarget_lock_release_recursive>
 8009166:	e7d9      	b.n	800911c <_fflush_r+0xc>
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <_fflush_r+0x70>)
 800916a:	429c      	cmp	r4, r3
 800916c:	d101      	bne.n	8009172 <_fflush_r+0x62>
 800916e:	68ac      	ldr	r4, [r5, #8]
 8009170:	e7df      	b.n	8009132 <_fflush_r+0x22>
 8009172:	4b04      	ldr	r3, [pc, #16]	; (8009184 <_fflush_r+0x74>)
 8009174:	429c      	cmp	r4, r3
 8009176:	bf08      	it	eq
 8009178:	68ec      	ldreq	r4, [r5, #12]
 800917a:	e7da      	b.n	8009132 <_fflush_r+0x22>
 800917c:	080096e8 	.word	0x080096e8
 8009180:	08009708 	.word	0x08009708
 8009184:	080096c8 	.word	0x080096c8

08009188 <_lseek_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	; (80091a8 <_lseek_r+0x20>)
 800918c:	4604      	mov	r4, r0
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	2200      	movs	r2, #0
 8009194:	602a      	str	r2, [r5, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f7f8 faec 	bl	8001774 <_lseek>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_lseek_r+0x1e>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_lseek_r+0x1e>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20004404 	.word	0x20004404

080091ac <__swhatbuf_r>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	460e      	mov	r6, r1
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	2900      	cmp	r1, #0
 80091b6:	b096      	sub	sp, #88	; 0x58
 80091b8:	4614      	mov	r4, r2
 80091ba:	461d      	mov	r5, r3
 80091bc:	da08      	bge.n	80091d0 <__swhatbuf_r+0x24>
 80091be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	061a      	lsls	r2, r3, #24
 80091c8:	d410      	bmi.n	80091ec <__swhatbuf_r+0x40>
 80091ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ce:	e00e      	b.n	80091ee <__swhatbuf_r+0x42>
 80091d0:	466a      	mov	r2, sp
 80091d2:	f000 f8bb 	bl	800934c <_fstat_r>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	dbf1      	blt.n	80091be <__swhatbuf_r+0x12>
 80091da:	9a01      	ldr	r2, [sp, #4]
 80091dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091e4:	425a      	negs	r2, r3
 80091e6:	415a      	adcs	r2, r3
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	e7ee      	b.n	80091ca <__swhatbuf_r+0x1e>
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	2000      	movs	r0, #0
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	b016      	add	sp, #88	; 0x58
 80091f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080091f8 <__smakebuf_r>:
 80091f8:	898b      	ldrh	r3, [r1, #12]
 80091fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091fc:	079d      	lsls	r5, r3, #30
 80091fe:	4606      	mov	r6, r0
 8009200:	460c      	mov	r4, r1
 8009202:	d507      	bpl.n	8009214 <__smakebuf_r+0x1c>
 8009204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	2301      	movs	r3, #1
 800920e:	6163      	str	r3, [r4, #20]
 8009210:	b002      	add	sp, #8
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	ab01      	add	r3, sp, #4
 8009216:	466a      	mov	r2, sp
 8009218:	f7ff ffc8 	bl	80091ac <__swhatbuf_r>
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	4605      	mov	r5, r0
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff fc65 	bl	8008af0 <_malloc_r>
 8009226:	b948      	cbnz	r0, 800923c <__smakebuf_r+0x44>
 8009228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922c:	059a      	lsls	r2, r3, #22
 800922e:	d4ef      	bmi.n	8009210 <__smakebuf_r+0x18>
 8009230:	f023 0303 	bic.w	r3, r3, #3
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	e7e3      	b.n	8009204 <__smakebuf_r+0xc>
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <__smakebuf_r+0x7c>)
 800923e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009248:	81a3      	strh	r3, [r4, #12]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	6163      	str	r3, [r4, #20]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	6120      	str	r0, [r4, #16]
 8009252:	b15b      	cbz	r3, 800926c <__smakebuf_r+0x74>
 8009254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f889 	bl	8009370 <_isatty_r>
 800925e:	b128      	cbz	r0, 800926c <__smakebuf_r+0x74>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f023 0303 	bic.w	r3, r3, #3
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	89a0      	ldrh	r0, [r4, #12]
 800926e:	4305      	orrs	r5, r0
 8009270:	81a5      	strh	r5, [r4, #12]
 8009272:	e7cd      	b.n	8009210 <__smakebuf_r+0x18>
 8009274:	08008891 	.word	0x08008891

08009278 <__malloc_lock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_lock+0x8>)
 800927a:	f7ff bc00 	b.w	8008a7e <__retarget_lock_acquire_recursive>
 800927e:	bf00      	nop
 8009280:	200043f8 	.word	0x200043f8

08009284 <__malloc_unlock>:
 8009284:	4801      	ldr	r0, [pc, #4]	; (800928c <__malloc_unlock+0x8>)
 8009286:	f7ff bbfb 	b.w	8008a80 <__retarget_lock_release_recursive>
 800928a:	bf00      	nop
 800928c:	200043f8 	.word	0x200043f8

08009290 <_free_r>:
 8009290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009292:	2900      	cmp	r1, #0
 8009294:	d044      	beq.n	8009320 <_free_r+0x90>
 8009296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800929a:	9001      	str	r0, [sp, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f1a1 0404 	sub.w	r4, r1, #4
 80092a2:	bfb8      	it	lt
 80092a4:	18e4      	addlt	r4, r4, r3
 80092a6:	f7ff ffe7 	bl	8009278 <__malloc_lock>
 80092aa:	4a1e      	ldr	r2, [pc, #120]	; (8009324 <_free_r+0x94>)
 80092ac:	9801      	ldr	r0, [sp, #4]
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	b933      	cbnz	r3, 80092c0 <_free_r+0x30>
 80092b2:	6063      	str	r3, [r4, #4]
 80092b4:	6014      	str	r4, [r2, #0]
 80092b6:	b003      	add	sp, #12
 80092b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092bc:	f7ff bfe2 	b.w	8009284 <__malloc_unlock>
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	d908      	bls.n	80092d6 <_free_r+0x46>
 80092c4:	6825      	ldr	r5, [r4, #0]
 80092c6:	1961      	adds	r1, r4, r5
 80092c8:	428b      	cmp	r3, r1
 80092ca:	bf01      	itttt	eq
 80092cc:	6819      	ldreq	r1, [r3, #0]
 80092ce:	685b      	ldreq	r3, [r3, #4]
 80092d0:	1949      	addeq	r1, r1, r5
 80092d2:	6021      	streq	r1, [r4, #0]
 80092d4:	e7ed      	b.n	80092b2 <_free_r+0x22>
 80092d6:	461a      	mov	r2, r3
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	b10b      	cbz	r3, 80092e0 <_free_r+0x50>
 80092dc:	42a3      	cmp	r3, r4
 80092de:	d9fa      	bls.n	80092d6 <_free_r+0x46>
 80092e0:	6811      	ldr	r1, [r2, #0]
 80092e2:	1855      	adds	r5, r2, r1
 80092e4:	42a5      	cmp	r5, r4
 80092e6:	d10b      	bne.n	8009300 <_free_r+0x70>
 80092e8:	6824      	ldr	r4, [r4, #0]
 80092ea:	4421      	add	r1, r4
 80092ec:	1854      	adds	r4, r2, r1
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	6011      	str	r1, [r2, #0]
 80092f2:	d1e0      	bne.n	80092b6 <_free_r+0x26>
 80092f4:	681c      	ldr	r4, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	6053      	str	r3, [r2, #4]
 80092fa:	4421      	add	r1, r4
 80092fc:	6011      	str	r1, [r2, #0]
 80092fe:	e7da      	b.n	80092b6 <_free_r+0x26>
 8009300:	d902      	bls.n	8009308 <_free_r+0x78>
 8009302:	230c      	movs	r3, #12
 8009304:	6003      	str	r3, [r0, #0]
 8009306:	e7d6      	b.n	80092b6 <_free_r+0x26>
 8009308:	6825      	ldr	r5, [r4, #0]
 800930a:	1961      	adds	r1, r4, r5
 800930c:	428b      	cmp	r3, r1
 800930e:	bf04      	itt	eq
 8009310:	6819      	ldreq	r1, [r3, #0]
 8009312:	685b      	ldreq	r3, [r3, #4]
 8009314:	6063      	str	r3, [r4, #4]
 8009316:	bf04      	itt	eq
 8009318:	1949      	addeq	r1, r1, r5
 800931a:	6021      	streq	r1, [r4, #0]
 800931c:	6054      	str	r4, [r2, #4]
 800931e:	e7ca      	b.n	80092b6 <_free_r+0x26>
 8009320:	b003      	add	sp, #12
 8009322:	bd30      	pop	{r4, r5, pc}
 8009324:	200043fc 	.word	0x200043fc

08009328 <_read_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4d07      	ldr	r5, [pc, #28]	; (8009348 <_read_r+0x20>)
 800932c:	4604      	mov	r4, r0
 800932e:	4608      	mov	r0, r1
 8009330:	4611      	mov	r1, r2
 8009332:	2200      	movs	r2, #0
 8009334:	602a      	str	r2, [r5, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f7f8 f9bc 	bl	80016b4 <_read>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	d102      	bne.n	8009346 <_read_r+0x1e>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	b103      	cbz	r3, 8009346 <_read_r+0x1e>
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	20004404 	.word	0x20004404

0800934c <_fstat_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4d07      	ldr	r5, [pc, #28]	; (800936c <_fstat_r+0x20>)
 8009350:	2300      	movs	r3, #0
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f7f8 f9f0 	bl	800173e <_fstat>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	d102      	bne.n	8009368 <_fstat_r+0x1c>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b103      	cbz	r3, 8009368 <_fstat_r+0x1c>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd38      	pop	{r3, r4, r5, pc}
 800936a:	bf00      	nop
 800936c:	20004404 	.word	0x20004404

08009370 <_isatty_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4d06      	ldr	r5, [pc, #24]	; (800938c <_isatty_r+0x1c>)
 8009374:	2300      	movs	r3, #0
 8009376:	4604      	mov	r4, r0
 8009378:	4608      	mov	r0, r1
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	f7f8 f9ef 	bl	800175e <_isatty>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_isatty_r+0x1a>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_isatty_r+0x1a>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	20004404 	.word	0x20004404

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
