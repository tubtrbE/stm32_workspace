
pwm_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042fc  080042fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004304  08004304  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800430c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000108  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010428  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261b  00000000  00000000  0003046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00032a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024892  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dac  00000000  00000000  00058e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df0e0  00000000  00000000  0006ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149d0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a74  00000000  00000000  00149d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080042cc 	.word	0x080042cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080042cc 	.word	0x080042cc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_GPIO_Init+0xac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a23      	ldr	r2, [pc, #140]	; (800059c <MX_GPIO_Init+0xac>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_GPIO_Init+0xac>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_GPIO_Init+0xac>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <MX_GPIO_Init+0xac>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_GPIO_Init+0xac>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_GPIO_Init+0xac>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <MX_GPIO_Init+0xac>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_GPIO_Init+0xac>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0xac>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0xac>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0xac>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0xb0>)
 800058e:	f000 fe65 	bl	800125c <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fc1d 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8f3 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ff9d 	bl	80004f0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005b6:	f000 f9dd 	bl	8000974 <MX_RTC_Init>
  MX_TIM3_Init();
 80005ba:	f000 fa99 	bl	8000af0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005be:	f000 fb77 	bl	8000cb0 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005c2:	f000 f95b 	bl	800087c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005c6:	2108      	movs	r1, #8
 80005c8:	4868      	ldr	r0, [pc, #416]	; (800076c <main+0x1c8>)
 80005ca:	f001 fffd 	bl	80025c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005ce:	210c      	movs	r1, #12
 80005d0:	4866      	ldr	r0, [pc, #408]	; (800076c <main+0x1c8>)
 80005d2:	f001 fff9 	bl	80025c8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &rx, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4965      	ldr	r1, [pc, #404]	; (8000770 <main+0x1cc>)
 80005da:	4866      	ldr	r0, [pc, #408]	; (8000774 <main+0x1d0>)
 80005dc:	f002 feb1 	bl	8003342 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	int flag = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
//		else if (flag_stroke_handle == DOWN) {
//			num_set = 100;
//			num_stroke = 100;
//		}

		if (flag_stroke_handle == 1) {
 80005e4:	4b64      	ldr	r3, [pc, #400]	; (8000778 <main+0x1d4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d108      	bne.n	8000600 <main+0x5c>
			num_stroke++;
 80005ee:	4b63      	ldr	r3, [pc, #396]	; (800077c <main+0x1d8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a61      	ldr	r2, [pc, #388]	; (800077c <main+0x1d8>)
 80005f6:	6013      	str	r3, [r2, #0]
			flag_stroke_handle = 2;
 80005f8:	4b5f      	ldr	r3, [pc, #380]	; (8000778 <main+0x1d4>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	e00c      	b.n	800061a <main+0x76>
		}
		else if (flag_stroke_handle == 0){
 8000600:	4b5d      	ldr	r3, [pc, #372]	; (8000778 <main+0x1d4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d107      	bne.n	800061a <main+0x76>
			num_stroke--;
 800060a:	4b5c      	ldr	r3, [pc, #368]	; (800077c <main+0x1d8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a5a      	ldr	r2, [pc, #360]	; (800077c <main+0x1d8>)
 8000612:	6013      	str	r3, [r2, #0]
			flag_stroke_handle = 2;
 8000614:	4b58      	ldr	r3, [pc, #352]	; (8000778 <main+0x1d4>)
 8000616:	2202      	movs	r2, #2
 8000618:	701a      	strb	r2, [r3, #0]
		}
		if (flag_set_handle == 1) {
 800061a:	4b59      	ldr	r3, [pc, #356]	; (8000780 <main+0x1dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b01      	cmp	r3, #1
 8000622:	d108      	bne.n	8000636 <main+0x92>
			num_set++;
 8000624:	4b57      	ldr	r3, [pc, #348]	; (8000784 <main+0x1e0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a56      	ldr	r2, [pc, #344]	; (8000784 <main+0x1e0>)
 800062c:	6013      	str	r3, [r2, #0]
			flag_set_handle = 2;
 800062e:	4b54      	ldr	r3, [pc, #336]	; (8000780 <main+0x1dc>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e00c      	b.n	8000650 <main+0xac>
		}
		else if (flag_set_handle == 0){
 8000636:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x1dc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <main+0xac>
			num_set--;
 8000640:	4b50      	ldr	r3, [pc, #320]	; (8000784 <main+0x1e0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a4f      	ldr	r2, [pc, #316]	; (8000784 <main+0x1e0>)
 8000648:	6013      	str	r3, [r2, #0]
			flag_set_handle = 2;
 800064a:	4b4d      	ldr	r3, [pc, #308]	; (8000780 <main+0x1dc>)
 800064c:	2202      	movs	r2, #2
 800064e:	701a      	strb	r2, [r3, #0]
		}
		TIM3->CCR3 = num_set;
 8000650:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <main+0x1e0>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <main+0x1e4>)
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = num_stroke;
 8000658:	4b48      	ldr	r3, [pc, #288]	; (800077c <main+0x1d8>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <main+0x1e4>)
 800065e:	641a      	str	r2, [r3, #64]	; 0x40

		if (flag_uart == 1) {
 8000660:	4b4a      	ldr	r3, [pc, #296]	; (800078c <main+0x1e8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b01      	cmp	r3, #1
 8000668:	d17b      	bne.n	8000762 <main+0x1be>

			buf[buf_index] = 0;
 800066a:	4b49      	ldr	r3, [pc, #292]	; (8000790 <main+0x1ec>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <main+0x1f0>)
 8000672:	2100      	movs	r1, #0
 8000674:	5499      	strb	r1, [r3, r2]
			//down stroke
			if (rx == '1') {
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <main+0x1cc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b31      	cmp	r3, #49	; 0x31
 800067c:	d131      	bne.n	80006e2 <main+0x13e>
				num_set = 105;
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <main+0x1e0>)
 8000680:	2269      	movs	r2, #105	; 0x69
 8000682:	601a      	str	r2, [r3, #0]
				TIM3->CCR3 = num_set;
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <main+0x1e0>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <main+0x1e4>)
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(50);
 800068c:	2032      	movs	r0, #50	; 0x32
 800068e:	f000 fc1d 	bl	8000ecc <HAL_Delay>
				num_stroke = 125;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <main+0x1d8>)
 8000694:	227d      	movs	r2, #125	; 0x7d
 8000696:	601a      	str	r2, [r3, #0]
				TIM3->CCR4 = num_stroke;
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <main+0x1d8>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x1e4>)
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(450);
 80006a0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80006a4:	f000 fc12 	bl	8000ecc <HAL_Delay>

				num_set = 102;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <main+0x1e0>)
 80006aa:	2266      	movs	r2, #102	; 0x66
 80006ac:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 27; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e012      	b.n	80006da <main+0x136>
					num_stroke--;
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0x1d8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <main+0x1d8>)
 80006bc:	6013      	str	r3, [r2, #0]
					TIM3->CCR3 = num_set;
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <main+0x1e0>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <main+0x1e4>)
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = num_stroke;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <main+0x1d8>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <main+0x1e4>)
 80006cc:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fbfc 	bl	8000ecc <HAL_Delay>
				for(int i = 0; i < 27; i++) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b1a      	cmp	r3, #26
 80006de:	dde9      	ble.n	80006b4 <main+0x110>
 80006e0:	e034      	b.n	800074c <main+0x1a8>



			}
			//up stroke
			else if (rx == '0') {
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <main+0x1cc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b30      	cmp	r3, #48	; 0x30
 80006e8:	d130      	bne.n	800074c <main+0x1a8>
				num_set = 105;
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <main+0x1e0>)
 80006ec:	2269      	movs	r2, #105	; 0x69
 80006ee:	601a      	str	r2, [r3, #0]
				TIM3->CCR3 = num_set;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <main+0x1e0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <main+0x1e4>)
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(50);
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fbe7 	bl	8000ecc <HAL_Delay>
				num_stroke = 98;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <main+0x1d8>)
 8000700:	2262      	movs	r2, #98	; 0x62
 8000702:	601a      	str	r2, [r3, #0]
				TIM3->CCR4 = num_stroke;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x1d8>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <main+0x1e4>)
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(450);
 800070c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000710:	f000 fbdc 	bl	8000ecc <HAL_Delay>

				num_set = 102;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0x1e0>)
 8000716:	2266      	movs	r2, #102	; 0x66
 8000718:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 27; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	e012      	b.n	8000746 <main+0x1a2>
					num_stroke++;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <main+0x1d8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <main+0x1d8>)
 8000728:	6013      	str	r3, [r2, #0]
					TIM3->CCR3 = num_set;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0x1e0>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <main+0x1e4>)
 8000730:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = num_stroke;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <main+0x1d8>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0x1e4>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 fbc6 	bl	8000ecc <HAL_Delay>
				for(int i = 0; i < 27; i++) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	3301      	adds	r3, #1
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	2b1a      	cmp	r3, #26
 800074a:	dde9      	ble.n	8000720 <main+0x17c>
				}
			}


			memset(buf, 0, sizeof(buf));
 800074c:	2232      	movs	r2, #50	; 0x32
 800074e:	2100      	movs	r1, #0
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <main+0x1f0>)
 8000752:	f003 fdb3 	bl	80042bc <memset>
			buf_index = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <main+0x1ec>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			flag_uart = 0;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <main+0x1e8>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		}
			HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fbb2 	bl	8000ecc <HAL_Delay>
		if (flag_stroke_handle == 1) {
 8000768:	e73c      	b.n	80005e4 <main+0x40>
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c
 8000770:	20000030 	.word	0x20000030
 8000774:	200000d4 	.word	0x200000d4
 8000778:	20000069 	.word	0x20000069
 800077c:	20000004 	.word	0x20000004
 8000780:	20000068 	.word	0x20000068
 8000784:	20000000 	.word	0x20000000
 8000788:	40000400 	.word	0x40000400
 800078c:	20000067 	.word	0x20000067
 8000790:	20000066 	.word	0x20000066
 8000794:	20000034 	.word	0x20000034

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fd88 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <SystemClock_Config+0xdc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a2b      	ldr	r2, [pc, #172]	; (8000874 <SystemClock_Config+0xdc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0xdc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <SystemClock_Config+0xe0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a25      	ldr	r2, [pc, #148]	; (8000878 <SystemClock_Config+0xe0>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xe0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80007f4:	2306      	movs	r3, #6
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000810:	23b4      	movs	r3, #180	; 0xb4
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 ff17 	bl	8001654 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800082c:	f000 f89c 	bl	8000968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000830:	f000 fec0 	bl	80015b4 <HAL_PWREx_EnableOverDrive>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800083a:	f000 f895 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2105      	movs	r1, #5
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f971 	bl	8001b44 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000868:	f000 f87e 	bl	8000968 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	; 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2027      	movs	r0, #39	; 0x27
 8000886:	f000 fc20 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800088a:	2027      	movs	r0, #39	; 0x27
 800088c:	f000 fc39 	bl	8001102 <HAL_NVIC_EnableIRQ>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <HAL_UART_RxCpltCallback+0xb4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d14c      	bne.n	8000940 <HAL_UART_RxCpltCallback+0xac>
		HAL_UART_Transmit(&huart3, &rx, 1, 100);
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	2201      	movs	r2, #1
 80008aa:	4928      	ldr	r1, [pc, #160]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008ac:	4828      	ldr	r0, [pc, #160]	; (8000950 <HAL_UART_RxCpltCallback+0xbc>)
 80008ae:	f002 fcb6 	bl	800321e <HAL_UART_Transmit>

		buf[buf_index++] = rx;
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <HAL_UART_RxCpltCallback+0xc0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	b2d1      	uxtb	r1, r2
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <HAL_UART_RxCpltCallback+0xc0>)
 80008bc:	7011      	strb	r1, [r2, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008c2:	7819      	ldrb	r1, [r3, #0]
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <HAL_UART_RxCpltCallback+0xc4>)
 80008c6:	5499      	strb	r1, [r3, r2]
		if (rx == '1' || rx == '0') {
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b31      	cmp	r3, #49	; 0x31
 80008ce:	d003      	beq.n	80008d8 <HAL_UART_RxCpltCallback+0x44>
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b30      	cmp	r3, #48	; 0x30
 80008d6:	d102      	bne.n	80008de <HAL_UART_RxCpltCallback+0x4a>
			flag_uart = 1;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <HAL_UART_RxCpltCallback+0xc8>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
		}
		if (rx == 'w' || rx == 'W') {
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b77      	cmp	r3, #119	; 0x77
 80008e4:	d003      	beq.n	80008ee <HAL_UART_RxCpltCallback+0x5a>
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b57      	cmp	r3, #87	; 0x57
 80008ec:	d102      	bne.n	80008f4 <HAL_UART_RxCpltCallback+0x60>
			flag_set_handle = 1;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_UART_RxCpltCallback+0xcc>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
		}
		if (rx == 's' || rx == 'S') {
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b73      	cmp	r3, #115	; 0x73
 80008fa:	d003      	beq.n	8000904 <HAL_UART_RxCpltCallback+0x70>
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b53      	cmp	r3, #83	; 0x53
 8000902:	d102      	bne.n	800090a <HAL_UART_RxCpltCallback+0x76>
			flag_set_handle = 0;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_UART_RxCpltCallback+0xcc>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		}
		if (rx == 'a' || rx == 'A') {
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b61      	cmp	r3, #97	; 0x61
 8000910:	d003      	beq.n	800091a <HAL_UART_RxCpltCallback+0x86>
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b41      	cmp	r3, #65	; 0x41
 8000918:	d102      	bne.n	8000920 <HAL_UART_RxCpltCallback+0x8c>
			flag_stroke_handle = 1;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_UART_RxCpltCallback+0xd0>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
		}
		if (rx == 'd' || rx == 'D') {
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b64      	cmp	r3, #100	; 0x64
 8000926:	d003      	beq.n	8000930 <HAL_UART_RxCpltCallback+0x9c>
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b44      	cmp	r3, #68	; 0x44
 800092e:	d102      	bne.n	8000936 <HAL_UART_RxCpltCallback+0xa2>
			flag_stroke_handle = 0;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_UART_RxCpltCallback+0xd0>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &rx, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <HAL_UART_RxCpltCallback+0xb8>)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_RxCpltCallback+0xbc>)
 800093c:	f002 fd01 	bl	8003342 <HAL_UART_Receive_IT>
	}
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004800 	.word	0x40004800
 800094c:	20000030 	.word	0x20000030
 8000950:	200000d4 	.word	0x200000d4
 8000954:	20000066 	.word	0x20000066
 8000958:	20000034 	.word	0x20000034
 800095c:	20000067 	.word	0x20000067
 8000960:	20000068 	.word	0x20000068
 8000964:	20000069 	.word	0x20000069

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_RTC_Init+0x44>)
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MX_RTC_Init+0x48>)
 800097c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_RTC_Init+0x44>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_RTC_Init+0x44>)
 8000986:	227f      	movs	r2, #127	; 0x7f
 8000988:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_RTC_Init+0x44>)
 800098c:	22ff      	movs	r2, #255	; 0xff
 800098e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_RTC_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_RTC_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_RTC_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_RTC_Init+0x44>)
 80009a4:	f001 fc6e 	bl	8002284 <HAL_RTC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009ae:	f7ff ffdb 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000006c 	.word	0x2000006c
 80009bc:	40002800 	.word	0x40002800

080009c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2230      	movs	r2, #48	; 0x30
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fc73 	bl	80042bc <memset>
  if(rtcHandle->Instance==RTC)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <HAL_RTC_MspInit+0x4c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d111      	bne.n	8000a04 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009e0:	2320      	movs	r3, #32
 80009e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa88 	bl	8001f04 <HAL_RCCEx_PeriphCLKConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80009fa:	f7ff ffb5 	bl	8000968 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <HAL_RTC_MspInit+0x50>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	3738      	adds	r7, #56	; 0x38
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40002800 	.word	0x40002800
 8000a10:	42470e3c 	.word	0x42470e3c

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f9ec 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <USART3_IRQHandler+0x10>)
 8000abe:	f002 fc71 	bl	80033a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000d4 	.word	0x200000d4

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <MX_TIM3_Init+0x104>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1800 - 1;
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b28:	f240 7207 	movw	r2, #1799	; 0x707
 8000b2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000b2e:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b30:	2210      	movs	r2, #16
 8000b32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8000b34:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b48:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b4a:	f001 fc95 	bl	8002478 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b54:	f7ff ff08 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b66:	f001 feb9 	bl	80028dc <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b70:	f7ff fefa 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b74:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b76:	f001 fcce 	bl	8002516 <HAL_TIM_PWM_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b80:	f7ff fef2 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4619      	mov	r1, r3
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000b94:	f002 fa7a 	bl	800308c <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b9e:	f7ff fee3 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 375-1;
 8000ba6:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000bbc:	f001 fdcc 	bl	8002758 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bc6:	f7ff fecf 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	220c      	movs	r2, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000bd2:	f001 fdc1 	bl	8002758 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000bdc:	f7ff fec4 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <MX_TIM3_Init+0x100>)
 8000be2:	f000 f82b 	bl	8000c3c <HAL_TIM_MspPostInit>

}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	; 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_TIM_Base_MspInit+0x3c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10d      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d11d      	bne.n	8000c9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_TIM_MspPostInit+0x70>)
 8000c96:	f000 fae1 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_USART3_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce8:	f002 fa4c 	bl	8003184 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f7ff fe39 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000d4 	.word	0x200000d4
 8000d00:	40004800 	.word	0x40004800

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12c      	bne.n	8000d80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d70:	2307      	movs	r3, #7
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_MspInit+0x8c>)
 8000d7c:	f000 fa6e 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff fe85 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fa57 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbed 	bl	80005a4 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dd8:	0800430c 	.word	0x0800430c
  ldr r2, =_sbss
 8000ddc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000de0:	2000011c 	.word	0x2000011c

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fdfa 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000010 	.word	0x20000010
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	20000118 	.word	0x20000118

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000118 	.word	0x20000118

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000010 	.word	0x20000010

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff feb6 	bl	8000eb4 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d008      	beq.n	8001168 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e052      	b.n	800120e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0216 	bic.w	r2, r2, #22
 8001176:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001186:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <HAL_DMA_Abort+0x62>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0208 	bic.w	r2, r2, #8
 80011a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b8:	e013      	b.n	80011e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ba:	f7ff fe7b 	bl	8000eb4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d90c      	bls.n	80011e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2220      	movs	r2, #32
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e015      	b.n	800120e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e4      	bne.n	80011ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	223f      	movs	r2, #63	; 0x3f
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d004      	beq.n	8001234 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e00c      	b.n	800124e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2205      	movs	r2, #5
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e177      	b.n	8001568 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8166 	bne.w	8001562 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d005      	beq.n	80012ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d130      	bne.n	8001310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d017      	beq.n	800134c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d123      	bne.n	80013a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	69b9      	ldr	r1, [r7, #24]
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80c0 	beq.w	8001562 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_GPIO_Init+0x324>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a65      	ldr	r2, [pc, #404]	; (8001580 <HAL_GPIO_Init+0x324>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_GPIO_Init+0x324>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fe:	4a61      	ldr	r2, [pc, #388]	; (8001584 <HAL_GPIO_Init+0x328>)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x32c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d037      	beq.n	800149a <HAL_GPIO_Init+0x23e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_GPIO_Init+0x330>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d031      	beq.n	8001496 <HAL_GPIO_Init+0x23a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_GPIO_Init+0x334>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x236>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a55      	ldr	r2, [pc, #340]	; (8001594 <HAL_GPIO_Init+0x338>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x232>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_GPIO_Init+0x33c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a53      	ldr	r2, [pc, #332]	; (800159c <HAL_GPIO_Init+0x340>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x22a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x344>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x348>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x350>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x21a>
 8001472:	2309      	movs	r3, #9
 8001474:	e012      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001476:	230a      	movs	r3, #10
 8001478:	e010      	b.n	800149c <HAL_GPIO_Init+0x240>
 800147a:	2308      	movs	r3, #8
 800147c:	e00e      	b.n	800149c <HAL_GPIO_Init+0x240>
 800147e:	2307      	movs	r3, #7
 8001480:	e00c      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001482:	2306      	movs	r3, #6
 8001484:	e00a      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001486:	2305      	movs	r3, #5
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x240>
 800148a:	2304      	movs	r3, #4
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x240>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x240>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	; (8001584 <HAL_GPIO_Init+0x328>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_GPIO_Init+0x354>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a34      	ldr	r2, [pc, #208]	; (80015b0 <HAL_GPIO_Init+0x354>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_GPIO_Init+0x354>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <HAL_GPIO_Init+0x354>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_GPIO_Init+0x354>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_GPIO_Init+0x354>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_GPIO_Init+0x354>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_GPIO_Init+0x354>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f ae84 	bls.w	8001278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40021400 	.word	0x40021400
 80015a0:	40021800 	.word	0x40021800
 80015a4:	40021c00 	.word	0x40021c00
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40022400 	.word	0x40022400
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_PWREx_EnableOverDrive+0x90>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_PWREx_EnableOverDrive+0x90>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_PWREx_EnableOverDrive+0x90>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_PWREx_EnableOverDrive+0x94>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff fc68 	bl	8000eb4 <HAL_GetTick>
 80015e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015e6:	e009      	b.n	80015fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015e8:	f7ff fc64 	bl	8000eb4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f6:	d901      	bls.n	80015fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e01f      	b.n	800163c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_PWREx_EnableOverDrive+0x98>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d1ee      	bne.n	80015e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001610:	f7ff fc50 	bl	8000eb4 <HAL_GetTick>
 8001614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001616:	e009      	b.n	800162c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001618:	f7ff fc4c 	bl	8000eb4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001626:	d901      	bls.n	800162c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e007      	b.n	800163c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_PWREx_EnableOverDrive+0x98>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001638:	d1ee      	bne.n	8001618 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	420e0040 	.word	0x420e0040
 800164c:	40007000 	.word	0x40007000
 8001650:	420e0044 	.word	0x420e0044

08001654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e267      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d075      	beq.n	800175e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d00c      	beq.n	8001698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	4b85      	ldr	r3, [pc, #532]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b82      	ldr	r3, [pc, #520]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001696:	d10b      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d05b      	beq.n	800175c <HAL_RCC_OscConfig+0x108>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d157      	bne.n	800175c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e242      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x74>
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x98>
 80016d2:	4b70      	ldr	r3, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6f      	ldr	r2, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6c      	ldr	r2, [pc, #432]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016ec:	4b69      	ldr	r3, [pc, #420]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a68      	ldr	r2, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a65      	ldr	r2, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fbd2 	bl	8000eb4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fbce 	bl	8000eb4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e207      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xc0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fbbe 	bl	8000eb4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fbba 	bl	8000eb4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1f3      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0xe8>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1c7      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x244>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb73 	bl	8000eb4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb6f 	bl	8000eb4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1a8      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4925      	ldr	r1, [pc, #148]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x244>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb52 	bl	8000eb4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fb4e 	bl	8000eb4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e187      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d036      	beq.n	80018ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d016      	beq.n	8001874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x248>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fb32 	bl	8000eb4 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fb2e 	bl	8000eb4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e167      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_OscConfig+0x240>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x200>
 8001872:	e01b      	b.n	80018ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x248>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb1b 	bl	8000eb4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e00e      	b.n	80018a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff fb17 	bl	8000eb4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d907      	bls.n	80018a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e150      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	42470000 	.word	0x42470000
 800189c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ea      	bne.n	8001882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8097 	beq.w	80019e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a7c      	ldr	r2, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b74      	ldr	r3, [pc, #464]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a73      	ldr	r2, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fad7 	bl	8000eb4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fad3 	bl	8000eb4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e10c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x474>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x2ea>
 8001930:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a63      	ldr	r2, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x30c>
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a5e      	ldr	r2, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fa98 	bl	8000eb4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff fa94 	bl	8000eb4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0cb      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ee      	beq.n	8001988 <HAL_RCC_OscConfig+0x334>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fa82 	bl	8000eb4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fa7e 	bl	8000eb4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0b5      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ee      	bne.n	80019b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a1 	beq.w	8001b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d05c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d141      	bne.n	8001a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fa52 	bl	8000eb4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff fa4e 	bl	8000eb4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e087      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fa27 	bl	8000eb4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fa23 	bl	8000eb4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e05c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x416>
 8001a88:	e054      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fa10 	bl	8000eb4 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fa0c 	bl	8000eb4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e045      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x444>
 8001ab6:	e03d      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e038      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d028      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d121      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d11a      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0cc      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d90c      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d044      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e06f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e067      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4934      	ldr	r1, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff f93e 	bl	8000eb4 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff f93a 	bl	8000eb4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e04f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20c      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f89e 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	080042e4 	.word	0x080042e4
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b090      	sub	sp, #64	; 0x40
 8001d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f200 80a1 	bhi.w	8001e7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e09b      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d48:	e09b      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d4e:	e098      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d028      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	627a      	str	r2, [r7, #36]	; 0x24
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d7c:	fb03 f201 	mul.w	r2, r3, r1
 8001d80:	2300      	movs	r3, #0
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d90:	460a      	mov	r2, r1
 8001d92:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	4413      	add	r3, r2
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	61fa      	str	r2, [r7, #28]
 8001da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001daa:	f7fe fa1f 	bl	80001ec <__aeabi_uldivmod>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4613      	mov	r3, r2
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db6:	e053      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	617a      	str	r2, [r7, #20]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dca:	f04f 0b00 	mov.w	fp, #0
 8001dce:	4652      	mov	r2, sl
 8001dd0:	465b      	mov	r3, fp
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	0159      	lsls	r1, r3, #5
 8001ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de0:	0150      	lsls	r0, r2, #5
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ebb2 080a 	subs.w	r8, r2, sl
 8001dea:	eb63 090b 	sbc.w	r9, r3, fp
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e02:	ebb2 0408 	subs.w	r4, r2, r8
 8001e06:	eb63 0509 	sbc.w	r5, r3, r9
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	00eb      	lsls	r3, r5, #3
 8001e14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e18:	00e2      	lsls	r2, r4, #3
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	eb14 030a 	adds.w	r3, r4, sl
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	eb45 030b 	adc.w	r3, r5, fp
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e36:	4629      	mov	r1, r5
 8001e38:	028b      	lsls	r3, r1, #10
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e40:	4621      	mov	r1, r4
 8001e42:	028a      	lsls	r2, r1, #10
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e54:	f7fe f9ca 	bl	80001ec <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e7a:	e002      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3740      	adds	r7, #64	; 0x40
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	017d7840 	.word	0x017d7840

08001e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a9b      	lsrs	r3, r3, #10
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	080042f4 	.word	0x080042f4

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffdc 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0b5b      	lsrs	r3, r3, #13
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	080042f4 	.word	0x080042f4

08001f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d075      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f38:	4b91      	ldr	r3, [pc, #580]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe ffb9 	bl	8000eb4 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f46:	f7fe ffb5 	bl	8000eb4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e189      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f58:	4b8a      	ldr	r3, [pc, #552]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	019a      	lsls	r2, r3, #6
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	071b      	lsls	r3, r3, #28
 8001f7c:	4981      	ldr	r1, [pc, #516]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01f      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f96:	0f1b      	lsrs	r3, r3, #28
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	019a      	lsls	r2, r3, #6
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	431a      	orrs	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	071b      	lsls	r3, r3, #28
 8001fb0:	4974      	ldr	r1, [pc, #464]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fb8:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbe:	f023 021f 	bic.w	r2, r3, #31
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	496e      	ldr	r1, [pc, #440]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	019a      	lsls	r2, r3, #6
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	061b      	lsls	r3, r3, #24
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	071b      	lsls	r3, r3, #28
 8001ff0:	4964      	ldr	r1, [pc, #400]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ff8:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ffe:	f7fe ff59 	bl	8000eb4 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002006:	f7fe ff55 	bl	8000eb4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e129      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002018:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002038:	2b00      	cmp	r3, #0
 800203a:	d079      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800203c:	4b52      	ldr	r3, [pc, #328]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002042:	f7fe ff37 	bl	8000eb4 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800204a:	f7fe ff33 	bl	8000eb4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e107      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002068:	d0ef      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207c:	0f1b      	lsrs	r3, r3, #28
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	019a      	lsls	r2, r3, #6
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	431a      	orrs	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	071b      	lsls	r3, r3, #28
 8002096:	493b      	ldr	r1, [pc, #236]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4934      	ldr	r1, [pc, #208]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01e      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	0e1b      	lsrs	r3, r3, #24
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	019a      	lsls	r2, r3, #6
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	071b      	lsls	r3, r3, #28
 80020e4:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fed4 	bl	8000eb4 <HAL_GetTick>
 800210c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002110:	f7fe fed0 	bl	8000eb4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0a4      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800212e:	d1ef      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 808b 	beq.w	8002254 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002166:	f7fe fea5 	bl	8000eb4 <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800216c:	e010      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7fe fea1 	bl	8000eb4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d909      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e075      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002180:	42470068 	.word	0x42470068
 8002184:	40023800 	.word	0x40023800
 8002188:	42470070 	.word	0x42470070
 800218c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0e8      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02f      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d028      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ba:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d114      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fe67 	bl	8000eb4 <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe fe63 	bl	8000eb4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e035      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002218:	d10d      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800222a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222e:	4912      	ldr	r1, [pc, #72]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
 8002234:	e005      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800223c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002240:	6093      	str	r3, [r2, #8]
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002244:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002250:	4313      	orrs	r3, r2
 8002252:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002268:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40007000 	.word	0x40007000
 8002278:	40023800 	.word	0x40023800
 800227c:	42470e40 	.word	0x42470e40
 8002280:	424711e0 	.word	0x424711e0

08002284 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e066      	b.n	8002368 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7f5b      	ldrb	r3, [r3, #29]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fb88 	bl	80009c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22ca      	movs	r2, #202	; 0xca
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2253      	movs	r2, #83	; 0x53
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f87a 	bl	80023c0 <RTC_EnterInitMode>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d12c      	bne.n	8002330 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80022e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68d2      	ldr	r2, [r2, #12]
 8002310:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f881 	bl	800242e <RTC_ExitInitMode>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800238a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7fe fd92 	bl	8000eb4 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002392:	e009      	b.n	80023a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002394:	f7fe fd8e 	bl	8000eb4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e007      	b.n	80023b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ee      	beq.n	8002394 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d122      	bne.n	8002424 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ee:	f7fe fd61 	bl	8000eb4 <HAL_GetTick>
 80023f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023f4:	e00c      	b.n	8002410 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023f6:	f7fe fd5d 	bl	8000eb4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002404:	d904      	bls.n	8002410 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2204      	movs	r2, #4
 800240a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <RTC_EnterInitMode+0x64>
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d1e8      	bne.n	80023f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff89 	bl	8002370 <HAL_RTC_WaitForSynchro>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e041      	b.n	800250e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fbaa 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 fad8 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e041      	b.n	80025ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f839 	bl	80025b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f000 fa89 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_TIM_PWM_Start+0x24>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e022      	b.n	8002632 <HAL_TIM_PWM_Start+0x6a>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d109      	bne.n	8002606 <HAL_TIM_PWM_Start+0x3e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e015      	b.n	8002632 <HAL_TIM_PWM_Start+0x6a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d109      	bne.n	8002620 <HAL_TIM_PWM_Start+0x58>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e008      	b.n	8002632 <HAL_TIM_PWM_Start+0x6a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07c      	b.n	8002734 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_TIM_PWM_Start+0x82>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	e013      	b.n	8002672 <HAL_TIM_PWM_Start+0xaa>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d104      	bne.n	800265a <HAL_TIM_PWM_Start+0x92>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	e00b      	b.n	8002672 <HAL_TIM_PWM_Start+0xaa>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d104      	bne.n	800266a <HAL_TIM_PWM_Start+0xa2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	e003      	b.n	8002672 <HAL_TIM_PWM_Start+0xaa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fce0 	bl	8003040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_TIM_PWM_Start+0x174>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_TIM_PWM_Start+0xcc>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <HAL_TIM_PWM_Start+0x178>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_TIM_PWM_Start+0xd0>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_TIM_PWM_Start+0xd2>
 8002698:	2300      	movs	r3, #0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_TIM_PWM_Start+0x174>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d01d      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_TIM_PWM_Start+0x17c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_TIM_PWM_Start+0x180>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_TIM_PWM_Start+0x184>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_TIM_PWM_Start+0x178>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_TIM_PWM_Start+0x188>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIM_PWM_Start+0x136>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_TIM_PWM_Start+0x18c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b06      	cmp	r3, #6
 800270e:	d010      	beq.n	8002732 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002720:	e007      	b.n	8002732 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010000 	.word	0x40010000
 8002740:	40010400 	.word	0x40010400
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40014000 	.word	0x40014000
 8002754:	40001800 	.word	0x40001800

08002758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002772:	2302      	movs	r3, #2
 8002774:	e0ae      	b.n	80028d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	f200 809f 	bhi.w	80028c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080028c5 	.word	0x080028c5
 8002794:	080028c5 	.word	0x080028c5
 8002798:	080028c5 	.word	0x080028c5
 800279c:	08002801 	.word	0x08002801
 80027a0:	080028c5 	.word	0x080028c5
 80027a4:	080028c5 	.word	0x080028c5
 80027a8:	080028c5 	.word	0x080028c5
 80027ac:	08002843 	.word	0x08002843
 80027b0:	080028c5 	.word	0x080028c5
 80027b4:	080028c5 	.word	0x080028c5
 80027b8:	080028c5 	.word	0x080028c5
 80027bc:	08002883 	.word	0x08002883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f9f0 	bl	8002bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6999      	ldr	r1, [r3, #24]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	619a      	str	r2, [r3, #24]
      break;
 80027fe:	e064      	b.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fa40 	bl	8002c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6999      	ldr	r1, [r3, #24]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	619a      	str	r2, [r3, #24]
      break;
 8002840:	e043      	b.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fa95 	bl	8002d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0208 	orr.w	r2, r2, #8
 800285c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0204 	bic.w	r2, r2, #4
 800286c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69d9      	ldr	r1, [r3, #28]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	61da      	str	r2, [r3, #28]
      break;
 8002880:	e023      	b.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fae9 	bl	8002e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69d9      	ldr	r1, [r3, #28]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	61da      	str	r2, [r3, #28]
      break;
 80028c2:	e002      	b.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
      break;
 80028c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_ConfigClockSource+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0b4      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800291e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002930:	d03e      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002936:	f200 8087 	bhi.w	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	f000 8086 	beq.w	8002a4e <HAL_TIM_ConfigClockSource+0x172>
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	d87f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b70      	cmp	r3, #112	; 0x70
 800294a:	d01a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xa6>
 800294c:	2b70      	cmp	r3, #112	; 0x70
 800294e:	d87b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b60      	cmp	r3, #96	; 0x60
 8002952:	d050      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d877      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b50      	cmp	r3, #80	; 0x50
 800295a:	d03c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0xfa>
 800295c:	2b50      	cmp	r3, #80	; 0x50
 800295e:	d873      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d058      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x13a>
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d86f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b30      	cmp	r3, #48	; 0x30
 800296a:	d064      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b30      	cmp	r3, #48	; 0x30
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d867      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d05a      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	e062      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f000 fb35 	bl	8003000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	609a      	str	r2, [r3, #8]
      break;
 80029ae:	e04f      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f000 fb1e 	bl	8003000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f000 fa92 	bl	8002f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	; 0x50
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 faeb 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 fab1 	bl	8002f6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	; 0x60
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fadb 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 fa72 	bl	8002f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 facb 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f000 fac2 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a46:	e003      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e000      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <TIM_Base_SetConfig+0x114>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d00f      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <TIM_Base_SetConfig+0x118>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <TIM_Base_SetConfig+0x11c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <TIM_Base_SetConfig+0x120>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <TIM_Base_SetConfig+0x124>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <TIM_Base_SetConfig+0x114>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d027      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2c      	ldr	r2, [pc, #176]	; (8002b84 <TIM_Base_SetConfig+0x118>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d023      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <TIM_Base_SetConfig+0x11c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <TIM_Base_SetConfig+0x120>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <TIM_Base_SetConfig+0x124>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d017      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <TIM_Base_SetConfig+0x128>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <TIM_Base_SetConfig+0x12c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00f      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <TIM_Base_SetConfig+0x130>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <TIM_Base_SetConfig+0x134>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <TIM_Base_SetConfig+0x138>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <TIM_Base_SetConfig+0x13c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d108      	bne.n	8002b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <TIM_Base_SetConfig+0x114>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0xf8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <TIM_Base_SetConfig+0x124>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40010400 	.word	0x40010400
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800
 8002ba0:	40001800 	.word	0x40001800
 8002ba4:	40001c00 	.word	0x40001c00
 8002ba8:	40002000 	.word	0x40002000

08002bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 0302 	bic.w	r3, r3, #2
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <TIM_OC1_SetConfig+0xd8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC1_SetConfig+0x64>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <TIM_OC1_SetConfig+0xdc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0308 	bic.w	r3, r3, #8
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <TIM_OC1_SetConfig+0xd8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0x8e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <TIM_OC1_SetConfig+0xdc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40010400 	.word	0x40010400

08002c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f023 0210 	bic.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0320 	bic.w	r3, r3, #32
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <TIM_OC2_SetConfig+0xe4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_OC2_SetConfig+0x68>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <TIM_OC2_SetConfig+0xe8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10d      	bne.n	8002d10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <TIM_OC2_SetConfig+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_OC2_SetConfig+0x94>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <TIM_OC2_SetConfig+0xe8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d113      	bne.n	8002d48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40010400 	.word	0x40010400

08002d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <TIM_OC3_SetConfig+0xe0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC3_SetConfig+0x66>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <TIM_OC3_SetConfig+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10d      	bne.n	8002dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <TIM_OC3_SetConfig+0xe0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_OC3_SetConfig+0x92>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <TIM_OC3_SetConfig+0xe4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	621a      	str	r2, [r3, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40010400 	.word	0x40010400

08002e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	031b      	lsls	r3, r3, #12
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <TIM_OC4_SetConfig+0xa4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_OC4_SetConfig+0x68>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <TIM_OC4_SetConfig+0xa8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010400 	.word	0x40010400

08002f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 030a 	bic.w	r3, r3, #10
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0210 	bic.w	r2, r3, #16
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	031b      	lsls	r3, r3, #12
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 0307 	orr.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	431a      	orrs	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2201      	movs	r2, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e05a      	b.n	800315a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d022      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d01d      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d018      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a15      	ldr	r2, [pc, #84]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10c      	bne.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40010400 	.word	0x40010400
 800317c:	40014000 	.word	0x40014000
 8003180:	40001800 	.word	0x40001800

08003184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e03f      	b.n	8003216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fdaa 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fddf 	bl	8003d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08a      	sub	sp, #40	; 0x28
 8003222:	af02      	add	r7, sp, #8
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	d17c      	bne.n	8003338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_UART_Transmit+0x2c>
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e075      	b.n	800333a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_UART_Transmit+0x3e>
 8003258:	2302      	movs	r3, #2
 800325a:	e06e      	b.n	800333a <HAL_UART_Transmit+0x11c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2221      	movs	r2, #33	; 0x21
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003272:	f7fd fe1f 	bl	8000eb4 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d108      	bne.n	80032a0 <HAL_UART_Transmit+0x82>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e003      	b.n	80032a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032b0:	e02a      	b.n	8003308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fb1f 	bl	8003900 <UART_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e036      	b.n	800333a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3302      	adds	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	e007      	b.n	80032fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3301      	adds	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1cf      	bne.n	80032b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 faef 	bl	8003900 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e006      	b.n	800333a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	4613      	mov	r3, r2
 800334e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	d11d      	bne.n	8003398 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Receive_IT+0x26>
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e016      	b.n	800339a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_UART_Receive_IT+0x38>
 8003376:	2302      	movs	r3, #2
 8003378:	e00f      	b.n	800339a <HAL_UART_Receive_IT+0x58>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	461a      	mov	r2, r3
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fb24 	bl	80039dc <UART_Start_Receive_IT>
 8003394:	4603      	mov	r3, r0
 8003396:	e000      	b.n	800339a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0ba      	sub	sp, #232	; 0xe8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_UART_IRQHandler+0x66>
 80033f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fc07 	bl	8003c16 <UART_Receive_IT>
      return;
 8003408:	e256      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800340a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80de 	beq.w	80035d0 <HAL_UART_IRQHandler+0x22c>
 8003414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80d1 	beq.w	80035d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_UART_IRQHandler+0xae>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_UART_IRQHandler+0xd2>
 800345e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0202 	orr.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_UART_IRQHandler+0xf6>
 8003482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d011      	beq.n	80034ca <HAL_UART_IRQHandler+0x126>
 80034a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0208 	orr.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 81ed 	beq.w	80038ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x14e>
 80034e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb92 	bl	8003c16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_UART_IRQHandler+0x17a>
 8003516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04f      	beq.n	80035be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa9a 	bl	8003a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d141      	bne.n	80035b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800354c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800356a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1d9      	bne.n	8003532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4a7d      	ldr	r2, [pc, #500]	; (8003780 <HAL_UART_IRQHandler+0x3dc>)
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fe3f 	bl	8001216 <HAL_DMA_Abort_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e00e      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f990 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	e00a      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f98c 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e006      	b.n	80035cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f988 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035ca:	e170      	b.n	80038ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	bf00      	nop
    return;
 80035ce:	e16e      	b.n	80038ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 814a 	bne.w	800386e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8143 	beq.w	800386e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 813c 	beq.w	800386e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	f040 80b4 	bne.w	8003784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8140 	beq.w	80038b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	429a      	cmp	r2, r3
 800363c:	f080 8139 	bcs.w	80038b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	f000 8088 	beq.w	8003766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800366c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800368e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800369a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1d9      	bne.n	8003656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e1      	bne.n	80036a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003736:	f023 0310 	bic.w	r3, r3, #16
 800373a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003748:	65ba      	str	r2, [r7, #88]	; 0x58
 800374a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800374e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e3      	bne.n	8003724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fce8 	bl	8001136 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376e:	b29b      	uxth	r3, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8b6 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800377c:	e099      	b.n	80038b2 <HAL_UART_IRQHandler+0x50e>
 800377e:	bf00      	nop
 8003780:	08003b1f 	.word	0x08003b1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 808b 	beq.w	80038b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ce:	647a      	str	r2, [r7, #68]	; 0x44
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e3      	bne.n	80037aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	623b      	str	r3, [r7, #32]
   return(result);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003806:	633a      	str	r2, [r7, #48]	; 0x30
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e3      	bne.n	80037e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	60fb      	str	r3, [r7, #12]
   return(result);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	617b      	str	r3, [r7, #20]
   return(result);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e3      	bne.n	8003828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f83e 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800386c:	e023      	b.n	80038b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_UART_IRQHandler+0x4ea>
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f95d 	bl	8003b46 <UART_Transmit_IT>
    return;
 800388c:	e014      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <HAL_UART_IRQHandler+0x514>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f99d 	bl	8003be6 <UART_EndTransmit_IT>
    return;
 80038ac:	e004      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
    return;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
      return;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_UART_IRQHandler+0x514>
      return;
 80038b6:	bf00      	nop
  }
}
 80038b8:	37e8      	adds	r7, #232	; 0xe8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop

080038c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b090      	sub	sp, #64	; 0x40
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003910:	e050      	b.n	80039b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d04c      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <UART_WaitOnFlagUntilTimeout+0x30>
 8003920:	f7fd fac8 	bl	8000eb4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392c:	429a      	cmp	r2, r3
 800392e:	d241      	bcs.n	80039b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003950:	637a      	str	r2, [r7, #52]	; 0x34
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	613b      	str	r3, [r7, #16]
   return(result);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003984:	623a      	str	r2, [r7, #32]
 8003986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	61bb      	str	r3, [r7, #24]
   return(result);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e5      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e00f      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d09f      	beq.n	8003912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3740      	adds	r7, #64	; 0x40
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2222      	movs	r2, #34	; 0x22
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b095      	sub	sp, #84	; 0x54
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a80:	643a      	str	r2, [r7, #64]	; 0x40
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d119      	bne.n	8003b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af0:	61ba      	str	r2, [r7, #24]
 8003af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	613b      	str	r3, [r7, #16]
   return(result);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b12:	bf00      	nop
 8003b14:	3754      	adds	r7, #84	; 0x54
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fecb 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b21      	cmp	r3, #33	; 0x21
 8003b58:	d13e      	bne.n	8003bd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d114      	bne.n	8003b8e <UART_Transmit_IT+0x48>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d110      	bne.n	8003b8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1c9a      	adds	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	621a      	str	r2, [r3, #32]
 8003b8c:	e008      	b.n	8003ba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6211      	str	r1, [r2, #32]
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4619      	mov	r1, r3
 8003bae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fe5a 	bl	80038c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08c      	sub	sp, #48	; 0x30
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b22      	cmp	r3, #34	; 0x22
 8003c28:	f040 80ab 	bne.w	8003d82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d117      	bne.n	8003c66 <UART_Receive_IT+0x50>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d113      	bne.n	8003c66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	1c9a      	adds	r2, r3, #2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
 8003c64:	e026      	b.n	8003cb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d007      	beq.n	8003c8a <UART_Receive_IT+0x74>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <UART_Receive_IT+0x82>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e008      	b.n	8003caa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d15a      	bne.n	8003d7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0220 	bic.w	r2, r2, #32
 8003cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d135      	bne.n	8003d74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 0310 	bic.w	r3, r3, #16
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	623a      	str	r2, [r7, #32]
 8003d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	69f9      	ldr	r1, [r7, #28]
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d10a      	bne.n	8003d66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fdbb 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
 8003d72:	e002      	b.n	8003d7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fc fd8d 	bl	8000894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e002      	b.n	8003d84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3730      	adds	r7, #48	; 0x30
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d90:	b0c0      	sub	sp, #256	; 0x100
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	68d9      	ldr	r1, [r3, #12]
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	ea40 0301 	orr.w	r3, r0, r1
 8003db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003de4:	f021 010c 	bic.w	r1, r1, #12
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003df2:	430b      	orrs	r3, r1
 8003df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	6999      	ldr	r1, [r3, #24]
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	ea40 0301 	orr.w	r3, r0, r1
 8003e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8f      	ldr	r3, [pc, #572]	; (8004058 <UART_SetConfig+0x2cc>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d005      	beq.n	8003e2c <UART_SetConfig+0xa0>
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b8d      	ldr	r3, [pc, #564]	; (800405c <UART_SetConfig+0x2d0>)
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d104      	bne.n	8003e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe f856 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e34:	e003      	b.n	8003e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e36:	f7fe f83d 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	f040 810c 	bne.w	8004064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	1891      	adds	r1, r2, r2
 8003e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e66:	415b      	adcs	r3, r3
 8003e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e6e:	4621      	mov	r1, r4
 8003e70:	eb12 0801 	adds.w	r8, r2, r1
 8003e74:	4629      	mov	r1, r5
 8003e76:	eb43 0901 	adc.w	r9, r3, r1
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8e:	4690      	mov	r8, r2
 8003e90:	4699      	mov	r9, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	eb18 0303 	adds.w	r3, r8, r3
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	eb49 0303 	adc.w	r3, r9, r3
 8003ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eba:	460b      	mov	r3, r1
 8003ebc:	18db      	adds	r3, r3, r3
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	eb42 0303 	adc.w	r3, r2, r3
 8003ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ed0:	f7fc f98c 	bl	80001ec <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <UART_SetConfig+0x2d4>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	011c      	lsls	r4, r3, #4
 8003ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003efc:	415b      	adcs	r3, r3
 8003efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f04:	4641      	mov	r1, r8
 8003f06:	eb12 0a01 	adds.w	sl, r2, r1
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f24:	4692      	mov	sl, r2
 8003f26:	469b      	mov	fp, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f32:	464b      	mov	r3, r9
 8003f34:	eb4b 0303 	adc.w	r3, fp, r3
 8003f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f50:	460b      	mov	r3, r1
 8003f52:	18db      	adds	r3, r3, r3
 8003f54:	643b      	str	r3, [r7, #64]	; 0x40
 8003f56:	4613      	mov	r3, r2
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f66:	f7fc f941 	bl	80001ec <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <UART_SetConfig+0x2d4>)
 8003f72:	fba3 2301 	umull	r2, r3, r3, r1
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2264      	movs	r2, #100	; 0x64
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	1acb      	subs	r3, r1, r3
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <UART_SetConfig+0x2d4>)
 8003f88:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f94:	441c      	add	r4, r3
 8003f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fb8:	4641      	mov	r1, r8
 8003fba:	1851      	adds	r1, r2, r1
 8003fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	00cb      	lsls	r3, r1, #3
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fda:	4651      	mov	r1, sl
 8003fdc:	00ca      	lsls	r2, r1, #3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fec:	464b      	mov	r3, r9
 8003fee:	460a      	mov	r2, r1
 8003ff0:	eb42 0303 	adc.w	r3, r2, r3
 8003ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800400c:	460b      	mov	r3, r1
 800400e:	18db      	adds	r3, r3, r3
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
 8004012:	4613      	mov	r3, r2
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800401e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004022:	f7fc f8e3 	bl	80001ec <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <UART_SetConfig+0x2d4>)
 800402c:	fba3 1302 	umull	r1, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2164      	movs	r1, #100	; 0x64
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a08      	ldr	r2, [pc, #32]	; (8004060 <UART_SetConfig+0x2d4>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 0207 	and.w	r2, r3, #7
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4422      	add	r2, r4
 8004052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004054:	e105      	b.n	8004262 <UART_SetConfig+0x4d6>
 8004056:	bf00      	nop
 8004058:	40011000 	.word	0x40011000
 800405c:	40011400 	.word	0x40011400
 8004060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800406e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004076:	4642      	mov	r2, r8
 8004078:	464b      	mov	r3, r9
 800407a:	1891      	adds	r1, r2, r2
 800407c:	6239      	str	r1, [r7, #32]
 800407e:	415b      	adcs	r3, r3
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004086:	4641      	mov	r1, r8
 8004088:	1854      	adds	r4, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb43 0501 	adc.w	r5, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	00eb      	lsls	r3, r5, #3
 800409a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409e:	00e2      	lsls	r2, r4, #3
 80040a0:	4614      	mov	r4, r2
 80040a2:	461d      	mov	r5, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040ac:	464b      	mov	r3, r9
 80040ae:	eb45 0303 	adc.w	r3, r5, r3
 80040b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040d2:	4629      	mov	r1, r5
 80040d4:	008b      	lsls	r3, r1, #2
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040dc:	4621      	mov	r1, r4
 80040de:	008a      	lsls	r2, r1, #2
 80040e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040e4:	f7fc f882 	bl	80001ec <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4b60      	ldr	r3, [pc, #384]	; (8004270 <UART_SetConfig+0x4e4>)
 80040ee:	fba3 2302 	umull	r2, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	011c      	lsls	r4, r3, #4
 80040f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	1891      	adds	r1, r2, r2
 800410e:	61b9      	str	r1, [r7, #24]
 8004110:	415b      	adcs	r3, r3
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004118:	4641      	mov	r1, r8
 800411a:	1851      	adds	r1, r2, r1
 800411c:	6139      	str	r1, [r7, #16]
 800411e:	4649      	mov	r1, r9
 8004120:	414b      	adcs	r3, r1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004130:	4659      	mov	r1, fp
 8004132:	00cb      	lsls	r3, r1, #3
 8004134:	4651      	mov	r1, sl
 8004136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413a:	4651      	mov	r1, sl
 800413c:	00ca      	lsls	r2, r1, #3
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	4603      	mov	r3, r0
 8004144:	4642      	mov	r2, r8
 8004146:	189b      	adds	r3, r3, r2
 8004148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800414c:	464b      	mov	r3, r9
 800414e:	460a      	mov	r2, r1
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	67bb      	str	r3, [r7, #120]	; 0x78
 8004162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004170:	4649      	mov	r1, r9
 8004172:	008b      	lsls	r3, r1, #2
 8004174:	4641      	mov	r1, r8
 8004176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800417a:	4641      	mov	r1, r8
 800417c:	008a      	lsls	r2, r1, #2
 800417e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004182:	f7fc f833 	bl	80001ec <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <UART_SetConfig+0x4e4>)
 800418c:	fba3 1302 	umull	r1, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	2164      	movs	r1, #100	; 0x64
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	3332      	adds	r3, #50	; 0x32
 800419e:	4a34      	ldr	r2, [pc, #208]	; (8004270 <UART_SetConfig+0x4e4>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	441c      	add	r4, r3
 80041ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b0:	2200      	movs	r2, #0
 80041b2:	673b      	str	r3, [r7, #112]	; 0x70
 80041b4:	677a      	str	r2, [r7, #116]	; 0x74
 80041b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041ba:	4642      	mov	r2, r8
 80041bc:	464b      	mov	r3, r9
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	415b      	adcs	r3, r3
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ca:	4641      	mov	r1, r8
 80041cc:	1851      	adds	r1, r2, r1
 80041ce:	6039      	str	r1, [r7, #0]
 80041d0:	4649      	mov	r1, r9
 80041d2:	414b      	adcs	r3, r1
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041e2:	4659      	mov	r1, fp
 80041e4:	00cb      	lsls	r3, r1, #3
 80041e6:	4651      	mov	r1, sl
 80041e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ec:	4651      	mov	r1, sl
 80041ee:	00ca      	lsls	r2, r1, #3
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	4603      	mov	r3, r0
 80041f6:	4642      	mov	r2, r8
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80041fc:	464b      	mov	r3, r9
 80041fe:	460a      	mov	r2, r1
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	663b      	str	r3, [r7, #96]	; 0x60
 8004210:	667a      	str	r2, [r7, #100]	; 0x64
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800421e:	4649      	mov	r1, r9
 8004220:	008b      	lsls	r3, r1, #2
 8004222:	4641      	mov	r1, r8
 8004224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004228:	4641      	mov	r1, r8
 800422a:	008a      	lsls	r2, r1, #2
 800422c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004230:	f7fb ffdc 	bl	80001ec <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <UART_SetConfig+0x4e4>)
 800423a:	fba3 1302 	umull	r1, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2164      	movs	r1, #100	; 0x64
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	3332      	adds	r3, #50	; 0x32
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <UART_SetConfig+0x4e4>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4422      	add	r2, r4
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	bf00      	nop
 8004264:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	51eb851f 	.word	0x51eb851f

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f000 f820 	bl	80042cc <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004304 	.word	0x08004304
 80042b0:	08004304 	.word	0x08004304
 80042b4:	08004304 	.word	0x08004304
 80042b8:	08004308 	.word	0x08004308

080042bc <memset>:
 80042bc:	4402      	add	r2, r0
 80042be:	4603      	mov	r3, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
